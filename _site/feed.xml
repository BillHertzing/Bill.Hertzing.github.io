<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-05-11T21:17:26-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the family. We&apos;ve got it all!</subtitle><author><name>William (Bill) Hertzing</name></author><entry><title type="html">Bills Blog Pre-Release Checklist</title><link href="https://billhertzing.github.io/technical/bills-blog-pre-release-checklist/" rel="alternate" type="text/html" title="Bills Blog Pre-Release Checklist" /><published>2021-05-11T21:17:26-06:00</published><updated>2021-05-11T21:17:26-06:00</updated><id>https://billhertzing.github.io/technical/bills-blog-pre-release-checklist</id><content type="html" xml:base="https://billhertzing.github.io/technical/bills-blog-pre-release-checklist/">&lt;p&gt;Things about the release candidate to validate before starting the &lt;a href=&quot;bills-blog-release-process.md&quot;&gt;Release process&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conventions&quot;&gt;Conventions&lt;/h2&gt;

&lt;p&gt;&amp;lt;Feat/Bug/Post-Branch&amp;gt; is the name of the branch that is being evaluated for release. The branch being evaluated for release will be referred to as the Release Candidate in this document.&lt;/p&gt;

&lt;h2 id=&quot;criteria-and-evaluation&quot;&gt;Criteria and Evaluation&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Checkout the &amp;lt;Feat/Bug/Post-Branch&amp;gt; with Visual Studio Code (VSC).&lt;/li&gt;
  &lt;li&gt;Review any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warnings&lt;/code&gt; that appear in VSC’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problems&lt;/code&gt;. pane. Clean up the underlying issue, or decide they are OK to live with for this release. Commit any changes made during this step to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Feat/Bug/Post-Branch&amp;gt;&lt;/code&gt; using a WIP  commit message. Push these commits to the remote.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;check-text-spelling-grammar-and-case-consistency-on-proper-names&quot;&gt;Check text spelling, grammar, and case-consistency on proper names&lt;/h2&gt;

&lt;p&gt;Using VSC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use a spell checker plugin and ensure it reports no misspellings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Grammarly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write instructions on using the unofficial Grammarly VSC plugin on a draft post]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure that proper names that refer to software or hardware concepts and company names, are consistent across the site.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write a script that tests the site for proper noun casing consistency]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;check-post-and-page-layout-consistency&quot;&gt;Check post and page layout consistency&lt;/h2&gt;

&lt;p&gt;ToDo:&lt;/p&gt;

&lt;h2 id=&quot;site-checks&quot;&gt;&lt;a name=&quot;Site Checks&quot;&gt;&lt;/a&gt;Site Checks&lt;/h2&gt;

&lt;p&gt;The following subsections provide details about specific items to validate.&lt;/p&gt;

&lt;h3 id=&quot;check-images&quot;&gt;Check Images&lt;/h3&gt;

&lt;p&gt;For posts that include images, ensure the links in the post properly reference images hosted in 3rd party clouds.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Images are created in multiple responsive sizes&lt;/li&gt;
  &lt;li&gt;Image thumbnails are created&lt;/li&gt;
  &lt;li&gt;Images are checked for any PPI in the metadata,and scrubbed&lt;/li&gt;
  &lt;li&gt;Images comply with accessibility guidelines - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt&lt;/code&gt; text and navigation aides&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get final links to images (not videos)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;For Dropbox hosted images:
        &lt;ul&gt;
          &lt;li&gt;Get a Dropbox developer access token from https://www.dropbox.com/developers/apps.
            &lt;ul&gt;
              &lt;li&gt;[ToDo: link to attributions on how to create a Dropbox account, developer credentials, and an app to allow API access to dropbox]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:DropBoxAccessToken = &quot;&amp;lt;DropBoxAccessToken&amp;gt;&quot;&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;[ToDo: link to document describing how to access the ATAP Powershell BuildTooling modules]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:PSModulePath = &quot;./;&quot; + $env:PSModulePath&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Run the Powershell script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-DropboxSharedLinks.ps1&apos; -verbose -path &quot;Dropbox-path-to-folder-having-links&quot;&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Validate the references to images in the post uses the link information returned by the Powershell script.
            &lt;ul&gt;
              &lt;li&gt;[ToDo: A script to automate link checking the document and the links from Dropbox]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For Google Photos hosted images:
        &lt;ul&gt;
          &lt;li&gt;[ToDo: write instructions and scripts for Google Photo hosted images]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For Microsoft Drive hosted images:
        &lt;ul&gt;
          &lt;li&gt;[ToDo: write instructions and scripts for Microsoft Drive hosted images]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[ToDo: write a script that tests each image the site and all of the site’s posts reference]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;check-internal-links&quot;&gt;Check internal links&lt;/h3&gt;

&lt;p&gt;Ensure that all links in the post that refer to anchor points within the same post, or to anchor points in other points, work correctly. All Headings in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; documents should include an explicit anchor point. Links to headers in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; documents should refer to the anchor point associated with that header. See also the many answers to this StackOverflow question &lt;a href=&quot;https://stackoverflow.com/questions/5319754/cross-reference-named-anchor-in-markdown&quot;&gt;Cross-reference (named anchor) in markdown&lt;/a&gt; for more insight into why explicit anchors are desirable.&lt;/p&gt;

&lt;h3 id=&quot;check-styling&quot;&gt;Check Styling&lt;/h3&gt;

&lt;p&gt;ToDo checklist including responsive tests&lt;/p&gt;

&lt;h3 id=&quot;check-scripts&quot;&gt;Check Scripts&lt;/h3&gt;

&lt;p&gt;If the site contains any JavaScript functions, these need to be checked.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write a testing document that describes how to test each JS script / function incorporated into the site]&lt;/li&gt;
  &lt;li&gt;[ToDo: write a script that tests each JS script / function incorporated into the site]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;check-security&quot;&gt;Check Security&lt;/h3&gt;

&lt;p&gt;It is very important to ensure that nothing in the site allows bad actors to violate its security. This is especially true of any site features that store persistent data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write a security document that describes how to test the site’s security for data-at-rest, and data-in-transit]&lt;/li&gt;
  &lt;li&gt;[ToDo: write a security document that describes how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; while developing the site]&lt;/li&gt;
  &lt;li&gt;[ToDo: write a script that tests the site for Security]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;check-accessibility&quot;&gt;Check Accessibility&lt;/h3&gt;

&lt;p&gt;Accessability features of the site allow people with vision issues to use aids in navigating the site. Accessability design ensure a good experience for these people.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write a development and testing document(s) that describes how to design and test the site for Accessibility]&lt;/li&gt;
  &lt;li&gt;[ToDo: write a script that tests the site for Accessibility]&lt;/li&gt;
  &lt;li&gt;[ToDo: add Internet references for additional information on Accessible design]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;check-globalization-and-localization&quot;&gt;Check Globalization and Localization&lt;/h3&gt;

&lt;p&gt;Globalization and Localization features of the site make it easier to produce translations of the site into other languages and cultures.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write a development and testing document(s) that describes how to design and test the site for Globalization and Localization]&lt;/li&gt;
  &lt;li&gt;[ToDo: write a script that tests the site for Globalization and Localization]&lt;/li&gt;
  &lt;li&gt;[ToDo: add Internet references for additional information for Globalization and Localization as it applies to static Blog Post sites]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;check-that-the-release-candidate-works-on-the-internet&quot;&gt;Check that the Release Candidate works on the Internet&lt;/h2&gt;

&lt;p&gt;The Release Candidate has to be tested “as if” it was publicly accessible from the Internet. This focuses on the availability of content that is served from locations other than the main site, e.g. images, JS libraries, and CSS libraries.&lt;/p&gt;

&lt;h3 id=&quot;setup-ngrok&quot;&gt;Setup &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngrok&lt;/code&gt;`&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;See &lt;a href=&quot;https://dashboard.ngrok.com/get-started/setup&quot;&gt;Getting Started with ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;publish-to-internet-via-ngrok&quot;&gt;Publish to Internet via ngrok&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; to ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; has been built with no drafts and with Disqus comments enabled.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngrok&lt;/code&gt; from a Powershell prompt.&lt;/li&gt;
  &lt;li&gt;Copy the ngrok link information that is displayed&lt;/li&gt;
  &lt;li&gt;Using multiple different computers and devices with multiple different screen sizes, evaluate the public site (ngrok link) against the criteria in &lt;a href=&quot;#Site Checks&quot;&gt;Site Checks&lt;/a&gt; .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stop the local Jekyll server and close the ngrok channel&lt;/p&gt;

&lt;h2 id=&quot;steps-to-publish-a-draft-post&quot;&gt;Steps to publish a draft post&lt;/h2&gt;

&lt;p&gt;if the site release includes one or more posts to be published, follow these steps to move the post from its drafts state to the published state.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ToDo: write a document that describes how to move a post from draft to production]&lt;/li&gt;
  &lt;li&gt;[ToDo: write a script that moves a post from draft to production]&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the terminal is at the root of the repo&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll publish &quot;_drafts/Word-Template-for-letter-to-CPA-HOA-regarding-sale-of-golf-course.md&quot;&lt;/code&gt;`&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv  _posts/2021-05-01-Word-Template-for-letter-to-CPA-HOA-regarding-sale-of-golf-course.md political/2021-05-01-Word-Template-for-letter-to-CPA-HOA-regarding-sale-of-golf-course.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;*ToDo: fix the git issue, figure out how to tell git that the draft is renamed to the post. Git thinks its a delete and an add. Automate this&lt;/li&gt;
  &lt;li&gt;Ensure the file has been moved and renamed, to the correct category subdirectory and the proper date prefix added.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; and validate the new post passes the &lt;a href=&quot;ToDo: Real Soon Now&quot;&gt;New Post Checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Pre-Release Checklist" /><category term="Process" /><summary type="html">Things about the release candidate to validate before starting the Release process</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 04</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-04/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 04" /><published>2021-05-11T20:49:22-06:00</published><updated>2021-05-11T20:49:22-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-04</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-04/">&lt;p&gt;Welcome to the fourth part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first posts in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Site Part 01&lt;/a&gt;, &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-02/&quot;&gt;How I setup this GitHub Pages Blog Site Part 02&lt;/a&gt;, and &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-03/&quot;&gt;How I setup this GitHub Pages Blog Site Part 03&lt;/a&gt; you should probably give them a quick review, to become familiar with how the site has been built up to this point.&lt;/p&gt;

&lt;p&gt;The next steps will be to implement the features specified in &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/4&quot;&gt;Milestone 0.04.0&lt;/a&gt;. I’ve already created Milestones for Release V0.05, &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/5&quot;&gt;Milestone 0.05.0&lt;/a&gt; as well and updated the Milestone &lt;em&gt;Release Far Future&lt;/em&gt; to reflect whats planned for later. Release V0.05 calls for creation of a  Github project for tracking future features,So at that point hopefully, there will be a single point for tracking and reporting on planned and requested features.&lt;/p&gt;

&lt;h2 id=&quot;add-a-new-branch-sprintforrelease004000&quot;&gt;Add a new branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForRelease0.04.000&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch create SprintForRelease0.04.000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;add-jekyll-compose&quot;&gt;Add jekyll-compose&lt;/h2&gt;

&lt;p&gt;jekyll-compose adds commands that help streamline the creation and publishing of posts. Installation instructions and details can be found in &lt;a href=&quot;https://github.com/jekyll/jekyll-compose&quot;&gt;jekyll-compose&lt;/a&gt;. What follows are th steps I took and choices I made for this site.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the Gemfile in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &apos;jekyll-compose&apos;, group: [:jekyll_plugins]&lt;/code&gt; just above the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins:&lt;/code&gt; key.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Refer to detailed instructions in &lt;a href=&quot;https://github.com/jekyll/jekyll-compose&quot;&gt;jekyll-compose&lt;/a&gt; for using the new commands. This post was drafted and published using the commands added by this tool, and it made the process much much easier. I created the draft of this post using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll draft &quot;how-i-setup-this-github-pages-blog-site-part-04&quot;&lt;/code&gt;, which placed a file containing just Front Matter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id=&quot;update-the-commit-template&quot;&gt;Update the commit template&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitTemplates/git.commit.template.txt&lt;/code&gt; and change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;03&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;04&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;first-commit-on-the-sprint-branch&quot;&gt;First commit on the sprint branch&lt;/h2&gt;

&lt;p&gt;Commit the changes and use VSC to synchronize changes with the remote, then inspect the Github repository to ensure the branch and first commit exist on the repo. I like using Git Lens along with Git Graph. ToDo: insert jpg You can see the site development history clearly.&lt;/p&gt;

&lt;p&gt;To show what a feature development branch looks like with more than one commit, I’ll make a small one now.&lt;/p&gt;

&lt;p&gt;Afterwards, this is what it looks like ToDo: insert jpg.&lt;/p&gt;

&lt;p&gt;And a third: ToDo: insert jpg&lt;/p&gt;

&lt;h2 id=&quot;add-jekyll-minifier&quot;&gt;Add jekyll-minifier&lt;/h2&gt;

&lt;p&gt;Minification is the process of rewriting the stream of data sent from the server to the browser to make the stream as small as possible.Minification of your site is something that all good digital properties should do. It’s just manners. But this has consequences if a developer is trying to read the data stream and debug problems.&lt;/p&gt;

&lt;p&gt;As with any optimization, it is important to measure the baseline, and then the improvement. ToDo: A short tutorial on Fiddler 4. ToDo: Find online site that can quantify the number of bytes. Or see if Fiddler 4 has that capability.&lt;/p&gt;

&lt;p&gt;This minifier allows fine control over minification of HTML, JavaScript, CSS, and Json, as well as many more minification options.&lt;/p&gt;

&lt;p&gt;Detailed instructions are here at &lt;a href=&quot;https://github.com/digitalsparky/jekyll-minifier&quot;&gt;jekyll-minifier&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-minifier&lt;/code&gt; Make a note of the version installed, mine was 0.1.10&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; at the root of the repo, and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-minifier&quot;, &quot;~&amp;gt; 0.1.10&quot;&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt; section.&lt;/li&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-minifier&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt;: key&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-minifier&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Further down the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; add lines that control the minifier’s settings. Add the entire list now, and later we will work through each setting and decide if this site will need it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;jekyll-minifier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;preserve_php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_spaces_inside_tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Default: true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_multi_spaces&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Default: true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_comments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# Default: true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_intertag_spaces&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_quotes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compress_css&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# Default: true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compress_javascript&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Default: true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compress_json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# Default: true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;simple_doctype&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_script_attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_style_attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_link_attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_form_attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_input_attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_javascript_protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_http_protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;remove_https_protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;preserve_line_breaks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;simple_boolean_attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;compress_js_templates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# Default: false&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;preserve_patterns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# Default: (empty)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uglifier_args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;# Default: (empty)&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;es6 support is experimental.&lt;/em&gt;&lt;/strong&gt;  If your site is using es6 scripts, see the &lt;a href=&quot;https://github.com/digitalsparky/jekyll-minifier&quot;&gt;jekyll-minifier&lt;/a&gt; documentation for possible issues.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt; and ensure the site looks like it should. The re-run the tests that measure the size of the data stream.&lt;/p&gt;

&lt;h2 id=&quot;setup-masthead-navigation&quot;&gt;Setup masthead navigation&lt;/h2&gt;

&lt;p&gt;The MM theme has built-in support for masthead navigation. These are the links that appear across the top of every page, and which collapse down into the navigation hamburger on narrow screens. There is a direct relationship between the files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages&lt;/code&gt; subdirectory and the navigation links in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup-archive-pages&quot;&gt;Setup archive pages&lt;/h2&gt;

&lt;p&gt;The MM theme has two kinds of archive support built in, either a Liquid approach or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-archives&lt;/code&gt; approach. I chose to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-archives&lt;/code&gt; plugin.&lt;/p&gt;

&lt;h3 id=&quot;add-the-jekyll-archives-gem&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-archives&lt;/code&gt; gem&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-archives&lt;/code&gt;. Mine came back as version 2.2.1.&lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the root of  the repo. Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-archives&quot;, &quot;~&amp;gt; 2.2.1&quot;&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt; group.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt; and ensure the site builds correctly.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;modify-_configyml-for-jekyll-archives&quot;&gt;Modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-archives&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, and find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-archives&lt;/code&gt; section. Uncomment the settings that appear in MM’s default. Mine looks like this:&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;jekyll-archives&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;categories&lt;/span&gt;
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tags&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;layouts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;archive-taxonomy&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;archive-taxonomy&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;permalinks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/categories/:name/&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tags/:name/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;create-override-for-_pagescategory-archivemd&quot;&gt;Create override for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/category-archive.md&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There needs to be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in the generated sites &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/categories/&lt;/code&gt; directory.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a new subdirectory and file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/category-archive.md&lt;/code&gt; at the root of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter to the file. Nothing else is needed.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Category&quot;&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;categories&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/categories/&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;author_profile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; and ensure the site builds correctly&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000/categories/&lt;/code&gt; and validate there is a page listing all current posts organized by category.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;create-override-for-_pagesyear-archivemd&quot;&gt;Create override for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/year-archive.md&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There needs to be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in the generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sites&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/year-archive/&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/year-archive.md&lt;/code&gt; at the root of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter to the file. Nothing else is needed.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Date&quot;&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;archive&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/years-archive/&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;author_profile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; and ensure the site builds correctly&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000/tags/&lt;/code&gt; and validate there is a page listing all current posts organized by Date.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;create-override-for-_pagestags-archivemd&quot;&gt;Create override for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/tags-archive.md&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There needs to be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in the generated sites &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tags/&lt;/code&gt; directory.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/tags-archive.md&lt;/code&gt; at the root of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter to the file. Nothing else is needed.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tags&quot;&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Tags&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tags/&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;author_profile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; and ensure the site builds correctly&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000/tags/&lt;/code&gt; and validate there is a page listing all current posts organized by tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;modify-the-look-of-the-tags-archive-page&quot;&gt;Modify the look of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags-archive&lt;/code&gt; page&lt;/h3&gt;

&lt;p&gt;I found an archive page layout for tags that I like better than the MM default. To implement this alternative,&lt;/p&gt;

&lt;p&gt;ToDo: implement https://justin.kelly.org.au/jekyll-tags-page/ and stylesheet changes https://mmistakes.github.io/minimal-mistakes/docs/stylesheets/&lt;/p&gt;

&lt;h2 id=&quot;setup-navigation-links&quot;&gt;Setup navigation links&lt;/h2&gt;

&lt;p&gt;The MM theme has masthead navigation capability built-in. Details on using it are at MM’s &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/navigation/&quot;&gt;Navigation&lt;/a&gt; . Here are the steps I took&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a subdirectory and file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt; and open it for editing. I started with the following contents:&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;ToDo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Add text from real file&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt; and ensure masthead navigation is present. Play around with making the browser wider and narrower, and note how the horizontal masthead links collapse into a navigation hamburger.&lt;/p&gt;

&lt;h2 id=&quot;setup-custom-sidebar-navigation&quot;&gt;Setup custom sidebar navigation&lt;/h2&gt;

&lt;p&gt;The MM theme has the custom sidebar navigation capability built-in. Details on using it are at &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/layouts/#custom-sidebar-content&quot;&gt;Custom sidebar navigation menu&lt;/a&gt; . Here are the steps I took:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt; . I added with the following contents:&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;Repositories Overview&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Overview&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Guide&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/overview-guide/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Structure&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/structure/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Testing&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/Testing/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ReleaseProcess&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/ReleaseProcess/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Upgrading&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/upgrading/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;EndOfLife&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/EndOfLife/&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;SCM Conventions&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SCM&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Code,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Doc,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DB&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/SCM-Conventions/overview/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SCM&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/Code-VersionControlProcess/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Docs&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SCM&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/Documentation-VersionControlProcess/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SCM&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/DataBase-VersionControlProcess/&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Peer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SCM&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/docs/Peer-repository-AutoDoc-VersionControlProcess/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-rule-for-git-merge&quot;&gt;Add rule for Git Merge&lt;/h2&gt;

&lt;p&gt;If a BugFix or new Post goes out on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; while you are working on a Feature branch, you will need to rebase the feature branch onto the new head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. There are likely to be a lot of files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; with merge conflicts! since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; is all generated files, we can safely ignore any merge conflicts in the files under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt;. We can create a merge  to accomplish this by adding a custom merge driver, as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Add the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/_site/**/*.* merge=keep-local-changes&lt;/code&gt; and save the file.&lt;/li&gt;
  &lt;li&gt;Create (or edit) the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;, which is your windows HOME directory, and contains the global git configuration settings.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following block of text &lt;a href=&quot;https://stackoverflow.com/questions/12218977/git-add-merge-rule-to-config-for-specific-file&quot;&gt;Geordie answer to this SO question&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[merge &quot;keep-local-changes&quot;]
   name = A custom merge driver which always keeps the local changes
   driver = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;You will need to close VSC and re-open it for the changes to the global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt; to take effect.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rebase-feature-branch-onto-the-head-of-main-after-a-site-patchpost-point-release&quot;&gt;Rebase Feature branch onto the head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; after a site patch/post point release&lt;/h2&gt;

&lt;p&gt;ToDo: Replace with reference to the proper section in the Release Process document.&lt;/p&gt;

&lt;h2 id=&quot;modify--includesgallery&quot;&gt;Modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-includes/gallery&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component opens an image link reusing the same tab as the parent document. Modern practice is to open an image link in a new tab. modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; so that the anchor href now includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target = &quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&lt;/code&gt; . This will tell browsers to open the image in a new tab.&lt;/p&gt;

&lt;h2 id=&quot;add-the-page-_pagessubscribe-to-bills-blogmd&quot;&gt;Add the page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/subscribe-to-bills-blog.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The page provides instructions on using &lt;a href=&quot;https://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt; to subscribe to the site’s RSS feed. Add the page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscribe-to-bills-blog.md&lt;/code&gt; to the root of the repo. The Front Matter should look like this:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;single&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/subscribe-to-bills-blog/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;How to subscribe to posts from Bill&apos;s Blog site&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RSS&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Feed&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;technical&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add content to the page explaining the steps necessary to setup an IFTTT trigger and target action that produces an e-mail message whenever the site’s RSS feed indicates a change has been made to the site.&lt;/p&gt;

&lt;h3 id=&quot;update-masthead-navigation&quot;&gt;Update masthead navigation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; section:&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Subscribe&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/subscribe-to-bills-blog/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;add-adstxt-file-from-disqus&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ads.txt&lt;/code&gt; file from Disqus&lt;/h2&gt;

&lt;p&gt;ADS stands for Authorized Digital Sellers. You can read more about ads.txt and the rationale for creating it, at &lt;a href=&quot;https://help.disqus.com/en/articles/1765332-ads-txt-faq&quot;&gt;Ads.txt FAQ&lt;/a&gt;  Disqus and other companies have cooperated to identify sellers with validated reputations. Disqus expects this file to be present in the root of the site.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ads.txt&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Copy the contents of https://disqusads.com/ads.txt into the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ads.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save the file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This file needs to be maintained monthly. Setup a reminder to regularly compare the latest version of the file with the one local to your site, and update your local copy accordingly.&lt;/p&gt;

&lt;p&gt;[ToDo: write a script to automate this, and reference the script here.]
[ToDo: write a post how to automate this, and schedule it to run monthly and notify the site admin’s list.]&lt;/p&gt;

&lt;h2 id=&quot;add-draft-post-bills-blog-pre-release-checklistmd&quot;&gt;Add draft post &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bills-blog-pre-release-checklist.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ToDo:&lt;/p&gt;

&lt;h2 id=&quot;add-draft-post-bills-blog-release-processmd&quot;&gt;Add draft post &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bills-blog-release-process.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ToDo:&lt;/p&gt;

&lt;h2 id=&quot;add-any-personal-posts-to-be-published&quot;&gt;Add any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; posts to be published&lt;/h2&gt;

&lt;p&gt;If you have created any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;political&lt;/code&gt; posts while working on this feature release, and would like to publish those posts along with this site release, follow the steps in the &lt;a href=&quot;https://technical/&amp;lt;date&amp;gt;-bills-blog-pre-release-checklist&quot;&gt;Bills Blog Pre-Release Checklist&lt;/a&gt; post and apply the post validation tests to any posts to be released&lt;/p&gt;

&lt;h2 id=&quot;validate-this-post-part04&quot;&gt;Validate this post (..part04)&lt;/h2&gt;

&lt;p&gt;Follow the steps in the &lt;a href=&quot;&quot;&gt;pre-release checklist&lt;/a&gt; and apply the post validation tests to this post.&lt;/p&gt;

&lt;h2 id=&quot;prepare-to-release-v004000-of-the-site&quot;&gt;prepare to release V0.04.000 of the site&lt;/h2&gt;

&lt;p&gt;Follow the steps in the &lt;a href=&quot;&quot;&gt;pre-release checklist&lt;/a&gt; and apply the site validation tests to the feature branch.&lt;/p&gt;

&lt;h2 id=&quot;release-v004000-of-the-site-along-with-any-mew-published-posts&quot;&gt;Release V0.04.000 of the site along with any mew published posts&lt;/h2&gt;

&lt;p&gt;Follow the steps in the &lt;a href=&quot;&quot;&gt;Bills Blog Release Process&lt;/a&gt; post.&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Jekyll" /><category term="GitHubPages" /><summary type="html">Welcome to the fourth part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first posts in the series How I setup this GitHub Pages Blog Site Part 01, How I setup this GitHub Pages Blog Site Part 02, and How I setup this GitHub Pages Blog Site Part 03 you should probably give them a quick review, to become familiar with how the site has been built up to this point.</summary></entry><entry><title type="html">Bill’s Blog Release Process</title><link href="https://billhertzing.github.io/technical/bills-blog-release-process/" rel="alternate" type="text/html" title="Bill’s Blog Release Process" /><published>2021-05-11T20:03:30-06:00</published><updated>2021-05-11T20:03:30-06:00</updated><id>https://billhertzing.github.io/technical/bills-blog-release-process</id><content type="html" xml:base="https://billhertzing.github.io/technical/bills-blog-release-process/">&lt;p&gt;Detailed steps to finalize a Feature/Bugfix/Post branch, merge it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, and release a new version of the site.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;This process document assumes that there is no development work directly on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. All changes are done in separate branches. There are currently three kinds of development branches.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Feature branches - these branches are where new features to the site are developed and tested. They may include Bugfix work when the bug is minor and can fixing it can be rolled into new feature effort. A Feature Release can also incorporate new Post work when a Release milestone calls for a new post, e.g. the posts in the ongoing series “How I setup this Github Pages blog site” are part of each version’s feature effort, and one such post is released with each feature Release. When a Feature branch is merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, the Major or Minor numbers of the Semantic Version will be incremented.&lt;/li&gt;
  &lt;li&gt;Bugfix branches - these branches are created to fix bugs that have been recorded in the repository’s Issues list. These are typically short lived branches with very limited changes, aimed at addresses specific deficiencies in the site. They are typically developed in parallel with Feature branches. When a Bugfix branch is merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, the Patch number (third part of the Semantic Version) will be incremented.&lt;/li&gt;
  &lt;li&gt;Post branches - a new branch created for the purpose of releasing a new published post, or significant editorial reworking of an existing published post. These branches are typically very short-lived, and are used to move a draft post to a published post. When a Post branch is merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, the patch number of the site’s Version is incremented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The criteria and steps to create new branches is discussed in &lt;a href=&quot;&quot;&gt;TBD&lt;/a&gt;. This document assumes that there are “more than one” active branches that have been created to track development work, and that all development work is being tracked in a branch. This document is focused on the steps needed to release one active development branch into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, and update the production site with the new stuff.&lt;/p&gt;

&lt;p&gt;The branch being released will be referred to as the Release Candidate in this document.&lt;/p&gt;

&lt;h2 id=&quot;ensure-the-featbugpost-branch--meets-release-criteria-and-is-built-atop-the-latest-main&quot;&gt;Ensure the &amp;lt;Feat/Bug/Post-Branch&amp;gt;  meets release criteria and is built atop the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The development work on the branch meets the criteria set out in the &lt;a href=&quot;bills-blog-pre-release-checklist.md&quot;&gt;Bill’s Blog Pre-Release Checklist&lt;/a&gt;. This ensures the new work meets the standards expected for a release.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch has no changes to it since the last Release tag was applied. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch builds and serves cleanly, without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drafts&lt;/code&gt; option.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch builds cleanly, without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drafts&lt;/code&gt; option.&lt;/li&gt;
  &lt;li&gt;Checkout the &amp;lt;Feat/Bug/Post-Branch&amp;gt; ( the Release Candidate) with Visual Studio Code (VSC).&lt;/li&gt;
  &lt;li&gt;Publish all draft posts that are part of this release.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; to ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; has been built with no drafts and with Disqus enabled.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull rebase -i main&lt;/code&gt; to pull any prior release changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; into the Release Candidate branch. Following the &lt;a href=&quot;bills-blog-pre-release-checklist.md&quot;&gt;Pre-Release Checklist&lt;/a&gt; should ensure that this step has already been done, but redoing this step here ensures that no recent updates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; are missed. If there are no recent updates, this step takes very little time / effort.&lt;/li&gt;
  &lt;li&gt;If there are any recent updates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, then recheck the Release Candidate branch with &lt;a href=&quot;bills-blog-pre-release-checklist.md&quot;&gt;Bill’s Blog Pre-Release Checklist&lt;/a&gt; to ensure the changes didn’t break anything, and restart this release process.&lt;/li&gt;
  &lt;li&gt;Always ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; is run after the final Release Candidate code change is made, so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; is up-to-date.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;final-soft-reset-and-commit-on-the-featbugpost-branch&quot;&gt;Final soft reset and commit on the &amp;lt;Feat/Bug/Post-Branch&amp;gt;&lt;/h2&gt;

&lt;p&gt;The purpose of the soft reset and commit is to clean up the commit messages and make them ready for the ChangeLog, and to cleanup all the changes and eliminate dross in the change list. If the individual commit messages have been well written, the chore of making a good &amp;lt;Feat/Bug/Post-Branch&amp;gt; release commit message shouldn’t be too hard.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty=&quot;format:%b&quot; HEAD...$(git merge-base main $(git rev-parse --abbrev-ref HEAD)) &amp;gt; $env:TEMP/git_message_for_squash.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code $env:TEMP/git_message_for_squash.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Edit the file and create the final commit message for the release.&lt;/li&gt;
  &lt;li&gt;Copy the final commit message into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; and validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog&lt;/code&gt; looks as expected. Stop the local Jekyll server.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --soft $(git merge-base main $(git rev-parse --abbrev-ref HEAD))&lt;/code&gt; to reset the head of the Release Candidate branch to the head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; to add the current state of the Release Candidate branch to the next commit.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;. Title should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEAT Milestone VX.XX.XXX&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BugFix Issue #XX&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post &quot;&amp;lt;ShortTitle&amp;gt;&quot;&lt;/code&gt; Paste the final commit message as the body of the commit. Close the editor.&lt;/li&gt;
  &lt;li&gt;Sync the local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Feat/Bug/Post-Branch&amp;gt;&lt;/code&gt; with the remote.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point the Release Candidate should be complete. If you discover additional issues to be addressed, fix them and then repeat the steps in this section.&lt;/p&gt;

&lt;h3 id=&quot;merge-the-featbugpost-branch-branch-with-the-main-branch&quot;&gt;Merge the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Feat/Bug/Post-Branch&amp;gt;&lt;/code&gt; branch with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/h3&gt;

&lt;p&gt;Many organizations require a pull request to perform a merge. That’s a great idea as soon as your site has any collaborators, but its overkill for a solo developer.  I’ll add instructions and templates for a Pull Request process in a later update to this post. For now just merge the two branches.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge &amp;lt;Feat/Bug/Post-Branch&amp;gt;&lt;/code&gt; to perform the merge. If the &lt;a href=&quot;bills-blog-pre-release-checklist.md&quot;&gt;Bill’s Blog Pre-Release Checklist&lt;/a&gt; was followed, there should be no merge conflicts.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chore Release Work for &amp;lt;Feat/Bug/Post-Branch&amp;gt;&lt;/code&gt; as the commit title&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-a-release-tag&quot;&gt;Add a Release tag&lt;/h3&gt;

&lt;p&gt;Now that the merge has been made, add a Release tag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/X.XX.XXX -m &quot;Third release of Bill&apos;s Blog&quot;&lt;/code&gt; Modify the command as appropriate for the specific release being made&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; (which will list all existing tags) and verify the new tag is there.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final-build-of-production-site&quot;&gt;Final build of production site&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the final production build, including the Release Version in the footer, is correct.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; (these should only be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; changes). Note the commit ID.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -f releases/X.XX.XXX&lt;/code&gt;  should result &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Updated tag &apos;releases/X.XX.XXX&apos; (was c7f1fab)&lt;/code&gt; and the commit number will always be different from this example. This will move the tag forward to the most recent commit.&lt;/li&gt;
  &lt;li&gt;View the tag locally ensure it is present and associated with the correct commit ID (should be the very latest commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --atomic origin main refs/tags/releases/X.XX.XXX&lt;/code&gt; to push both the final commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; the associated release tag to GitHub.&lt;/li&gt;
  &lt;li&gt;Validate that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; Github Action was invoked and ran successfully.  ToDo: reference the instructions back in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... part 01&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the production site is up, with the new features, new published posts, and correct Release Version number.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Written for “Visual Studio Code” with both GitLens and GitGraph plugins&lt;/p&gt;

&lt;p&gt;The VCS SCM tool should not be illuminated with a number.&lt;/p&gt;

&lt;p&gt;Review the commit log. If there are a number of commits in the bugfix branch, squash them together, and edit the comments to be a clean edited description of the changes.&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-branch-for-the-update&quot;&gt;Create a new branch for the update&lt;/h2&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b &amp;lt;Post/Bug/Feat-BranchName&amp;gt;&lt;/code&gt; (or use VSC)&lt;/p&gt;

&lt;p&gt;Review the commit log. If there are a number of commits in the bugfix branch, squash them together, and edit the comments to be a clean edited description of the changes.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;git merge &lt;em&gt;BugFixBranchName&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;sync main with remote&lt;/p&gt;

&lt;p&gt;build locally and validate bug has been fixed.&lt;/p&gt;

&lt;p&gt;git tag -a releases/0.02.001 -m “Bill’s Blog, Fix Issue #9”&lt;/p&gt;

&lt;p&gt;git tag&lt;/p&gt;

&lt;p&gt;$env:JEKYLL_ENV = ‘production’; bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;git tag -f releases/0.02.001  should result &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Updated tag &apos;releases/0.02.001&apos; (was c7f1fab)&lt;/code&gt; and the commit number will always be different from this example.&lt;/p&gt;

&lt;p&gt;commit the _site changes on main&lt;/p&gt;

&lt;p&gt;Switch to the Feature branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForRelease0.03.000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull --rebase&lt;/code&gt; to bring the bugfix patch into the feature development branch.&lt;/p&gt;

&lt;p&gt;sync the feature branch with the remote&lt;/p&gt;

&lt;p&gt;Do the same for any / all other branches being worked.&lt;/p&gt;

&lt;h2 id=&quot;release-post-merge-into-main-and-update-site-version&quot;&gt;Release post, merge into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and update site version.&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Commit the staged and unstaged changes.&lt;/li&gt;
  &lt;li&gt;Follow the &lt;a href=&quot;TBD - anchor in another document?, `..Part 03`&quot;&gt;Site Minor Release checklist&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Correction to pull. Don’t use git pull rebase -i main just use git rebase -i –onto main. If the post branch’s base is still pointing at the same commit as the HEAD of main, there will be a message that there are no commits. Abort the rebase and move on.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;As often as necessary, commit changes, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chore commit Production build&lt;/code&gt; .
  ***Note: if publishing runs over midnight, “nnndays ago” used in multiple places, gets updated, and multiple files may get changed.&lt;/li&gt;
  &lt;li&gt;Squash the post’s branch’s commits, see &lt;a href=&quot;ToDo: link&quot;&gt;Final soft reset and commit on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&amp;lt;insert name&amp;gt;&lt;/code&gt; branch&lt;/a&gt; .&lt;/li&gt;
  &lt;li&gt;Copy the commit message to the top of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; .&lt;/li&gt;
  &lt;li&gt;Rebuild and validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&apos;s&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; the looks correct. Repeat as necessary.&lt;/li&gt;
  &lt;li&gt;final commit using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chore commit Production build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Put the final version of the text for this release’s ChangeLog into the copy buffer.&lt;/li&gt;
  &lt;li&gt;Run git reset –soft $(git merge-base main $(git rev-parse –abbrev-ref HEAD))&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; to stage the cumulative changes.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; .&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;merge-the-postxxx-branch-with-the-main-branch&quot;&gt;Merge the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postXXX&lt;/code&gt; branch with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the Post branch has been rebased on the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.  Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i main&lt;/code&gt; to pull any last-minute changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Post/Bug/Feat-BranchName&amp;gt;&lt;/code&gt; branch. If there are no changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, then there should be just one commit in the commit list, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; is the operation selected for it. Hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start Rebase&lt;/code&gt; (from GitLens Interactive Rebase). You should see the message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Successfully rebased and updated refs/heads/&lt;/code&gt;&amp;lt;Post/Bug/Feat-BranchName&amp;gt;` .&lt;/li&gt;
  &lt;li&gt;Switch to main branch, either with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt;, or using VSC.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge &amp;lt;Post/Bug/Feat-BranchName&amp;gt;&lt;/code&gt; to perform the merge. If the pre-release checklist was followed, there should be no merge conflicts.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chore Release Work for &amp;lt;NextReleaseVersion&amp;gt;&lt;/code&gt; as the commit title.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-a-release-tag-1&quot;&gt;Add a Release tag&lt;/h3&gt;

&lt;p&gt;Now that the merge has been made, add a Release tag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/&amp;lt;NextReleaseVersion&amp;gt; -m &quot;&amp;lt;message appropriate for release&amp;gt;&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final-build-of-production-site-1&quot;&gt;Final build of production site&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the final production build, including the Release Version in the footer, is correct. Stop the local Jekyll server.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; (these should only be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; changes). Note the commit ID.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -fa releases/&amp;lt;NextReleaseVersion&amp;gt;&lt;/code&gt; -m “&lt;message appropriate=&quot;&quot; for=&quot;&quot; release=&quot;&quot;&gt;&quot;. It will open an editor window in VSC, simply close it as we should not need to make any changes to the tag message.&lt;/message&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;View the tag locally ensure it is present and associated with the correct commit ID (should be the very latest commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;If you are correcting a mistake in a prior loop, and have already pushed the tag to the remote, it has to be removed from the remote. In this case, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push origin :refs/tags/releases/&amp;lt;NextReleaseVersion&amp;gt;&lt;/code&gt; to push an empty tag to the remote&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --atomic origin main refs/tags/releases/&amp;lt;NextReleaseVersion&amp;gt;&lt;/code&gt; to push both the final commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; the associated release tag to GitHub.&lt;/li&gt;
  &lt;li&gt;Validate that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; Github Action was invoked and ran successfully.  ToDo: reference the instructions back in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... part 01&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the production site is up, with the new features, new published posts, and correct Release Version number.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;remove-the-postbugfeat-branchname-branch&quot;&gt;Remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Post/Bug/Feat-BranchName&amp;gt;&lt;/code&gt; branch&lt;/h3&gt;

&lt;h4 id=&quot;use-vsc-git&quot;&gt;Use VSC Git&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;Expand the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Branches&lt;/code&gt; window&lt;/li&gt;
  &lt;li&gt;right-click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Post/Bug/Feat-BranchName&amp;gt;&lt;/code&gt; branch to be removed&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delete...&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Chose to delete both the local and the remote tracking branch.&lt;/li&gt;
  &lt;li&gt;Confirm…&lt;/li&gt;
  &lt;li&gt;View the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git Graph&lt;/code&gt; and validate the &amp;lt;Post/Bug/Feat-BranchName&amp;gt;` branch has been removed both locally and remotely. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;use-command-line-git&quot;&gt;Use command line Git&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;ToDo: Add list of CLI git commands&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;rebase-any-feature-or-bug-branches-onto-the-latest-main&quot;&gt;Rebase any Feature or Bug branches onto the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Switch to the &amp;lt;Post/Bug/Feat-BranchName&amp;gt; to be rebased.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-new-branch-for-work-on-new-post&quot;&gt;Create new branch for work on new post&lt;/h2&gt;

&lt;p&gt;Run git checkout -b &lt;NameOfBranchForPost&gt; (or use VSC)&lt;/NameOfBranchForPost&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-the-new-draft-post&quot;&gt;Create the new draft post&lt;/h2&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll draft &quot;Name Of Your Draft&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Edit the draft until you are ready to publish it.&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Release Process" /><category term="Process" /><summary type="html">Detailed steps to finalize a Feature/Bugfix/Post branch, merge it with main, and release a new version of the site.</summary></entry><entry><title type="html">2021 05 07 Hiking Emigration Canyon Miners Trail</title><link href="https://billhertzing.github.io/personal/hiking-emigration-canyon-miners-trail/" rel="alternate" type="text/html" title="2021 05 07 Hiking Emigration Canyon Miners Trail" /><published>2021-05-07T00:00:00-06:00</published><updated>2021-05-07T00:00:00-06:00</updated><id>https://billhertzing.github.io/personal/hiking-emigration-canyon-miners-trail</id><content type="html" xml:base="https://billhertzing.github.io/personal/hiking-emigration-canyon-miners-trail/">&lt;p&gt;Pictures and description of hiking Emigration Canyon Miners Trail near SLC, UT&lt;/p&gt;

&lt;h2 id=&quot;alltrails-link&quot;&gt;AllTrails link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.alltrails.com/explore/recording/activity-may-7-10-45-pm-d3d9446&quot;&gt;AllTrails Recording of the hike&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pictures&quot;&gt;Pictures&lt;/h2&gt;

&lt;figure class=&quot;third &quot;&gt;
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/xhme0p4b9bcd055/alltrails%203d.png?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;alltrails 3d&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/xhme0p4b9bcd055/alltrails%203d.png?raw=1&quot; alt=&quot;alltrails 3d&quot; /&gt;
        &lt;span&gt;alltrails 3d&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/irttipxfqhpf6sk/AllTrailsInfo.png?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;AllTrailsInfo&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/irttipxfqhpf6sk/AllTrailsInfo.png?raw=1&quot; alt=&quot;AllTrailsInfo&quot; /&gt;
        &lt;span&gt;AllTrailsInfo&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/4z10h1qcoj54t4b/Artsy%20water.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Artsy water&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/4z10h1qcoj54t4b/Artsy%20water.jpg?raw=1&quot; alt=&quot;Artsy water&quot; /&gt;
        &lt;span&gt;Artsy water&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/vzho0d3xwcuqg50/Emigration%20Canyon%20view.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Emigration Canyon view&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/vzho0d3xwcuqg50/Emigration%20Canyon%20view.jpg?raw=1&quot; alt=&quot;Emigration Canyon view&quot; /&gt;
        &lt;span&gt;Emigration Canyon view&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/v6cll5bhpaw4x2m/Glacier%20Lilies%20amongst%20scrub%20oak.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Glacier Lilies amongst scrub oak&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/v6cll5bhpaw4x2m/Glacier%20Lilies%20amongst%20scrub%20oak.jpg?raw=1&quot; alt=&quot;Glacier Lilies amongst scrub oak&quot; /&gt;
        &lt;span&gt;Glacier Lilies amongst scrub oak&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/qrafhjpiofiw2l2/Intrepid%20hikers.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Intrepid hikers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/qrafhjpiofiw2l2/Intrepid%20hikers.jpg?raw=1&quot; alt=&quot;Intrepid hikers&quot; /&gt;
        &lt;span&gt;Intrepid hikers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/tn6mb1gihsdx2lu/KM%20on%20the%20trail.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;KM on the trail&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/tn6mb1gihsdx2lu/KM%20on%20the%20trail.jpg?raw=1&quot; alt=&quot;KM on the trail&quot; /&gt;
        &lt;span&gt;KM on the trail&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/uej7stnneg8vgl5/Mountains%20across%20Emigration%20Canyon.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Mountains across Emigration Canyon&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/uej7stnneg8vgl5/Mountains%20across%20Emigration%20Canyon.jpg?raw=1&quot; alt=&quot;Mountains across Emigration Canyon&quot; /&gt;
        &lt;span&gt;Mountains across Emigration Canyon&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/xshldyre3ghrye1/Spring%20runoff.jpg?raw=1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Spring runoff&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/xshldyre3ghrye1/Spring%20runoff.jpg?raw=1&quot; alt=&quot;Spring runoff&quot; /&gt;
        &lt;span&gt;Spring runoff&lt;/span&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;/h2&gt;

&lt;video width=&quot;1024&quot; height=&quot;768&quot; controls=&quot;controls&quot;&gt;
   &lt;source src=&quot;https://www.dropbox.com/s/4ll0ao14mp3xz39/Babbling%20brook.mp4?raw=1&quot; type=&quot;video/mp4&quot; /&gt;
   Your browser does not support embedded videos, however, you can see the video in a new tab [Babbling brrok](https://www.dropbox.com/s/4ll0ao14mp3xz39/Babbling%20brook.mp4?raw=1)
&lt;/video&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Personal" /><category term="AllTrails" /><category term="Hiking" /><summary type="html">Pictures and description of hiking Emigration Canyon Miners Trail near SLC, UT</summary></entry><entry><title type="html">Repository Interrelationships</title><link href="https://billhertzing.github.io/technical/Repository-Interrelationships/" rel="alternate" type="text/html" title="Repository Interrelationships" /><published>2021-05-02T23:17:31-06:00</published><updated>2021-05-02T23:17:31-06:00</updated><id>https://billhertzing.github.io/technical/Repository-Interrelationships</id><content type="html" xml:base="https://billhertzing.github.io/technical/Repository-Interrelationships/">&lt;p&gt;An explanation of how my technical repositories relate to one another.&lt;/p&gt;

&lt;p&gt;– add dot diagram here? use a png to start.&lt;/p&gt;

&lt;p&gt;I am writing a program that will help you make / string together programs that automate some of your ToDos in real life. The program I’m writing runs anywhere .Net Core 3.0 runs, uses a Blazor interface, supports a bare minimum “I’m here” in minimal mode, but can be expanded by the enabling of features and loading of PlugIns. PlugIns are designed to share their public data, methods and events with each other.&lt;/p&gt;

&lt;p&gt;I’m also publishing a series of Demo programs that explain in detail the concepts and constructs used in the AceCommander program. This is ensure I understand, and can explain, what ‘the code I got from goggling the Internet’ is doing when I use it. The Demos are also another way I want to give back and help others understand how the C# language and the .Net  libraries can be used.&lt;/p&gt;

&lt;p&gt;The software in these repositoies are an ongoing effort to collect in a centralized location data structures, algorithms an concepts that I’ve developed or used over the coursse of 45 years of working with computers.&lt;/p&gt;

&lt;p&gt;One repository is called Ace. Ace is my take on the implementation of a digital assistant. Doing a search on GitHub for “Jarvis” (The English accented AI personal assistant to Tony Stark in the Ironman movies) results in hundreds of repositories bearing vriations on that name, and a quick browse through some of them reveals that the desire to code up our won JArvis appeals to many programmers.&lt;/p&gt;

&lt;p&gt;Ace is designed to be availalble on any kind of device. The primary/initial implemenations are on Windows and Linux. The software is designed to be a Windows Service or a Linux Demon. The base implemention provides a simple shell of basic services, and a framework for adding plugins. Most of Ace’s features and capabilities are provided by individual plugins.&lt;/p&gt;

&lt;p&gt;Ace is built on Dot Net components. The framework is primarly DotNet standard (curretnly an V2.1) for the majority of code, since this code will run on both Linux and Windows. The full Windows framework modules (currently DotNet471) is used for the Windows-Service specific portions; DotNetCore is used for the Linux runtime daemon.&lt;/p&gt;

&lt;p&gt;The Windows-Service framework is ServiceStack (currently V5.1). On Windows, this is wrapped by the TopShelf library, which provides features that make it easy to install, uninstall, start, stop, and manage a Windows service.&lt;/p&gt;

&lt;p&gt;Ace non-GUI plugins are microservice providers. Ace GUI plugins provide the human intefaces to thesse microservices.
ServiceStack is the current microservice provider, and static web server.&lt;/p&gt;

&lt;p&gt;Blazor is currently the primary GUI architecture, as it integrate well with both static web servers and with data structure based on .Net components.&lt;/p&gt;

&lt;p&gt;Distribution of Ace is done via NuGet packaages and the Chocolatey pacakge management software.&lt;/p&gt;

&lt;p&gt;Wherever possible, algorithms and data structures used in Ace are re-factored into utility libraries, to promote code reuse as much as possible.  These utility libraries are managed within the ATAP.Utilities repository. There are currently over 30 packages in this reposity. Some are little more than placeholders with only one or two simple fuctions; other utiltiy libraries contain larger numbers of structures and functions.&lt;/p&gt;

&lt;p&gt;Utility libraries are designed so that data structures are packaged in one unit, objects in another, and static functions in a third unit. This allows the data structures to be shared between the GUI code and the microservice code, using serialization mechanisms found in the data structures package.&lt;/p&gt;

&lt;p&gt;The process needed to translate the code found in these repositories into versioned distribution pacakges, and integrting these ditribution packages into the existing world-wide software distribution system, is not trivial. Three of the ATAP.Utility packages are devoted to the Build Tooling code needed to make this happen. In the course of developing thsse BuildTooling pacakages, a number of issues surfaced, and their solutions implemented. You will find in the documentation library a document devoted to explaining how the BuildTooling parts interact with the building (MSBuild.exe invoked via Visual Studio, and invoked via dotnet.exe), testing/verification (UnitTest, IntegrationTest, End-To-End (E2E) test, Appveyor) and distribution (NuGet and Chocolaty) tool suites.&lt;/p&gt;

&lt;h2 id=&quot;atapwebsitesatapconsulting&quot;&gt;ATAP.WebSites.ATAPConsulting&lt;/h2&gt;

&lt;p&gt;Documentation for the old corporate website that never really got off the ground.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;

&lt;h2 id=&quot;third-party-libraries&quot;&gt;Third-Party Libraries&lt;/h2&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;h3 id=&quot;company-icons&quot;&gt;Company Icons&lt;/h3&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;h3 id=&quot;fonts&quot;&gt;Fonts&lt;/h3&gt;

&lt;h2 id=&quot;management-of-sensitive-information-used-for-deployment&quot;&gt;Management of Sensitive information used for deployment&lt;/h2&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;h3 id=&quot;development-environments&quot;&gt;Development Environments&lt;/h3&gt;
&lt;p&gt;Development may be done using any appropriate tool, and any appropriate web server host may be used during development.
Initial documentation will be for development using the Visual Studio 2017 IIDE, along with the integrated IIS Express web server host.&lt;/p&gt;

&lt;h3 id=&quot;deployment-to-development-web-server-hosts&quot;&gt;Deployment to Development Web Server Hosts&lt;/h3&gt;
&lt;p&gt;###&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;h3 id=&quot;testing-tools&quot;&gt;Testing tools&lt;/h3&gt;

&lt;h3 id=&quot;deployment-to-testing-web-server-hosts&quot;&gt;Deployment to Testing Web Server Hosts&lt;/h3&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;

&lt;h3 id=&quot;integration-testing&quot;&gt;Integration Testing&lt;/h3&gt;

&lt;h2 id=&quot;production&quot;&gt;Production&lt;/h2&gt;

&lt;h3 id=&quot;deployment-to-production-web-server-hosts&quot;&gt;Deployment to Production Web Server Hosts&lt;/h3&gt;

&lt;h1 id=&quot;detailed-instructions-for-building-the-atapconsulting-corporate-web-site&quot;&gt;Detailed Instructions for building the ATAPConsulting corporate Web site.&lt;/h1&gt;

&lt;h2 id=&quot;development-1&quot;&gt;Development&lt;/h2&gt;
&lt;p&gt;Instructions for building and testing the web site in development lifecycle stage&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-professional-ide&quot;&gt;Visual Studio Professional IDE&lt;/h3&gt;

&lt;h3 id=&quot;visual-studio-code-community-edition&quot;&gt;Visual Studio Code Community Edition&lt;/h3&gt;

&lt;h3 id=&quot;unit-tests&quot;&gt;Unit Tests&lt;/h3&gt;
&lt;p&gt;Add NuGet Package reference to xUnit
Add NuGet Package refrence to MOQ&lt;/p&gt;

&lt;h2 id=&quot;qatesting&quot;&gt;QA/Testing&lt;/h2&gt;
&lt;p&gt;Instructions for building and testing the web site in QA/Testing lifecycle stage&lt;/p&gt;
&lt;h3 id=&quot;integration-tests&quot;&gt;Integration Tests&lt;/h3&gt;
&lt;p&gt;Add NuGet Package reference to latest Microsoft.AspNetCore.App
Download and install latest .NET Core SDK (2.1 or better) to build and run integration tests
https://www.microsoft.com/net/download&lt;/p&gt;

&lt;h3 id=&quot;automated-continous-integration-ci-tools-used&quot;&gt;Automated Continous Integration (CI) tools used&lt;/h3&gt;

&lt;h2 id=&quot;production-1&quot;&gt;Production&lt;/h2&gt;
&lt;p&gt;Instructions for building and testing the web site in its final, production, lifecycle stage&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Instructions for deploying the production web site to the hosting provider&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;
&lt;p&gt;https://www.dotnetcurry.com/aspnet/1402/aspnet-core-2-new-features
https://www.dotnetcurry.com/aspnet-core/1414/unit-testing-aspnet-core
https://www.dotnetcurry.com/aspnet-core/1420/integration-testing-aspnet-core
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.1&amp;amp;tabs=aspnetcore2x
https://www.dotnetcurry.com/aspnet-core/1433/end-to-end-testing-aspnet-core
http://www.eidias.com/blog/2016/2/14/automated-ui-testing-in-aspnet-mvc5-using-selenium-webdriver&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="AceCommander" /><category term="ATAP.Utilities" /><category term="Blazor" /><category term="StronglyTypedIds" /><category term="BillHertzing Blog" /><summary type="html">An explanation of how my technical repositories relate to one another.</summary></entry><entry><title type="html">Powershell Snippets</title><link href="https://billhertzing.github.io/technical/Powershell-snippets/" rel="alternate" type="text/html" title="Powershell Snippets" /><published>2021-05-02T17:06:21-06:00</published><updated>2021-05-02T17:06:21-06:00</updated><id>https://billhertzing.github.io/technical/Powershell-snippets</id><content type="html" xml:base="https://billhertzing.github.io/technical/Powershell-snippets/">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Get-ChildItem -File -r&lt;/td&gt;
      &lt;td&gt;where {$_.fullname -match “cshtml”}&lt;/td&gt;
      &lt;td&gt;foreach { git mv ($&lt;em&gt;.fullname) ($&lt;/em&gt;.fullname –replace “cshtml”,”razor”) }&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Get-ChildItem -Dir -r&lt;/td&gt;
      &lt;td&gt;where {$_.fullname -match “obj&lt;/td&gt;
      &lt;td&gt;bin”}&lt;/td&gt;
      &lt;td&gt;foreach {$_.fullname}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Powershell" /><summary type="html">Get-ChildItem -File -r where {$_.fullname -match “cshtml”} foreach { git mv ($.fullname) ($.fullname –replace “cshtml”,”razor”) }</summary></entry><entry><title type="html">Introduction To Acecommander</title><link href="https://billhertzing.github.io/technical/Introduction-to-AceCommander/" rel="alternate" type="text/html" title="Introduction To Acecommander" /><published>2021-05-02T17:06:21-06:00</published><updated>2021-05-02T17:06:21-06:00</updated><id>https://billhertzing.github.io/technical/Introduction-to-AceCommander</id><content type="html" xml:base="https://billhertzing.github.io/technical/Introduction-to-AceCommander/">&lt;p&gt;The MySQL a is \called AceCommander, it holds userauth user tables&lt;/p&gt;

&lt;p&gt;Install MySql here:&lt;/p&gt;

&lt;p&gt;the database files need to be under dropbox, so a my.ini file has to be created, and MySQL has to be told to look for it under a dropbox location.
The current location is under &lt;drive&gt;:/DropBox/MySQLData&lt;/drive&gt;&lt;/p&gt;

&lt;p&gt;every developer, qa, and test environment, as well as every production system, needs its own AceCommander database
the my.ini file specifies this as &lt;drive&gt;:/dropbox/MySQL/data&lt;/drive&gt;&lt;/p&gt;

&lt;p&gt;The MySQL database name, user, and user password is in the configuration file, as part of the MySQL connection string.&lt;/p&gt;

&lt;p&gt;Make sure that on the development or QA or production server, that the database exists, and that the specified user has the correct permissions and password set&lt;/p&gt;

&lt;p&gt;LiquiBase is the Open Software tool that is used to keep version-controlled information on the MySL database schema and lookup tables’ data.&lt;/p&gt;

&lt;p&gt;Service stack returns ‘403 - forbidden’ when Blazor GUI makes it’s first call to ServiceStack and asks for all of its DLL files. Have to document the addition of .dll to SS allowed file extensions
Service stack returns ‘403 - forbidden’ when Blazor GUI makes it’s first call to ServiceStack and asks for all of its PDB files. Have to document the addition of .pdb to SS allowed file extensions. PDB files are for debugging&lt;/p&gt;

&lt;p&gt;Also document the V S2019 requirement and the .DotNetCore V3 preview requirement.
Maybe a section on how to upgrade from V0.5.0 to V0.9.0
Document the issue with Blazor.Extensions.logging still being on V.0.7.0, and the conflict it caused, and how Blazor.extensions.Logging had to be ripped out.&lt;/p&gt;

&lt;p&gt;Sentinel startup stuff&lt;/p&gt;

&lt;p&gt;Document how to add SQLServer to a system, minimal, to use with Ace&lt;/p&gt;

&lt;p&gt;For VS 2019:
To automatically close the console when debugging stops, enable Tools-&amp;gt;Options-&amp;gt;Debugging-&amp;gt;Automatically close the console when debugging stops.&lt;/p&gt;

&lt;p&gt;So, now enumerations are a code smell? https://github.com/ardalis/SmartEnum and others&lt;/p&gt;

&lt;p&gt;Installing Telerik UI components for Blazor: Following instructions, it starts with needing to install nuget.exe; that will make the nuget package push work, as well.
Add to the prerequisites part of the doc the need to download and install nuget.exe, and then to put it on the environment path.&lt;/p&gt;

&lt;p&gt;today, that is 32-bit V4.9.4, instal to programfiles(86)/nuget&lt;/p&gt;

&lt;p&gt;The follow Telerik instructions on how to add the telerik private feed to visual studio&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="AceCommander" /><summary type="html">The MySQL a is \called AceCommander, it holds userauth user tables</summary></entry><entry><title type="html">Powershell To Convert Nest Report To Excel Pivot Table</title><link href="https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/" rel="alternate" type="text/html" title="Powershell To Convert Nest Report To Excel Pivot Table" /><published>2021-05-02T17:06:21-06:00</published><updated>2021-05-02T17:06:21-06:00</updated><id>https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table</id><content type="html" xml:base="https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/">&lt;p&gt;A Powershell script to read a Nest history report and dump it into an Excel pivot table.&lt;/p&gt;

&lt;p&gt;Notes for PowerShell SLC meetup
 1) List of cool PowerShell projects folks wold like to work on
 1) signup for one, or more, projects
 1) Pair or team programming work for 1 month and share with meetup group following month
 1) Use GitHub, OSS, MIT license for the 
 1) Some kind of coding collaboration tool? and/or gitter room? or slack channel? that everyone can participate in
 1) Project list
    1) PowerShell in DevOps
	  1) tokenize .razor files
	  1) run a PowerShell scriptblock against all files matching a filename pattern
    1) PowerShell and creating SVG graphs
	  1) Read a source (file (local, remote, or UNC); database;)
	  1) Provide a scriptblock to transform the raw data into a structured hierarchy
	  1) Provide a scriptblock to transform the structured hierarchy into a digraph (a sctructure that describes a graph)
	  1) Provide a set of output providers (write to file (local, remote, UNC); database
	  1) PowerShell option to send the digraph to PlantUML. which can create SVG drawing of the graph 
	1) PowerShell templates
	  1) using Plaster to scaffold a new PowerShell project
	  1) automatically setting up the Pester test runner in a new PowerShell project
	  1) automatically setting up Jenkins to create a CI/CD pipeline for a new PowerShell project&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Powershell" /><category term="Nest" /><category term="RegEx" /><category term="Excel" /><category term="PivotTable" /><summary type="html">A Powershell script to read a Nest history report and dump it into an Excel pivot table.</summary></entry><entry><title type="html">Client Side Blazor Demos</title><link href="https://billhertzing.github.io/technical/Client-side-Blazor-Demos/" rel="alternate" type="text/html" title="Client Side Blazor Demos" /><published>2021-05-02T17:06:21-06:00</published><updated>2021-05-02T17:06:21-06:00</updated><id>https://billhertzing.github.io/technical/Client-side-Blazor-Demos</id><content type="html" xml:base="https://billhertzing.github.io/technical/Client-side-Blazor-Demos/">&lt;p&gt;Until last week, my main app (and my Blazor demos), used ServiceStack middleware hosted in .Net 4.7.1 using the Windows HTTPListener in a Console App. I spent the last week moving the web servers in my demos 06 and 07 to ASP.NET Core Kestrel self-hosted WITHOUT IIS integration. Yesterday and the day before, I got demo06 server working with V3.0P4 SS Middleware in Kestrel WITH IIS intergation, and demo07 working with SS in Kestrel WITHOUT IIS integration.&lt;/p&gt;

&lt;p&gt;Happy to report that one of my demos and my main app have both been upgraded to V3.0 Preview 5. There are (at least one) thing still broken in P5 that were broke in P4;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Issue in Preview 4 &amp;amp; 5  requires the &quot;route&quot; to be a complete URL
var uriBuilder = new UriBuilder(&quot;http://localhost:21200/BaseServicesInitialization&quot;);
InitializationResponse = await HttpClient.PostJsonAsync&amp;lt;InitializationResponse&amp;gt;(uriBuilder.Uri.ToString(),initializationRequest);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But that will make me take the time to figure out how to configure both the host and the port at runtime instead of being lazy and hardcoding them as I’ve done so far…
Lots more testing to go do, now…&lt;/p&gt;

&lt;p&gt;here’s a gist with my program.cs file, and how I eventually got it to work in P5
 https://gist.github.com/BillHertzing/d0a27b2dcdf29ffce1b3f9d1e5413497
 Thats the first public gist I’ve shared, please let me know if you have issues seeing it.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;LaunchSettings.json : only applicable to a ASP.NET Core console host (or service) running a web server&lt;/dt&gt;
  &lt;dd&gt;should not be under any GUI projects&lt;/dd&gt;
  &lt;dd&gt;should be under all Server projects&lt;/dd&gt;
  &lt;dd&gt;should define profiles for the Development, Testing,Staging, Production environments. Testing is a custom environments&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;The “applicationUrl”: “http://localhost:21250/” found in LaunchSettings.json must match the current “ListenOn” that the web server is running, or else it will not launch a browser. In a launchsettings.json Profile, it associates a project’s executable environment with an endpoint the application hosted in the web server will respond on. Together they provide a channel that the developer can use. Visual Studio uses it to determine if it will launch a browser.&lt;/p&gt;

&lt;p&gt;Top level ReadMe&lt;/p&gt;

&lt;h2 id=&quot;demo01&quot;&gt;Demo01&lt;/h2&gt;

&lt;p&gt;Starting with the basics. Introducing the development environment / the development tools. The most basic of the Demos: a GUI and a WebServer; Introducing the Blazor GUI running in/on WASM in the browsers. Introducing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page. Introducing logging in the GUI via Microsoft.Extensions.Logging and the Blazor.Logging.Extensions. Introducing the WebServer; in Demo01, a Framework 4.7 ConsoleApp running a default WebHost over HTTP.Sys. Introducing the ServiceStack Middleware host, using ServiceStack logging and NLog. Introducing Sentinel, a UDP log capture and viewing rool. Explanation of how the WebServer servers the static files that make up the Blazor GUI. Introduction to the basic debugging tools for the GUI and for the WebServer.&lt;/p&gt;

&lt;h2 id=&quot;demo02&quot;&gt;Demo02&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-blazor-basics&quot;&gt;The GUI focuses on Blazor basics,&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a CodeBehind page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor.cs&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page.&lt;/li&gt;
  &lt;li&gt;The GUI adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; to the CodeBehind page and adds its visual display to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page.&lt;/li&gt;
  &lt;li&gt;The GUI adds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor.cs&lt;/code&gt; the visual representation and the c# code to support a button called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI adds an implementation of a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; handler which increments the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Discussions on the transient nature of data in the browser.&lt;/li&gt;
  &lt;li&gt;Styling focuses on the site.css file
    &lt;ul&gt;
      &lt;li&gt;The site.css file adds a background color for the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; page.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-the-integratediisinprocess-webhost&quot;&gt;The Server focuses on the IntegratedIISInProcess WebHost&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to .Net Core V2.1 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how the WebServer serves the static files that make up the Blazor GUI.&lt;/li&gt;
  &lt;li&gt;launchsettings.json is introduced, and contains settings for running /debugging the  IntegratedIISInProcess WebHost.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware is hosted in the IntegratedIISInProcess WebHost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling&quot;&gt;The build / debug tooling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on how the Server is started, both with and without debugging, from Visual Studio and from the CLI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo02-readme&quot;&gt;details for the Demo02 readme&lt;/h3&gt;
&lt;p&gt;The Server moves the SSApp middleware into an IntegratedIISInProcess WebHost running under .Net Core V2.1.
A static method for the creation of an IWebHostBuilder configured to create an IntegratedIISInProcess WebHost is introduced.
Within the static method, the extension method WebHost.CreateDefaultBuilder() is used to return an IWebHost pre-configured with the defaults necessary to run as an IntegratedIISInProcess WebHost.
launchSettings.json refers to IISExpress
The GUI ‘s one page gets a local variable and a button to increment it. Discussions of persistence of data in a browser-hosted GUI. The site.css file is modified to produce a background effect. The Server appears, a .Net Core 2.1 WebHost running all the defaults (IntegratedIISInProcess). This replaces the ConsoleApp of Demo01.  launchsettings.json is introduced, and contains settings for running the  IntegratedIISInProcess WebHost. The Blazor GUI project introduces a button, and the button’s OnClick handler&lt;/p&gt;

&lt;h2 id=&quot;demo03---gui-gets-browser-local-storage-server-moves-to-net-core-v22-and-kestrel-webhost&quot;&gt;Demo03 - GUI gets browser-local storage, Server moves to .Net Core V2.2 and Kestrel WebHost&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-browser-local-storage&quot;&gt;The GUI focuses on browser-local storage&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds the third-party Blazor library &lt;a href=&quot;&quot;&gt;Blazored.LocalStorage&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI uses the synchronous interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blazored.Localstorage&lt;/code&gt; persist the value of the page-local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via that property’s getter and setter.&lt;/li&gt;
  &lt;li&gt;Styling focuses on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.css&lt;/code&gt; file is migrated to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;The background color of  the Body tag is modified.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-the-kestrel-webhost&quot;&gt;The Server focuses on the Kestrel WebHost&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to .Net Core V2.2 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds a static method for the creation of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IWebHostBuilder&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;launchsettings.json adds a section to support launching the Kestrel-based Server.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware is hosted in the Kestrel WebHost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on-adding-support-for-sccs-files&quot;&gt;The build / debug tooling focuses on adding support for .sccs files&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Visual Studio build tooling adds the VSIX extension &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebCompiler&quot;&gt;Web Compiler&lt;/a&gt;. Visual Studio is configured to compile any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sccs&lt;/code&gt; file into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.css&lt;/code&gt; file and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.min.css&lt;/code&gt; file, both of which are copied to the GUI’s ContentRoot folder during build / publish..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo03-readme&quot;&gt;details for the Demo03 readme&lt;/h3&gt;
&lt;p&gt;A site.sccs file, and tools to compile the site.sccs file to the site.css file, are introduced.
The server project targets Net Core V2.2. A KestrelAlone WebHost is introduced.
The site-wide site.sccs file is added to the wwwroot/css directory. The contents of the current site.css is copied into the new site.scss file for the GUI.
The GUI references the third-party Blazor library Blazored.LocalStorage.
The synchronous interface to Blazored.Localstorage is used to persist the page-local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via that property’s getter and setter.
The server moves the SSApp middleware into a KestreAlone WebHost running under .Net Core V2.2.
A static method for the creation of an IWebHostBuilder configured to create a KestreAlone WebHost is introduced.
Within the static method,  a new WebHost is configured with no defaults by new()ing an instance of the WebHostBuilder class then applying the extension method .AddKestrel() and others.
 launchsettings.json are expanded to include settings for KestrelOnly
The GUI’s local variable takes on persistence in browser-local storage using &lt;a href=&quot;&quot;&gt;Blazored.LocalStorage&lt;/a&gt; by &lt;a href=&quot;&quot;&gt;Chris Sainty&lt;/a&gt;.  Mads Kristensen  Web Compiler is installed to Visual Studio, the wwwroot/site.css is migrated to site.scss, and the build tools extended to process .scss files. The Server targets .Net Core 2.2. The WebHost in this Demo is Kestrel (alone).  launchsettings.json are expanded to include settings for KestrelOnly&lt;/p&gt;

&lt;h2 id=&quot;demo04---gui-adds-visual-attributes-and-async-event-handlers--server-get-environment-variables-and-a-selectable-webhost&quot;&gt;Demo04 - GUI adds visual attributes and async event handlers,  Server get Environment Variables and a selectable WebHost&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI gets some big changes. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; is placed within a text span &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpan&lt;/code&gt; for styling with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt; page-local property. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt; adds three page-local properties for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;. The button’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; event handler binding becomes async and indirect. The GUI now has two possible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; event handler methods, one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Active&lt;/code&gt; an one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;, with ‘Active’ being the initial handler for the button.&lt;/li&gt;
  &lt;li&gt;Clicking the button, when Active, adds visual modifications to the button and to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt;, changes the event handler to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;, increments the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via a simulated async operation with a 4 second delay before returning, and then again changes the visual attributes and the event handler of the button back to ‘Active’.&lt;/li&gt;
  &lt;li&gt;Discussions on how async event handlers interact with async Tasks and TaskContinuations.&lt;/li&gt;
  &lt;li&gt;Styling focuses on variables in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.
    &lt;ul&gt;
      &lt;li&gt;The .sccs file adds ….&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-environment-variables-remains-on-net-core-v22&quot;&gt;The Server focuses on Environment Variables, remains on .Net Core V2.2&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Server adds the ability to allow the developer to select either of the two web server hosts, KestrelAlone or IISIntegratedInProcess, to be used when starting the project’s executable.&lt;/li&gt;
  &lt;li&gt;Discussions on Environment variables&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; adds Environment Variables, and uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlazorDemos_WebHostBuilder&lt;/code&gt; to select which WebHost to build.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-&quot;&gt;The build / debug tooling …&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Examples of selecting the WebHost for debugging sessions started from either Visual Studio or the CLI are discussed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo04-readme&quot;&gt;details for the Demo04 readme&lt;/h3&gt;
&lt;p&gt;Discussions on async event handlers in the context of the UI thread. Making all of the StateChangeEventHandlers into async Action&lt;task&gt; signatures makes it possible to store them en-group in the State object. They can be lambdas, or they can refer to methods belonging to the CodeBehind classes / file. They can be retrieved from the IEnumerable&amp;lt;Func&lt;Task&gt;&amp;gt; collection with a LINQ query.  Launchsettings.json are introduced to allow the developer to select either of the two static WebHostBuilders when starting a debugging session.
New in this Demonstration are&lt;/Task&gt;&lt;/task&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;a second entry in the launchSettings.json Profiles list&lt;/li&gt;
  &lt;li&gt;environment variables introduced into the individual entries of the launchSettings.json Profiles list&lt;/li&gt;
  &lt;li&gt;How to read environment variables before the web host is created so that the program can decide what kind of a web host to create&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;demo05---gui-gets-a-timer-and-state-server-gets-net-core-v30-environment-and-environment-aware-features&quot;&gt;Demo05 - GUI gets a Timer, and State, Server gets .Net Core V3.0, Environment and environment-aware features.&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-1&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on various GUI State approaches&lt;/li&gt;
  &lt;li&gt;The GUI adds a State class to reduce the repetitive boilerplate needed for c# property representation of visual and action attributes of the HTML page / elements.&lt;/li&gt;
  &lt;li&gt;The GUI adds a new DI-injected State object and its methods is used to store the Action&lt;Task&gt; methods for the statechange handlers, along with a LINQ-based query to retrieve the correct `MethodToUse`.&lt;/Task&gt;&lt;/li&gt;
  &lt;li&gt;The GUI adds a timer, an animated gif file to represent the timer, and two event handlers for the timer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expired&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI Timer Expired statetransition handler does nothing to any properties bound to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt;. The  Expired state program does change the style of the timer gif for a timed delay of 0.5 seconds using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Delay(500)&lt;/code&gt; then changes it back and resets and restarts the timer.&lt;/li&gt;
  &lt;li&gt;The GUI starts using string constants for the class, style, and text properties for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt; and for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt; button’s visual attributes (for both Active and queuing visual effects).&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-net-core-v30-the-generichost-and-environment&quot;&gt;The Server focuses on .Net Core V3.0., the GenericHost, and environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on the .Net Core V3.0 GenericHost and hosting a WebHost within the GenericcHost&lt;/li&gt;
  &lt;li&gt;References to .Net Core V3.0 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;Discussion on the concept of Environment (Production, Staging, Debug, etc) and the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; environment variable. Discussion on localization of this environment variable, and how to select which WebHost to build/run/use based on the value of this environment variable.&lt;/li&gt;
  &lt;li&gt;The Server adds error pages based on environment, along with ‘Development-environment-only’ features.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; grows to support four runtime choices consisting of two Environment choices and two WebHost choices.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds&quot;&gt;The build / debug tooling adds&lt;/h3&gt;

&lt;h3 id=&quot;details-for-the-demo05-readme&quot;&gt;details for the Demo05 readme&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Note that having both a button OnClick Active event handler and the TimerExpired Active event handler both “active”, means that the program is multiplexing those two statechange inputs. The program  can be in the midst of responding to one, when the other occurs, which can lead to synchronicity issues. In Demo05, the program is written so that there is no interaction between the two active statechange handlers, hence no need (yet) to synchronize access to state variables from the two statechange handlers. Also note that having an animated gif in the visual display can provide a clue if the main browser UI thread is blocked.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo06---gui-timer-enhancements-enumerations-supportedwebhosts-and-either-kestral-and-integratediisinprocess-in-the-server&quot;&gt;Demo06 - GUI Timer enhancements, Enumerations, SupportedWebHosts, and either Kestral and IntegratedIISInProcess in the Server&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-2&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a button to start/stop the timer, a CSS animation to represent the timer enabled boolean, and event handlers for the button&lt;/li&gt;
  &lt;li&gt;State&lt;/li&gt;
  &lt;li&gt;Styling focuses on CSS Animations and .sccs include files
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds styles for the TimerControl button,&lt;/li&gt;
      &lt;li&gt;The GUI project adds a new .&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sccs&lt;/code&gt; file fragment suitable for including into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;The new `.sccs. file fragment contains a CSS Animation&lt;/li&gt;
      &lt;li&gt;animations is triggered visible-running / invisible-disabled by the expiration of the Timer trigger.&lt;/li&gt;
      &lt;li&gt;Further styling via String.Constants to make the elements visually explanatory as the demo is run through its visual states.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-a-single-static-builder-for-the-generichost-which-incorporates-different-webhostbuilder-configurations-based-on-a-parameter-to-the-method-the-multiple-static-builders-are-removed&quot;&gt;The Server focuses on a single static builder for the GenericHost, which incorporates different webHostBuilder configurations based on a parameter to the method. The multiple static builders are removed.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds an enumeration for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SupportedWebHostBuilders&lt;/code&gt; and validates/parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlazorDemos_WebHostBuilder&lt;/code&gt; environment variable against this enumeration.&lt;/li&gt;
  &lt;li&gt;The Server merges the two static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IWebHostBuilders&lt;/code&gt; into a single parameterized static builder method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSpecificHostBuilder(SupportedWebHostBuilders webHostBuilderToBuild)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A new compilation unit is introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerations.cs&lt;/code&gt;. The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; is made into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial&lt;/code&gt; class, and the new Enumerations.cs also contains a declaration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial Program&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-1&quot;&gt;The build / debug tooling&lt;/h3&gt;

&lt;h1 id=&quot;cut-line-for-version-150&quot;&gt;Cut Line for version 1.5.0&lt;/h1&gt;
&lt;h3 id=&quot;demos-below-this-line-are-still-under-active-development-in-the-various-features-branches-and-the-develop-branch-and-in-the-last-few-cases-the-demo-is-still-completely-tbd&quot;&gt;Demos below this line are still under active development in the various features Branches and the develop branch, and in the last few cases the demo is still completely TBD.&lt;/h3&gt;

&lt;h2 id=&quot;demo07---configuration-part1&quot;&gt;Demo07 - Configuration (Part1)&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-configuration-tbd-when-csb-supports-extensionsconfiguration&quot;&gt;The GUI focuses on Configuration (TBD when CSB supports Extensions.Configuration)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a new compilation unit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultConfiguration.cs&lt;/code&gt;, which contains the minimal configKeys needed to run the GUI in production&lt;/li&gt;
  &lt;li&gt;A discussion on concurrency if two or more event handlers try to access the same state variable(s)&lt;/li&gt;
  &lt;li&gt;State element properties for data and visual attributes get their setters hooked to NotifyPropertyChange-like and NotifyPropertyChanging-like events&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-creating-a-configurationroot-and-the-microsoftextensionsconfiguration-class&quot;&gt;The Server focuses on creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configurationRoot&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on the concept of Configuration (ConfigurationBuilder, Configuration Providers, and a ConfigurationRoot) is introduce&lt;/li&gt;
  &lt;li&gt;References to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds a new compilation unit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultConfiguration.cs&lt;/code&gt;, which contains the minimal configKeys needed to run the program in production For Demo07 and future, that minimum includes at least the list of URL(s) to ListenTo.&lt;/li&gt;
  &lt;li&gt;The Server adds an initial hostConfigurationRoot created from InMemory, File, and EnvironmentVariable providers.&lt;/li&gt;
  &lt;li&gt;WebHostToBuild and Environment strings from the ConfigurationRoot are validated. If not present, defaults are provided and added to the ConfigurationRoot.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; adds environment variable for the list of URLs that the Server is expected to ListenOn.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--1&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h3 id=&quot;details-for-the-demo07-readme&quot;&gt;details for the Demo07 readme&lt;/h3&gt;
&lt;p&gt;The static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHostBuilder&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateGenericHostBuilder()&lt;/code&gt; grows an additional parameter of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigurationRoot&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostConfigurationRoot&lt;/code&gt; is passed to the method
The Environment value retrieved from the hostConfigurationRoot is used to conditionally apply the Development-only configuration options.
The Development-only configuration options are moved into the static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateGenericHostBuilder()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;demo08---async-tasks-and-waitany-in-the-gui-configuration-part2-in-the-server&quot;&gt;Demo08 - Async Tasks and WaitAny in the GUI, Configuration (Part2) in the Server&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-visual-representation-of-a-simple-async-tasks&quot;&gt;The GUI focuses on visual representation of a simple async task’s&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;lifecycle: initialization, quiescent, dispatch, awaiting, synchronization, task continuation, completion .&lt;/li&gt;
  &lt;li&gt;The GUI adds an async method that returns a Task, a button that dispatches it, and  visual badge for the task’s status and results.&lt;/li&gt;
  &lt;li&gt;Notation and relationships of state triggers, as exemplified by buttons, timers, and tasks, are abstracted as a Linq query.&lt;/li&gt;
  &lt;li&gt;The browser-local storage properties involved with State get a concurrency flag.&lt;/li&gt;
  &lt;li&gt;Additional expansion of Configuration if warrented after Blazor supports it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-project-focuses-on-adding-detailed-environment-specific-configuration-settings&quot;&gt;The Server project focuses on adding &lt;em&gt;Detailed environment-specific configuration settings&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; to including the concept of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; (Production, Development, Testing, etc.) driving the contents of the ConfigurationRoot&lt;/li&gt;
  &lt;li&gt;The static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHostBuilder&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSpecificGenericHostBuilder()&lt;/code&gt; adds AppConfiguration based on a chain of Configuration providers.&lt;/li&gt;
  &lt;li&gt;The AppConfiguration includes
    &lt;ol&gt;
      &lt;li&gt;CommandLine Arguments&lt;/li&gt;
      &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
      &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
      &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
      &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; …&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--2&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;demo09---logging-in-the-server-and-synchronicity-in-the-gui&quot;&gt;Demo09 - Logging in the Server and synchronicity in the GUI&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-logging-tbd-when-csb-supports-extensionslogging-beyond-just-the-console-logger&quot;&gt;The GUI focuses on logging (TBD when CSB supports Extensions.Logging beyond just the Console Logger)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on how to accomplish Logging from a browser, that is browser-independent and platform-independent.&lt;/li&gt;
  &lt;li&gt;(TBD) The GUI adds Serilog as a logging provider for the CSB GUI application, which writes to the DebugConsole sink, whihc, when run under IISINtegrated, will write-back to the Visual Studio Debug output console&lt;/li&gt;
  &lt;li&gt;The statechange methods for the Timer and for the asynch task are modified so they also increment the IntegerProperty.&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The .sccs file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-microsoftextensionslogging-using-serilog-as-the-logging-extension&quot;&gt;The Server focuses on Microsoft.Extensions.Logging using Serilog as the logging extension&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to Serilog are added, and references to NLog and ServiceStack logging are removed.&lt;/li&gt;
  &lt;li&gt;Log statements that used string expansion are replaced with SeriLog structured logging&lt;/li&gt;
  &lt;li&gt;Discussions on how to add / reference SeriLog as a MEL logger, how to configure logging in a ConfigurationRoot, and how to view logging in a stream database (SEQ).&lt;/li&gt;
  &lt;li&gt;launchsettings.json ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds-seq-for-log-collection-and-viewing-along-with-a-discussion-on-how-to-use-it-with-these-demos&quot;&gt;The build / debug tooling adds SEQ for log collection and viewing ,along with a discussion on how to use it with these Demos.&lt;/h3&gt;
&lt;p&gt;An external tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; is added to provide centralized log collection and viewing. Log messages are ingested as HTTP messages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; on the default port 5341
&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;p&gt;This demo focuses on Logging
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceStack.Logging&lt;/code&gt; dependency and using is removed from all compilation units (source .cs files)
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging&lt;/code&gt; NuGet Package dependency is added to the project
Serilog dependencies (NuGet Packages) are added to the project: (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serilog, Serilog.AspNetCore, Serilog.Enrichers.Thread,S erilog.Exceptions, Serilog.Settings.Configuration, Serilog.Sinks.Console, Serilog.Sinks.Debug, Serilog.Sinks.File, Serilog.Sinks.Seq, SerilogAnalyzer&lt;/code&gt;)
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.development.json&lt;/code&gt; files grow an extensive logging sections for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging&lt;/code&gt; and for Serilog
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; (production) configures Serilog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; writer. The Serilog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogContext&lt;/code&gt; is enriched with the current threadID, and an additional property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt; having the value ‘Demo09”
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; (Development) configures Serilog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; writer, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Console&lt;/code&gt; writer, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DebugOutput&lt;/code&gt; writer. 
The Serilog static Log object is initialized with the Serilog configuration read from the ConfigurationRoot
The static method CreateGenericHost adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serilog.AspNetCore&lt;/code&gt; logging to the genericHost’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigureWebHostDefaults&lt;/code&gt; builder extension and to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ConfigureLogging&lt;/code&gt; builder extension via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.UseSerilog()&lt;/code&gt;
The NLog.config and NLog.xsd files are removed. 
The Serilog Analyzer, installed via NuGet, will provide IntelliSense for the Serilog Log methods.
logging statements throughout the code are replaced with SeriLog structured  logging statements 
The Log statements that used String expansion are replaced with SeriLog structured logging messages. The Analyzer provides a suggested replacement, so this step is just a “replace all occurrences” in the project
&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;

&lt;h2 id=&quot;demo10---server-tracing-and-profiling-via-event-tracing-for-windows-etw-gui-simple-task&quot;&gt;Demo10 - Server: Tracing and Profiling via Event Tracing for Windows (ETW), GUI: simple Task&lt;/h2&gt;
&lt;p&gt;This is the specific documentation for Demo10, &lt;em&gt;Adding Event Tracing for Windows (ETW)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-gui-focuses-on-3&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds
        &lt;h3 id=&quot;the-server-focuses-ontracing-and-profiling-via-event-tracing-for-windows-etw&quot;&gt;The Server focuses onTracing and Profiling via Event Tracing for Windows (ETW)&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The server adds the ability to log method boundaries in the ETW tracing window (not getters or setters yet)
    &lt;ul&gt;
      &lt;li&gt;A managed ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt; is added.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; class has one static Property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log&lt;/code&gt;, which holds an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; class.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; has one method, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Information&lt;/code&gt;, which writes to the ETW subsystem via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics.Tracing&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A number of external tools useful for collecting, viewing, and analyzing ETW events are discussed in the documentation, along with links to further information
    &lt;ol&gt;
      &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
      &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs&lt;/li&gt;
      &lt;li&gt;ToDo: –WPA, Windows Performance Analyzer–&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo11---ilweaving-using-fody&quot;&gt;Demo11 - ILWeaving using Fody&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-4&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-adding-fody-for-ilweaving-and-the-methodaspectboundry-weaver-addin-for-fody&quot;&gt;The Server focuses on adding Fody for ILWeaving, and the MethodAspectBoundry weaver AddIn for Fody&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on what ILWeaving is, and using Fody to accomplish it&lt;/li&gt;
  &lt;li&gt;Discussions on&lt;/li&gt;
  &lt;li&gt;References to MethodAspectBoundry.Fody are added to the .csproj&lt;/li&gt;
  &lt;li&gt;A new Attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETWLogAttribute&lt;/code&gt; is defined, added to almost every class, and all method entry and exit logging statements are removed.&lt;/li&gt;
  &lt;li&gt;The Server uses the MethodAspectBoundry Weaver to add ETW logging for every method in a class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds-ilweaving-package&quot;&gt;The build / debug tooling adds ILWeaving package&lt;/h3&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Blazor GUI project …
Todo: The server project focuses on the details of ILWeaving using Fody to provide ETW logging of method entry and exit, including getters and setters. MethodBoundryAspect Fody Plugin also logs exceptions to ETW automagically.
ToDo: look some of that, and move to the next demo.The server project focuses on the details of installing the server project as a Windows service, and partially automating that process.
The Common DTOs ..&lt;/p&gt;

&lt;h2 id=&quot;demo12---publishing-both-the--gui-and-the-server-into-a-windows-service&quot;&gt;Demo12 - Publishing both the  GUI and the Server into a Windows Service&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-getting-the-new-publishedservicepubxml-file-setup-properly&quot;&gt;The GUI focuses on getting the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishedService.pubxml&lt;/code&gt; file setup properly.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds the ability to publish to a specific folder within the &lt;em&gt;_PublishedAgent\PublishedService&lt;/em&gt; subdirectory tree using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishedService.pubxml&lt;/code&gt; publishing option&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-creating-the-basic-windows-service-additions-then-hosting-the-servicestack-middleware-in-a-kestrel-only-webhost-inside-a-generichost-under-net-core-v30-and-running-it-as-a-service&quot;&gt;The Server focuses on creating the basic windows service additions, then hosting the ServiceStack middleware in a Kestrel-only webHost inside a GenericHost under Net Core V3.0 and running it as a Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;Discussion on the differences between a ConsoleApp and a Service&lt;/li&gt;
  &lt;li&gt;Discussion on concepts from the Runtime, to determine if the program is running under Windows or Linux&lt;/li&gt;
  &lt;li&gt;The Server adds a key runtime variable  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsConsoleApp&lt;/code&gt; to determine if the program is running under Windows or Linux&lt;/li&gt;
  &lt;li&gt;The Server adds switchMappings ConfigurationRoot to detect -C or -Console as a command-line switch&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on-the-windows-scexe-utility&quot;&gt;The build / debug tooling focuses on the Windows sc.exe utility&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt; for manually installing and uninstalling the genericHost as a Windows Service are documented&lt;/li&gt;
  &lt;li&gt;Discussion on how to setup VisualStudio and the CLI to ‘Publish’ the Server to a specified location, which can be referenced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;publishing-steps&quot;&gt;Publishing Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Demo12 adds a new section to the ReadMe for documenting what changes get made in the publishing process.&lt;/li&gt;
  &lt;li&gt;The initial section describes the manual steps for creating / publishings, installing, and running the server as a service, how to uninstall it, and the run edit compile cycle for developing the service..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo-13---tbd-automating-publishing&quot;&gt;Demo 13 - (TBD) Automating Publishing&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-5&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on&quot;&gt;The build / debug tooling focuses on&lt;/h3&gt;
&lt;p&gt;a discussion of the InstallUti;l&lt;/p&gt;

&lt;p&gt;You will need to install a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.Net Core Global Tool&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installUtil&lt;/code&gt;. From a VS 2019 command prompt, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet tool install -g --framework netcoreapp3.0 --version 1.2.0 InstallUtil&lt;/code&gt;. Of course check that this is still the latest version and adjust the instructions accordingly, if a later version exists.&lt;/p&gt;

&lt;h3 id=&quot;publishing-steps-1&quot;&gt;Publishing Steps&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;focuses on automating the publishing process, and provides a PowerShell script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishingAutomation.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo14---tbd-publishing-both-the-gui-and-the-server-to-windows-subsystem-for-linux-as-a-daemon&quot;&gt;Demo14 - (TBD) Publishing both the GUI and the Server to Windows Subsystem for Linux as a Daemon&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-6&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--3&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-2&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo15---tbd-publishing-both-the-gui-and-the-server-to-linux-kernals&quot;&gt;Demo15 - (TBD) Publishing both the GUI and the Server to Linux kernals&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-7&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-1&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--4&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-3&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo16---gui-and-server-open-communications&quot;&gt;Demo16 - GUI and Server open communications&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-8&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-2&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--5&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-4&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo17---gui-and-server-plugins&quot;&gt;Demo17 - GUI and Server PlugIns&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-an-implementation-of-additional-pages-defined-in-configuration-and-loaded-at-runtime&quot;&gt;The GUI focuses on an implementation of additional pages defined in Configuration and loaded at runtime&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-an-implementation-of-additional-services-via-the-ss-plugin-structures&quot;&gt;The Server focuses on an implementation of additional services via the SS Plugin structures&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--6&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-5&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;p&gt;—- Cut Line —-
Rough notes below, to be integrated&lt;/p&gt;

&lt;p&gt;ToDo: InstallUtil? Registering messages with Windows Application EventLog?
Details in &lt;a href=&quot;Server/ReadMe.html&quot;&gt;Demo12 Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo13 - The GUI focuses on …. The GUI adds …. Discussions on …. The .sccs file adds …. The build tooling adds… The Server focuses on …. References to …. are added…. Discussions on …. launchsettings.json …. The ServiceStack middleware adds …. The CommonDTOs adds …&lt;/p&gt;

&lt;p&gt;The AppConfiguration includes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CommandLine Arguments&lt;/li&gt;
  &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
  &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
  &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
  &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;
The AppConfiguration includes
AppConfiguration 
CommandLine Arguments
Environment variables, filtered by a prefix
Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost
compiled-in defaults for the Environment
event handlers
How to branch the flow of execution based on Environment, and how to name the settings files.
logging statements
ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;
System.Diagnostics.Tracing
The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
  &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs
ETWLogAttribute
[ETWLogAttribute]
logging messages for method entry and exit throughout the Server classes are
Blazored.LocalStorage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Blazor GUI site.scss file uses variables to define the &amp;lt;body&amp;gt; tags background style / color.&lt;/p&gt;

&lt;p&gt;Blazor.Logging.Extensions&lt;/p&gt;

&lt;p&gt;Logging  in the GUI via Microsoft.Extensions.Logging, and Blazor.Logging.Extensions&lt;/p&gt;

&lt;p&gt;Blazored.LocalStorage&lt;/p&gt;

&lt;p&gt;Blazored.LocalStorage&lt;/p&gt;

&lt;p&gt;The Server adds Environment variables, and uses one to select which WebHost to build/run/use.  launchsettings.json grows Environment variables.
Environment Variables and LaunchSettings.json grow to add Environment
.Net Core 2.2
The .sccs file adds styles for AnIntegerProperty, and IncrementAnIntegerPropertyButton (for both Active and queuing visual effects)
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers for the button and for the timer itself
The .sccs file adds styles for AnIntegerProperty, and IncrementAnIntegerPropertyButton (for both Active and queuing visual effects).
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers and state transitions for the button and for the timer itself.
The Server adds Environment variables, and uses one to select which WebHost to build/run/use.  launchsettings.json grows Environment variables. The Server targets  .Net Core 3.0 and will remain so for the rest of the demos (Currently Preview6)
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers and state transitions for the button and for the timer itself.&lt;br /&gt;
Demo06  -  The GUI adds a second integer property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnotherIntegerProperty&lt;/code&gt;, a  button to increment it, and a fourth button that will increment both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerProperties&lt;/code&gt;.   Further styling to make the elements visually explanatory as the demo is run through its visual states. Our browser-local storage properties involved with State get their setters hooked. A discussion on concurrency if two or more substates try to access the same state variable
 The Server adds the concept of Environment (Production, Staging, Debug, etc). Discussion on localization of these values, and uses one to select which WebHost to build/run/use.  Environment Variables and launchSettings.json grow to add Environment.
Demo06  -  The GUI adds a second integer property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnotherIntegerProperty&lt;/code&gt;, a  button to increment it, and a fourth button that will increment both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerProperties&lt;/code&gt;.   Further styling to make the elements visually explanatory as the demo is run through its visual states. Our browser-local storage properties involved with State get their setters hooked. A discussion on concurrency if two or more substates try to access the same state variable.   The Server adds the concept of Environment (Production, Staging, Debug, etc). Discussion on localization of these values, and uses one to select which WebHost to build/run/use.  Environment Variables and launchSettings.json grow to add Environment. 
focuses on a single static builder for the GenericHost, which incorporates different webHostBuilder configurations based on a parameter to the method. The multiple static builders are removed.
A new enumeration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SupportedWebHostBuilders&lt;/code&gt;is introduced,
Demo07  -  The GUI adds an async method that returns a Task, a button that dispatches it, and  visual badge for the task’s status and results. Notation and relationships of state triggers, as exemplified by buttons, timers, and tasks, are abstracted as a Linq query.     Our browser-local storage properties involved with State get a concurrency flag. A discussion on concurrency if two or more substates try to access the same state variable.   The Server focuses on a single static builder for the 3.0 GenericHost, which incorporates different WebHostBuilder configurations based on a parameter to the method. The multiple static builders are removed. A new enumeration SupportedWebHostBuildersis introduced, and corresponding environment variable and launchsettings.json entries
Demo07  -  The GUI adds an 
Demo07  -  The GUI adds
The AppConfiguration includes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CommandLine Arguments&lt;/li&gt;
  &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
  &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
  &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
  &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;
The AppConfiguration includes
AppConfiguration 
CommandLine Arguments
Environment variables, filtered by a prefix
How to branch the flow of execution based on Environment, and how to name the settings files.
Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost
compiled-in defaults for the Environment
event handlers
How to branch the flow of execution based on Environment, and how to name the settings files.
This demo focuses on Logging
Server adds Microsoft.Extensions.Configuration
genericHostSettings.json
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.development.json&lt;/code&gt; files grow an extensive logging section
logging statements
ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;
System.Diagnostics.Tracing
The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
  &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs
ETWLogAttribute
[ETWLogAttribute]
logging messages for method entry and exit throughout the Server classes are
Blazored.LocalStorage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TEMPLATE:&lt;/p&gt;

&lt;h2 id=&quot;demoxx---xxx&quot;&gt;DemoXX - XXX&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-9&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-3&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--7&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;hr /&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Blazor" /><category term="Demos" /><summary type="html">Until last week, my main app (and my Blazor demos), used ServiceStack middleware hosted in .Net 4.7.1 using the Windows HTTPListener in a Console App. I spent the last week moving the web servers in my demos 06 and 07 to ASP.NET Core Kestrel self-hosted WITHOUT IIS integration. Yesterday and the day before, I got demo06 server working with V3.0P4 SS Middleware in Kestrel WITH IIS intergation, and demo07 working with SS in Kestrel WITHOUT IIS integration.</summary></entry><entry><title type="html">Adventures In Voice Dictation And Commands For A Developer</title><link href="https://billhertzing.github.io/technical/Adventures-in-Voice-Dictation-and-Commands-for-a-Developer/" rel="alternate" type="text/html" title="Adventures In Voice Dictation And Commands For A Developer" /><published>2021-05-02T17:06:21-06:00</published><updated>2021-05-02T17:06:21-06:00</updated><id>https://billhertzing.github.io/technical/Adventures-in-Voice-Dictation-and-Commands-for-a-Developer</id><content type="html" xml:base="https://billhertzing.github.io/technical/Adventures-in-Voice-Dictation-and-Commands-for-a-Developer/">&lt;p&gt;Voice dictation is the subject of my second blog post.&lt;/p&gt;

&lt;p&gt;Specifically, can I switch between dictation mode and programming mode&lt;/p&gt;

&lt;p&gt;As I am dictating this into a new voice dictation software package, I have learned just how hard it is to create content on the fly, in complete sentences.&lt;/p&gt;

&lt;p&gt;I did an Internet search on the subject of voice commands to/for Visual Studio code. Aside from the usual dross from the big companies, the articles that seemed remotely interesting, all seen to involve one or more third-party packages.&lt;/p&gt;

&lt;p&gt;All of the articles suggested that the initial steps are to set up microphone, workspace, and to install a voice recognition app.&lt;/p&gt;

&lt;p&gt;I am familiar with voice recognition on Google, and I have tried Microsoft’s Windows built in product.&lt;/p&gt;

&lt;p&gt;A few years ago I bought a copy of the commercial version of DragonDictate. I never installed it . But I decided to give it a try today.  The DragonDictate has been bought by Nuance. Looking at their website, there are two newer versions of the software. Not sure I want to spend money on this yet, although one of the Internet article did reference using DragonDictate. Unfortunately the article indicated that the professional version does a much better job. Unfortunately, because it costs significantly more money, and as a retiree, I haven’t got any to spare. :-)&lt;/p&gt;

&lt;p&gt;Pretty much right out of the box I am dictating all of this into a DragonDictate text control which easily pastes into the notepad++ text editor I’m using.&lt;/p&gt;

&lt;p&gt;It has taken me about 10 minutes to dictate all of this, learning as I go. The biggest issue is it doesn’t seem to recognize the first couple of words when I start a sentence, so I have to go back to The beginning and enter those words. As happened here, note the capital T prior. I started dictating at “I have to ggo back…”.&lt;/p&gt;

&lt;p&gt;The next step is to see if it will be possible to give commands to the text editor.&lt;/p&gt;

&lt;p&gt;Instead, went down a rabbit hole. Found a forum where people discuss using DragonDictate to control third-party apps. In the forum, I found a few nuggets from people who were, in 2016, using DragonDictate and Visual Studio. What I did see in code examples was that a variation of Basic is being used customized DragonDictate.&lt;/p&gt;

&lt;p&gt;My programming language preferences are C# and PowerShell. Realizing that I would have to write significant Visual Basic code, I have decided that DragonDictate is probably not the voice dictation recognition software that I’m looking to pursue.&lt;/p&gt;

&lt;p&gt;So it’s back to the drawing board! I’ll try to write sooner next time.&lt;/p&gt;

&lt;p&gt;Combining Voice dictation and code editing is the subject of my third blog post.&lt;/p&gt;

&lt;p&gt;(Ed. First paragraph is typed) I was going to try and dictate as I coded, but upon opening my environment, I realized it was time for a housecleaning. I spent a few hours prior to dictating closing out my MAPs subscription cleaning out old SDK versions, removing two of my three Visual studio installs, and creating the first two workspaces for Visual Studio Code in the ATAP.Utilities repository.&lt;/p&gt;

&lt;p&gt;So the remainder of this post will be the raw dictation transcription, as I try to get the Powershell code I wrote last week into the original Console program that read a lot of disks, and records info about every file. The next step is to store the data in a graph DB. Yesterday I got the SQL Server 2017(?) service running locally, with the graph extensions, and I also created a node and edge table . I have powershell script that can insert the directory nodes from upstream into the nodes table of the DB&lt;/p&gt;

&lt;p&gt;Now to try dictating stream of consciousness to Visual Studio Code&lt;/p&gt;

&lt;p&gt;First thing I’m going to try to do is to correct the build tools path.
The solution file contains a section called .build with has entries for tools whose pans include .build from the solution directory.&lt;/p&gt;

&lt;p&gt;Hello while I am still trying to figure out why the path to the finished build tools is short by one directory, by manage to move four of the build tools directories under the source parent directory, and was able to properly re-root them in the solution directory under the build folder under src&lt;/p&gt;

&lt;p&gt;The second thing I’m going to try to do is to figure out the loft configurations so that it specifies the correct directory.&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Voice Dictation" /><category term="Voice Commands" /><summary type="html">Voice dictation is the subject of my second blog post.</summary></entry></feed>