<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-04-24T21:01:28-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill‚Äôs Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the family. We&apos;ve got it all!</subtitle><author><name>William (Bill) Hertzing</name></author><entry><title type="html">How I Setup This Github Pages Blog Site Part 03</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 03" /><published>2021-04-24T13:12:36-06:00</published><updated>2021-04-24T13:12:36-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03/">&lt;p&gt;Welcome to the third part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first two post in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Site Part 01&lt;/a&gt; and &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-02/&quot;&gt;How I setup this GitHub Pages Blog Site Part 02&lt;/a&gt; you should probably give them a quick review, to become familiar with how the site has been built up to this point.&lt;/p&gt;

&lt;p&gt;The next steps will be to implement the features specified in &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/3&quot;&gt;Milestone 0.03.0&lt;/a&gt;.  I‚Äôve created Milestones for Release V0.03 and V0.04 already. I also have a lot of ideas for additional features in a Milestone &lt;em&gt;Release Far Future&lt;/em&gt;.  I like to plan one or two milestones in advance of the current sprint. That gives me time to study the Internet for examples and guidelines for the specific new features coming in the next two releases. I also arrange the Milestone &lt;em&gt;Release Far Future&lt;/em&gt; features in the rough order of prioritization I want, then when creating a new specific milestone, I move an appropriate number of features from Milestone &lt;em&gt;Release Far Future&lt;/em&gt; into the new next Release milestone. I‚Äôll say this again, I‚Äôve found that there is always ‚Äúfeature creep‚Äù in releases if I don‚Äôt take the time to write down what is going into the next release. This helps me keep to the release cadence I want, and ensures these posts corresponding to each release don‚Äôt get too big!&lt;/p&gt;

&lt;p&gt;This release is all about moving to a better theme, adding navigation elements, and incorporating Disqus comments.&lt;/p&gt;

&lt;p&gt;Lets move on!&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-branch-for-developing-the-next-release&quot;&gt;Create a new branch for developing the next Release&lt;/h2&gt;

&lt;p&gt;First step after doing a Release is to create a new branch for working on the features for the next Release.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to switch to the just released Release. Hopefully, it is clean and there have been no changes since the last release tag was added.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b SprintForRelease0.03.000&lt;/code&gt; to create a branch for the work on the next release. Modify the branch name shown to reflect the number of the next release. For this post and the development of the next Release of this site, I‚Äôll keep coming back to the branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForRelease0.03.000&lt;/code&gt; with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout SprintForRelease0.03.000&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;work-on-bugs-in-parallel-with-new-features&quot;&gt;Work on bugs in parallel with new features&lt;/h2&gt;

&lt;p&gt;Every release brings new bugs. I always want to be working on exciting new features, not trying to figure out my past mistakes üòû. Gotta do it though, so it‚Äôs best to get into a rhythm for working on both areas.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use Github issues to record bugs found in the current release.&lt;/li&gt;
  &lt;li&gt;Create a branch to work on each bug issue.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to switch back to the just released Release.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b BugFixIssue#9&lt;/code&gt; to create a branch for the work on fixing the bug. Modify the branch name shown to reflect the Issue number.&lt;/li&gt;
  &lt;li&gt;If you have another issue that you want to work in parallel, fork another branch from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Not too many though, because each time a bugfix branch is merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, the other bugfix branches will need to be rebased. Having just a couple bugfix branches existing and being worked on makes the process of merging and rebasing easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have a few parallel branches setup, you can decide which branch you want to work on today. üòä&lt;/p&gt;

&lt;p&gt;Later in this post I‚Äôll show how I merge the bug fix branches back into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; development sprint and bugfix branches onto the updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;update-the-gitcommittemplate&quot;&gt;Update the git.commit.template&lt;/h2&gt;

&lt;p&gt;There is only one template for commits, and since I‚Äôm working primarily on Release V0.03.000, it‚Äôs time to change the default template to reflect that.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitTemplates/git.commit.template.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;See Milestone Release V0.02.00&lt;/code&gt; and change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;See Milestone Release V0.03.00&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save the file. The new changed template should appear the next time the VSC SCM tool window is opened.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-draft--part-03-post&quot;&gt;Create a draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 03&lt;/code&gt; post&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how-i-setup-this-github-pages-blog-site-part-03.md&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical/_drafts&lt;/code&gt; subdirectory (or under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory at the base of the repo if you are not using categories). Do not add the &lt;em&gt;YYYY-MM-DD&lt;/em&gt; prefix to this file.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter text to the file. Modify it as appropriate for your site. &lt;em&gt;Note&lt;/em&gt; There is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date:&lt;/code&gt; key in a draft post.&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: How I setup this GitHub Pages Blog, Part 3
 tags: Jekyll GitHubPages
 description: third set of steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;
 Add text you want to see in your third post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt; Jekyll will build the drafts with the current date so they will be easy to find at the top of your (chronologically sorted) post listings.&lt;/li&gt;
  &lt;li&gt;Validate the new post exists locally under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt; subdirectory, and a link to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 03&lt;/code&gt; post appears at the top of the landing page.&lt;/li&gt;
  &lt;li&gt;Commit the file, sync with Github, and verify the GiHub repository now has the new branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForRelease0.03.000&lt;/code&gt; and the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 03&lt;/code&gt; file under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical/_drafts&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; During this period in the development of the site, Real Life interfered in the form of the passing of our dear dog Molly. Since one purpose of the site is to post updates regarding real-life happenings to friends and family, the features destined for release V0.03 were re-prioritized to support posting a Eulogy for Molly. This primarily involved doing the minimum needed to convert to the Minimal Mistakes theme, customizing the footer, customizing the Author information, customizing the favicon, and customizing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component to support captions for the images in the gallery, using that modified component to create the picture gallery found in the eulogy post, creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;favicon&lt;/code&gt; and adding a Table Of Contents (TOC) to posts. The remainder of the features originally planed for V0.03 have slipped to V0.04.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;change-theme-to-minimal-mistakes-mm&quot;&gt;Change theme to Minimal Mistakes (MM)&lt;/h2&gt;

&lt;p&gt;Now we‚Äôll switch to a better theme. I decided to use &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;. Installation details are in the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;Quick-Start Guide&lt;/a&gt;. What follows are the steps I took and the choices I made during installation.&lt;/p&gt;

&lt;h3 id=&quot;add-the-minimal-mistakes-jekyll-gem-based-theme-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistakes-jekyll&lt;/code&gt; Gem-based theme to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;minima&quot;, &quot;~&amp;gt; 2.5&quot;&lt;/code&gt; with this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s&quot;&gt;gem &quot;minimal-mistakes-jekyll&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt; to fetch and update bundled gems.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;finding-the-files-that-make-up-the-theme&quot;&gt;Finding the files that make up the theme&lt;/h3&gt;

&lt;p&gt;There are a number of theme files that will need to be overridden. When creating an override for a file, start with the theme‚Äôs file. To locate theme files, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle info minimal-mistakes-jekyll&lt;/code&gt;. That will return the path of the Gem theme‚Äôs installation directory. From that root path, all of the theme‚Äôs files can be found.  Alternatively, the latest versions of all theme files can be found on the MM Github site, at &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;. However, be careful that the version installed locally matches the version on the GitHub site.&lt;/p&gt;

&lt;h3 id=&quot;merge-mm-default-values-of-_configyml&quot;&gt;Merge MM default values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The MM theme has a default file for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. I compared the theme‚Äôs default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file currently in use on my site, then merged the two, updating the resulting file with additional information specific to my site. There were a lot of setting in the new file with which I was unfamiliar. This post and subsequent posts will go into greater detail on the contents of this file and how it was modified.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Combine the latest version with the current version
    &lt;ol&gt;
      &lt;li&gt;uncomment the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# theme&lt;/code&gt; line&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subtitle:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repository:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author:&lt;/code&gt; subkey values&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bio:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;links:&lt;/code&gt; subkey values&lt;/li&gt;
      &lt;li&gt;uncomment and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url:&lt;/code&gt; key values for any social media sites you want to appear under your Author information.
        &lt;blockquote&gt;
          &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; I do NOT recommend enabling email links unless you are willing to deal with a lot of spam in your inbox!&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer:links:&lt;/code&gt; subkey values&lt;/li&gt;
      &lt;li&gt;uncomment and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url:&lt;/code&gt; key values for any social media sites you want to have links to appear in the footer.&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins:&lt;/code&gt; key. There are three additional plugins defined in the theme that are not present in the current version. Add all three
        &lt;ul&gt;
          &lt;li&gt;jekyll-paginate&lt;/li&gt;
          &lt;li&gt;jekyll-sitemap&lt;/li&gt;
          &lt;li&gt;jekyll-gist&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Save the file.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;install-additional-gems&quot;&gt;Install additional GEMs&lt;/h3&gt;

&lt;p&gt;The MM theme references three additional plugins. Install them using the commands&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-paginate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-sitemap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-gist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The results of running update will be a list of gems and their versions. Note the version numbers of the gems that match the plugins specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;. The versions shown here are those that existed on April 23, 2021.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-paginate&quot;, &quot;~&amp;gt; 1.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-sitemap&quot;, &quot;~&amp;gt; 1.4.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-gist&quot;, &quot;~&amp;gt; 1.5.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.15.1&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-include-cache&quot;, &quot;~&amp;gt; 0.2.1&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll_version_plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the Gemfile&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oops, the site build did not finish and there are errors reported. Gotta work through the troubleshooting.&lt;/p&gt;

&lt;h3 id=&quot;change-post-layout-to-posts-layout&quot;&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; layout to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; layout&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme had a layout named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt;, but MM uses a layout called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt;. In all the posts for Release V0.01 and V0.02, each post had a Front Matter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key. Fix this by removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key from the Front Matter in all posts. The Default Front Matter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file will take care of defining the layout for all posts&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use VSC global search feature to find the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: post&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Go into each file and remove that line if it is within the files‚Äô Front Matter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;change-page-layout&quot;&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; layout&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme had a layout named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;, but MM does not. Fix this by modifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key in the Front Matter in all pages, and use a layout specific to the page‚Äôs intent.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat the steps used to fix the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; layout. Global search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: page&lt;/code&gt;, replace it as follows:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file (at the root of the repo), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: home&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;in all other page files, remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key line completely.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looks like this cleaned up all the warnings about missing the layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; and missing the layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;. Validate that the site builds and serves.&lt;/p&gt;

&lt;h2 id=&quot;fix-the-footer&quot;&gt;Fix the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Eventually, I want the footer to look similar to the footer at GitHub Marketplace Action &lt;a href=&quot;https://github.com/marketplace/actions/deploy-to-github-pages&quot;&gt;Deploy to GitHub Pages&lt;/a&gt;. However, for this release, I‚Äôll start with just the copyright, the License, Code of Conduct, and Contributing links, attributions for Jekyll and MM, and the current Release‚Äôs Semantic Version number.  This is done by overriding the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes/footer.html&lt;/code&gt; file .&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistakes-jekyll&lt;/code&gt; theme‚Äôs installation directory to the local repo‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit the copyright line, replace the entire line with the following (and modify to fit your site):&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-Liquid&quot;&gt; &amp;lt;div class=&quot;page__footer-copyright&quot;&amp;gt;&amp;amp;copy; William Hertzing 2020 - 2021. Licensed under the terms of the &amp;lt;a href=/LICENSE/&amp;gt;MIT License.&amp;lt;/a&amp;gt;
 &amp;lt;a href=https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&amp;gt;Code of Conduct&amp;lt;/a&amp;gt;
 &amp;lt;a href=https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md&amp;gt;CONTRIBUTING&amp;lt;/a&amp;gt; 
 Powered by &amp;lt;a href=&quot;https://jekyllrb.com&quot; rel=&quot;nofollow&quot;&amp;gt;Jekyll&amp;lt;/a&amp;gt; &amp;amp;amp; &amp;lt;a href=&quot;https://mademistakes.com/work/minimal-mistakes-jekyll-theme/&quot; rel=&quot;nofollow&quot;&amp;gt;Minimal Mistakes&amp;lt;/a&amp;gt;.
 Site Release {% capture long_tag_name %}{% project_version  %}{% endcapture %}{{ long_tag_name | remove: &apos;releases/&apos; | split: &apos;-&apos; | first | prepend: &quot;V&quot; }}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The site should build and display, and a decent looking footer should display on all pages and posts. We will address adding to the contents of the footer in later posts.&lt;/p&gt;

&lt;h2 id=&quot;add-a-faviconico&quot;&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I have a .jpg file with an image I‚Äôd like to use as the site‚Äôs Favicon. The HTML needed to generate Favicon references for all kinds of browsers are usually found in each page‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;... &amp;lt;/head&amp;gt;&lt;/code&gt; section. The MM theme has a place to insert custom HTML for the head tag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head/custom.html&lt;/code&gt;. The MM theme‚Äôs original custom head HTML file is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head/custom.html&lt;/code&gt;, and in it there is a line the specifically mentions a place to insert html related to the Favicon. It also refers to &lt;a href=&quot;https://realfavicongenerator.net/&quot;&gt;Favicon Generator. For real.&lt;/a&gt;, which lets you take a .jpg file and turn it into a series of .ico files for various browsers. If you don‚Äôt have a picture you want to use yet, you can just try the Favicon Generator with a default image. The site returns a package of files to be installed into the root of the repo, and a block of HTML to be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;... &amp;lt;/head&amp;gt;&lt;/code&gt; section of a page.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new subdirectory and file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head/custom.html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Copy the contents of the MM original file into the local file above, although it is all comments.&lt;/li&gt;
  &lt;li&gt;Add the snippets generated by the &lt;a href=&quot;https://realfavicongenerator.net/&quot;&gt;Favicon Generator. For real.&lt;/a&gt; to the file.&lt;/li&gt;
  &lt;li&gt;Unpack the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; package that was generated by Favicon Generator into the root of the repo.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Validate the tab in the browser now includes the favicon.&lt;/p&gt;

&lt;h2 id=&quot;modify-the-mm-gallery-component-to-add-a-title-under-each-picture&quot;&gt;Modify the MM &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component to add a title under each picture&lt;/h2&gt;

&lt;p&gt;I needed to put all of Molly‚Äôs pictures for her eulogy into a gallery, but I wanted captions under each picture. To do this, I used MM‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component with a simple modification.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/gallery&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the content of the theme‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/gallery&lt;/code&gt; file from the locally installed gem‚Äôs location.&lt;/li&gt;
  &lt;li&gt;Edit the local file and paste the content from the theme‚Äôs version of the file&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; just below the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img ...&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test this, a post and some pictures will be needed. In my site, the post was ‚ÄúEulogy for Molly‚Äù, and I added Front Matter specifying the gallery and the pictures.&lt;/p&gt;

&lt;h2 id=&quot;add-basic-toc-to-posts&quot;&gt;Add basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOC&lt;/code&gt; to posts&lt;/h2&gt;

&lt;p&gt;MM theme comes with support for a basic Table of Contents (TOC) displayed to the right of each post. The TOC can be made sticky to the top of the page. This can be enabled in the Default Front Matter.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults:&lt;/code&gt; key&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values:&lt;/code&gt; subkey belonging to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; scope, add the two lines&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;toc_sticky&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt; and validate that the posts now have a TOC displayed on their right. The TOC should remain visible as the post is scrolled down. As the cursor moves to various sections of the post, the appropriate section of the TOC should highlight. Clicking on a section in the TOC should scroll the post to that section.&lt;/p&gt;

&lt;h2 id=&quot;add-disqus-comments-to-posts&quot;&gt;Add Disqus comments to posts&lt;/h2&gt;

&lt;p&gt;There is a lot of opinions on the Internet related to ‚Äúwhat is the best way to add a comments section to posts‚Äù. I decided to use the Disqus approach, primarily because I did not want to have to spend time moderating comments to remove spam. Most people who weighed in on this topic agreed that Disqus had a very good track record in eliminating spam. As of this date, 2021-04-13, Disqus will provide the basic service (no ads) for free if I self-identify as a personal or OSS site. I registered on 2021-04-13, and received an email acknowledgement the next day. I will send a note to their support tomorrow. More on this later.&lt;/p&gt;

&lt;h3 id=&quot;register-for-an-account-at-disqus&quot;&gt;Register for an account at Disqus&lt;/h3&gt;

&lt;p&gt;Go through the &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; registration procedure for a site. Make a note of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname&lt;/code&gt; you enter, it will be a key part of enabling comments below.&lt;/p&gt;

&lt;h3 id=&quot;enable-support-for-disqus-in-the-mm-theme&quot;&gt;Enable support for Disqus in the MM theme&lt;/h3&gt;

&lt;p&gt;The MM theme has built-in support for Disqus comments.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments:&lt;/code&gt; key.&lt;/li&gt;
  &lt;li&gt;Modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider:&lt;/code&gt; subkey to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider: &quot;disqus&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname:&lt;/code&gt; subkey to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname: &amp;lt;Your Disqus Shortname&amp;gt;&lt;/code&gt;&amp;gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname&lt;/code&gt; you entered when registering for your Disqus account.&lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Comments are only visible if the environment specifies an environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV&lt;/code&gt; with a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt;. To enable comments, the command that is run to build and serve the site now becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; This will instruct PowerShell to create the Environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV&lt;/code&gt; with a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; whose scope is just for the building and serving of the site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve --drafts&lt;/code&gt; also works, and will produce draft posts with comment sections. Avoid entering any comments while the post is still in draft, as the final name of the post will probably differ (in &lt;em&gt;YYY-MM-DD&lt;/em&gt; part) from the published full name of the post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; and validate that the Disqus comments section now appears on the bottom of every post.&lt;/p&gt;

&lt;h2 id=&quot;making-the-third-release-of-the-site&quot;&gt;Making the third release of the site&lt;/h2&gt;

&lt;p&gt;I‚Äôm happy now with the enhancements I‚Äôve made to the blogging site. It‚Äôs time to wrap up this release.&lt;/p&gt;

&lt;h3 id=&quot;site-minor-release-checklist&quot;&gt;Site Minor Release checklist&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch builds cleanly, without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drafts&lt;/code&gt; option.&lt;/li&gt;
  &lt;li&gt;Review any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warnings&lt;/code&gt; that appear in VSC‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problems&lt;/code&gt;. pane. Clean up the underlying issue, or decide they are OK to live with for this release. Commit any changes made during this step to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and push to the remote.&lt;/li&gt;
  &lt;li&gt;Update the ChangeLog.md. I simply cleanup the Milestone text and add it to ChangeLog. Commit the ChangeLog.md and push it.&lt;/li&gt;
  &lt;li&gt;Publish the draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;How I setup this GitHub Pages Blog, Part 3&lt;/code&gt; post into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_technical&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Publish the draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eulogy for Molly the Dog&lt;/code&gt; post into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; to ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; has been built with no drafts and with Disqus enabled&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull rebase -i main&lt;/code&gt; to pull any changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch. ToDo: add example git commands&lt;/li&gt;
  &lt;li&gt;Run through the &lt;em&gt;pre-release checklist - ToDo&lt;/em&gt; of things to test in the Release Candidate.&lt;/li&gt;
  &lt;li&gt;If any item is deficient, fix the problem, update code and commit again until the &lt;em&gt;pre-release checklist&lt;/em&gt; passes. Always ensure that  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; is run after the final Release Candidate code change is made, so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; is up-to-date.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull rebase -i main&lt;/code&gt; to pull any last-minute changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;If there were any changes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; that were pulled into the feature branch, run the &lt;em&gt;pre-release checklist&lt;/em&gt; again. Always ensure that  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; is run after the final Release Candidate code change is made, so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; is up-to-date.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final-soft-reset-and-commit-on-the-sprintforreleasexxx-branch&quot;&gt;Final soft reset and commit on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch&lt;/h3&gt;

&lt;p&gt;The purpose of the soft reset and commit is to clean up the commit messages and all the changes and make them ready for the ChangeLog. If the individual commit messages have been well written, the chore of making a good Feature Release commit message shouldn‚Äôt be too hard.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty=&quot;format:%b&quot; HEAD...$(git merge-base main $(git rev-parse --abbrev-ref HEAD)) &amp;gt; $env:TEMP/git_message_for_squash.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code $env:TEMP/git_message_for_squash.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Edit the file and create the final commit message for the Feature Release.&lt;/li&gt;
  &lt;li&gt;Copy the final commit message into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; and validate the ChangeLog looks as expected. Stop the local Jekyll server.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --soft $(git merge-base main $(git rev-parse --abbrev-ref HEAD))&lt;/code&gt; to reset just the head of the feature branch to the head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; to add the current state of the Feature branch to the next commit.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;. Title should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEAT Milestone V0.03.000&lt;/code&gt; Paste the final commit message as the body. Close the editor.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;merge-the-sprintforreleasexxx-branch-with-the-main-branch&quot;&gt;Merge the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/h3&gt;

&lt;p&gt;Many organizations require a pull request to perform a merge. Thats a great idea as soon as your site has any collaborators, but its overkill for a solo developer.  I‚Äôll add instructions and templates for a Pull Request process in a later post. For now just merge the two branches.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch is based at the head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. ToDo: add examples git commands&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge SprintForReleaseXXX&lt;/code&gt;  to perform the merge. If the pre-release checklist was followed, there should be no merge conflicts.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chore Release Work for V0.03.000&lt;/code&gt; as the commit title&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-a-release-tag&quot;&gt;Add a Release tag&lt;/h3&gt;

&lt;p&gt;Now that the merge has been made, add a Release tag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/0.03.000 -m &quot;Third release of Bill&apos;s Blog&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final-build-of-production-site&quot;&gt;Final build of production site&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the final production build, including the Release Version in the footer, is correct. Stop the local Jekyll server.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; (these should only be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; changes). Note the commit ID.&lt;/li&gt;
  &lt;li&gt;Run ToDo: insert git commands to move the tag forward one commit.&lt;/li&gt;
  &lt;li&gt;View the tag locally ensure it is present and associated with the correct commit ID (should be the very latest commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --atomic origin main refs/tags/releases/0.03.000&lt;/code&gt; to push both the final commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; the associated release tag to GitHub.&lt;/li&gt;
  &lt;li&gt;Validate that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; Github Action was invoked and ran successfully.  ToDo: reference the instructions back in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... part 01&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the production site is up, with the new features, new published posts, and correct Release Version number&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This concludes the third post in this series. I‚Äôm sure that there will be revisions to this post for typos, grammar, and general improvements. Future site revisions will support multiple editions of a post, with revision date and ChangeLog for the post. You will (eventually) be able to subscribe to the site‚Äôs feed and get notifications when a revision is made.&lt;/p&gt;

&lt;p&gt;This is the first release that supports Comments for posts. I‚Äôll provide feedback in the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 04&lt;/code&gt; post as to how well that works (spam, commenter‚Äôs ID, etc).&lt;/p&gt;

&lt;p&gt;Thanks for staying to the end! üòä&lt;/p&gt;

&lt;p&gt;Bill Hertzing, April 24, 2021&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Jekyll" /><category term="GitHubPages" /><summary type="html">Welcome to the third part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first two post in the series How I setup this GitHub Pages Blog Site Part 01 and How I setup this GitHub Pages Blog Site Part 02 you should probably give them a quick review, to become familiar with how the site has been built up to this point.</summary></entry><entry><title type="html">Eulogy for molly the dog</title><link href="https://billhertzing.github.io/personal/Eulogy-for-Molly-the-Dog/" rel="alternate" type="text/html" title="Eulogy for molly the dog" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/personal/Eulogy%20for%20Molly%20the%20Dog</id><content type="html" xml:base="https://billhertzing.github.io/personal/Eulogy-for-Molly-the-Dog/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I didn‚Äôt think that the very first post I‚Äôd make under this personal section would be in memory of Molly. She went from healthy to deathly in just three weeks, between the birthday of this site and before the release of V0.03. So here I am writing the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; post, a tribute to a very good dog.&lt;/p&gt;

&lt;p&gt;We got Molly as a rescue in August of 2009. JoAnn and Alex picked her out; I was sandbagged the day after returning from a gig. After I reluctantly agreed to getting a dog, they had her home by the next day. The vet estimated her at 9 months old when we got her. Her papers had her name as Dolly, but JoAnn wanted a pet with &lt;em&gt;moxie&lt;/em&gt;, so Dolly became Roxy; but she was such a sweet and self-effacing thing, that by the next week, we all agreed that she didn‚Äôt have enough &lt;em&gt;moxie&lt;/em&gt; to be a &lt;em&gt;Roxy&lt;/em&gt;, so Molly she became and stayed for the next 13 years.&lt;/p&gt;

&lt;p&gt;Molly had a good dog life. She got to grow up with her boy becoming a man, swimming and tubing, hiking, camping, even snow sports. As a grand dame, she spent a year in urban Charlotte, and became comfortable with life in the big city, where she talked to everyone in the elevators and at the park.  She spent her retirement years in Park City and Deer Valley, Utah, hiking many afternoons in the mountains with her family. She was even a good sport about being costumed for Halloween! She lived to be an estimated almost fourteen, and departed  from us in April of 2021. I hope this gallery reminds us all of the good times we had together, and the memories she is taking along with her on the next stage of our journey.&lt;/p&gt;

&lt;figure class=&quot;third &quot;&gt;
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/8hiul3kqonwsukk/2009%2002%201st%20snow.JPG?raw=1&quot; title=&quot;2009 02 1st snow&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/8hiul3kqonwsukk/2009%2002%201st%20snow.JPG?raw=1&quot; alt=&quot;2009 02 1st snow&quot; /&gt;
        &lt;span&gt;2009 02 1st snow&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/xe16w5shtt8hftr/2009%2002%20Molly%20in%20her%20Panthers%20jacket.JPG?raw=1&quot; title=&quot;2009 02 Molly in her Panthers jacket&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/xe16w5shtt8hftr/2009%2002%20Molly%20in%20her%20Panthers%20jacket.JPG?raw=1&quot; alt=&quot;2009 02 Molly in her Panthers jacket&quot; /&gt;
        &lt;span&gt;2009 02 Molly in her Panthers jacket&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/7lmrgn3602lxzz6/2009%2004%20Molly%20waiting%20patiently%20for%20a%20walk.JPG?raw=1&quot; title=&quot;2009 04 Molly waiting patiently for a walk&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/7lmrgn3602lxzz6/2009%2004%20Molly%20waiting%20patiently%20for%20a%20walk.JPG?raw=1&quot; alt=&quot;2009 04 Molly waiting patiently for a walk&quot; /&gt;
        &lt;span&gt;2009 04 Molly waiting patiently for a walk&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/l9gz5m7tluytv85/2009%2004%20New%20lifejacket.JPG?raw=1&quot; title=&quot;2009 04 New lifejacket&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/l9gz5m7tluytv85/2009%2004%20New%20lifejacket.JPG?raw=1&quot; alt=&quot;2009 04 New lifejacket&quot; /&gt;
        &lt;span&gt;2009 04 New lifejacket&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/h0yh2bbx39ob09h/2010%2007%20Chillin%20on%20the%20boat.JPG?raw=1&quot; title=&quot;2010 07 Chillin on the boat&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/h0yh2bbx39ob09h/2010%2007%20Chillin%20on%20the%20boat.JPG?raw=1&quot; alt=&quot;2010 07 Chillin on the boat&quot; /&gt;
        &lt;span&gt;2010 07 Chillin on the boat&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/dp6c8ag83a9ffgj/2010%2007%20Laying%20around%20with%20Bill.jpg?raw=1&quot; title=&quot;2010 07 Laying around with Bill&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/dp6c8ag83a9ffgj/2010%2007%20Laying%20around%20with%20Bill.jpg?raw=1&quot; alt=&quot;2010 07 Laying around with Bill&quot; /&gt;
        &lt;span&gt;2010 07 Laying around with Bill&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/ll8tgk9jgutgo8a/2010%2007%20Molly%20with%20fish%20on%20dock.jpg?raw=1&quot; title=&quot;2010 07 Molly with fish on dock&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/ll8tgk9jgutgo8a/2010%2007%20Molly%20with%20fish%20on%20dock.jpg?raw=1&quot; alt=&quot;2010 07 Molly with fish on dock&quot; /&gt;
        &lt;span&gt;2010 07 Molly with fish on dock&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/8swcv9jiizclqen/2010%2007%20Molly%27s%20best%20colors.JPG?raw=1&quot; title=&quot;2010 07 Molly&apos;s best colors&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/8swcv9jiizclqen/2010%2007%20Molly%27s%20best%20colors.JPG?raw=1&quot; alt=&quot;2010 07 Molly&apos;s best colors&quot; /&gt;
        &lt;span&gt;2010 07 Molly&apos;s best colors&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/u9ppbff6zml4j44/2010%2007%20Tubing.jpg?raw=1&quot; title=&quot;2010 07 Tubing&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/u9ppbff6zml4j44/2010%2007%20Tubing.jpg?raw=1&quot; alt=&quot;2010 07 Tubing&quot; /&gt;
        &lt;span&gt;2010 07 Tubing&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/2sli0z8ce243ff1/2010%2008%20Ouch%21%20Don%27t%20bite%20bees%21.JPG?raw=1&quot; title=&quot;2010 08 Ouch! Don&apos;t bite bees!&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/2sli0z8ce243ff1/2010%2008%20Ouch%21%20Don%27t%20bite%20bees%21.JPG?raw=1&quot; alt=&quot;2010 08 Ouch! Don&apos;t bite bees!&quot; /&gt;
        &lt;span&gt;2010 08 Ouch! Don&apos;t bite bees!&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/oe92hoj8ka3grm0/2010%2012%20Molly%20with%20sweater%20in%20snow%20licking%20snowflake.JPG?raw=1&quot; title=&quot;2010 12 Molly with sweater in snow licking snowflake&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/oe92hoj8ka3grm0/2010%2012%20Molly%20with%20sweater%20in%20snow%20licking%20snowflake.JPG?raw=1&quot; alt=&quot;2010 12 Molly with sweater in snow licking snowflake&quot; /&gt;
        &lt;span&gt;2010 12 Molly with sweater in snow licking snowflake&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/007xw2geyzcrpuj/2011%2007%20Thrilled%20with%20her%20New%20Bikini.JPG?raw=1&quot; title=&quot;2011 07 Thrilled with her New Bikini&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/007xw2geyzcrpuj/2011%2007%20Thrilled%20with%20her%20New%20Bikini.JPG?raw=1&quot; alt=&quot;2011 07 Thrilled with her New Bikini&quot; /&gt;
        &lt;span&gt;2011 07 Thrilled with her New Bikini&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/4oabcb9irmgneek/2011%2008%2001%20Alex%20and%20Molly.JPG?raw=1&quot; title=&quot;2011 08 01 Alex and Molly&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/4oabcb9irmgneek/2011%2008%2001%20Alex%20and%20Molly.JPG?raw=1&quot; alt=&quot;2011 08 01 Alex and Molly&quot; /&gt;
        &lt;span&gt;2011 08 01 Alex and Molly&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/k5wn7gn97obv3eq/2011%2008%2004%201%20Molly%20hiking%20in%20Panthertown.JPG?raw=1&quot; title=&quot;2011 08 04 1 Molly hiking in Panthertown&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/k5wn7gn97obv3eq/2011%2008%2004%201%20Molly%20hiking%20in%20Panthertown.JPG?raw=1&quot; alt=&quot;2011 08 04 1 Molly hiking in Panthertown&quot; /&gt;
        &lt;span&gt;2011 08 04 1 Molly hiking in Panthertown&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/uqrt7fgtjfqmd2g/2011%2008%2004%202%20Molly%20camping%20in%20Panthertown.JPG?raw=1&quot; title=&quot;2011 08 04 2 Molly camping in Panthertown&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/uqrt7fgtjfqmd2g/2011%2008%2004%202%20Molly%20camping%20in%20Panthertown.JPG?raw=1&quot; alt=&quot;2011 08 04 2 Molly camping in Panthertown&quot; /&gt;
        &lt;span&gt;2011 08 04 2 Molly camping in Panthertown&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/vj8ksl2f0yhgoy1/2011%2008%2021%201%20JoAnn%20and%20Molly%20Mt.%20Rogers.JPG?raw=1&quot; title=&quot;2011 08 21 1 JoAnn and Molly Mt. Rogers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/vj8ksl2f0yhgoy1/2011%2008%2021%201%20JoAnn%20and%20Molly%20Mt.%20Rogers.JPG?raw=1&quot; alt=&quot;2011 08 21 1 JoAnn and Molly Mt. Rogers&quot; /&gt;
        &lt;span&gt;2011 08 21 1 JoAnn and Molly Mt. Rogers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/00jyx0msy41f58j/2011%2008%2021%202%20Molly%20and%20Bill%20at%20Mt.%20Rogers.JPG?raw=1&quot; title=&quot;2011 08 21 2 Molly and Bill at Mt. Rogers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/00jyx0msy41f58j/2011%2008%2021%202%20Molly%20and%20Bill%20at%20Mt.%20Rogers.JPG?raw=1&quot; alt=&quot;2011 08 21 2 Molly and Bill at Mt. Rogers&quot; /&gt;
        &lt;span&gt;2011 08 21 2 Molly and Bill at Mt. Rogers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/depaawvvnyroxtw/2011%2008%2021%203%20Molly%27s%20tonque.JPG?raw=1&quot; title=&quot;2011 08 21 3 Molly&apos;s tonque&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/depaawvvnyroxtw/2011%2008%2021%203%20Molly%27s%20tonque.JPG?raw=1&quot; alt=&quot;2011 08 21 3 Molly&apos;s tonque&quot; /&gt;
        &lt;span&gt;2011 08 21 3 Molly&apos;s tonque&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/fdjxpjkhff0z4xv/2011%2012%20Molly%20at%20Christmas%20with%20Alex.JPG?raw=1&quot; title=&quot;2011 12 Molly at Christmas with Alex&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/fdjxpjkhff0z4xv/2011%2012%20Molly%20at%20Christmas%20with%20Alex.JPG?raw=1&quot; alt=&quot;2011 12 Molly at Christmas with Alex&quot; /&gt;
        &lt;span&gt;2011 12 Molly at Christmas with Alex&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/ghbzrgr73m06fdy/2012%2005%20Molly%20and%20Shawn.JPG?raw=1&quot; title=&quot;2012 05 Molly and Shawn&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/ghbzrgr73m06fdy/2012%2005%20Molly%20and%20Shawn.JPG?raw=1&quot; alt=&quot;2012 05 Molly and Shawn&quot; /&gt;
        &lt;span&gt;2012 05 Molly and Shawn&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/7f3s0ovl86jjnnq/2013%2009%201%20Asher%20looking%20for%20nap%20spot.JPG?raw=1&quot; title=&quot;2013 09 1 Asher looking for nap spot&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/7f3s0ovl86jjnnq/2013%2009%201%20Asher%20looking%20for%20nap%20spot.JPG?raw=1&quot; alt=&quot;2013 09 1 Asher looking for nap spot&quot; /&gt;
        &lt;span&gt;2013 09 1 Asher looking for nap spot&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/cv7nae89a9h6hae/2013%2009%202%20Asher%20%20using%20Molly%20as%20pillow.JPG?raw=1&quot; title=&quot;2013 09 2 Asher  using Molly as pillow&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/cv7nae89a9h6hae/2013%2009%202%20Asher%20%20using%20Molly%20as%20pillow.JPG?raw=1&quot; alt=&quot;2013 09 2 Asher  using Molly as pillow&quot; /&gt;
        &lt;span&gt;2013 09 2 Asher  using Molly as pillow&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/0jk1s0czbty0am7/2013%2009%203%20Molly%20giving%20up.JPG?raw=1&quot; title=&quot;2013 09 3 Molly giving up&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/0jk1s0czbty0am7/2013%2009%203%20Molly%20giving%20up.JPG?raw=1&quot; alt=&quot;2013 09 3 Molly giving up&quot; /&gt;
        &lt;span&gt;2013 09 3 Molly giving up&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/m3jj2dtvz63luzr/2013%2009%204%20Success.jpg?raw=1&quot; title=&quot;2013 09 4 Success&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/m3jj2dtvz63luzr/2013%2009%204%20Success.jpg?raw=1&quot; alt=&quot;2013 09 4 Success&quot; /&gt;
        &lt;span&gt;2013 09 4 Success&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/qtu7xp8ig0us7qv/2014%2012%20%20Molly%20imitating%20Snoopy%20as%20vulture.JPG?raw=1&quot; title=&quot;2014 12  Molly imitating Snoopy as vulture&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/qtu7xp8ig0us7qv/2014%2012%20%20Molly%20imitating%20Snoopy%20as%20vulture.JPG?raw=1&quot; alt=&quot;2014 12  Molly imitating Snoopy as vulture&quot; /&gt;
        &lt;span&gt;2014 12  Molly imitating Snoopy as vulture&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/goovp9pf6mc6qii/2015%2010%20Hiking%20Linville%20Gorge.jpg?raw=1&quot; title=&quot;2015 10 Hiking Linville Gorge&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/goovp9pf6mc6qii/2015%2010%20Hiking%20Linville%20Gorge.jpg?raw=1&quot; alt=&quot;2015 10 Hiking Linville Gorge&quot; /&gt;
        &lt;span&gt;2015 10 Hiking Linville Gorge&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/p2cnaxxjdk8el3s/2017%2001%20Snow%20in%20Carolina.jpg?raw=1&quot; title=&quot;2017 01 Snow in Carolina&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/p2cnaxxjdk8el3s/2017%2001%20Snow%20in%20Carolina.jpg?raw=1&quot; alt=&quot;2017 01 Snow in Carolina&quot; /&gt;
        &lt;span&gt;2017 01 Snow in Carolina&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/7wa1vzi79bas2jw/2017%2006%20Taking%20Zach%27s%20cage.jpg?raw=1&quot; title=&quot;2017 06 Taking Zach&apos;s cage&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/7wa1vzi79bas2jw/2017%2006%20Taking%20Zach%27s%20cage.jpg?raw=1&quot; alt=&quot;2017 06 Taking Zach&apos;s cage&quot; /&gt;
        &lt;span&gt;2017 06 Taking Zach&apos;s cage&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/wx9zlqfa8tvuftw/2017%2006%20Zach%20is%20such%20a%20gentleman.jpg?raw=1&quot; title=&quot;2017 06 Zach is such a gentleman&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/wx9zlqfa8tvuftw/2017%2006%20Zach%20is%20such%20a%20gentleman.jpg?raw=1&quot; alt=&quot;2017 06 Zach is such a gentleman&quot; /&gt;
        &lt;span&gt;2017 06 Zach is such a gentleman&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/rg9uah191cuh9tu/2017%2007%20Going%20grey.jpg?raw=1&quot; title=&quot;2017 07 Going grey&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/rg9uah191cuh9tu/2017%2007%20Going%20grey.jpg?raw=1&quot; alt=&quot;2017 07 Going grey&quot; /&gt;
        &lt;span&gt;2017 07 Going grey&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/rnpxcjhmmyh5x27/2017%2012%20with%20a%20concerned%20Jack.jpg?raw=1&quot; title=&quot;2017 12 with a concerned Jack&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/rnpxcjhmmyh5x27/2017%2012%20with%20a%20concerned%20Jack.jpg?raw=1&quot; alt=&quot;2017 12 with a concerned Jack&quot; /&gt;
        &lt;span&gt;2017 12 with a concerned Jack&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/jtt2uy8sqao0f34/2018%2004%20Freedom%20Park%20Charlotte%20with%20Bill.jpg?raw=1&quot; title=&quot;2018 04 Freedom Park Charlotte with Bill&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/jtt2uy8sqao0f34/2018%2004%20Freedom%20Park%20Charlotte%20with%20Bill.jpg?raw=1&quot; alt=&quot;2018 04 Freedom Park Charlotte with Bill&quot; /&gt;
        &lt;span&gt;2018 04 Freedom Park Charlotte with Bill&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/9721bn2uqb9a9uc/2018%2004%20I%20gotta%20walk%20thru%20that%20crowd%20to%20the%20Green.jpg?raw=1&quot; title=&quot;2018 04 I gotta walk thru that crowd to the Green&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/9721bn2uqb9a9uc/2018%2004%20I%20gotta%20walk%20thru%20that%20crowd%20to%20the%20Green.jpg?raw=1&quot; alt=&quot;2018 04 I gotta walk thru that crowd to the Green&quot; /&gt;
        &lt;span&gt;2018 04 I gotta walk thru that crowd to the Green&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/6w8b1asb2ihpas5/2018%2008%20With%20Knight%27s%20mascot%20in%20Charlotte%20park.jpg?raw=1&quot; title=&quot;2018 08 With Knight&apos;s mascot in Charlotte park&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/6w8b1asb2ihpas5/2018%2008%20With%20Knight%27s%20mascot%20in%20Charlotte%20park.jpg?raw=1&quot; alt=&quot;2018 08 With Knight&apos;s mascot in Charlotte park&quot; /&gt;
        &lt;span&gt;2018 08 With Knight&apos;s mascot in Charlotte park&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/hn4tlxmlqf23wit/2018%2012%20Christmas%20sweater.jpg?raw=1&quot; title=&quot;2018 12 Christmas sweater&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/hn4tlxmlqf23wit/2018%2012%20Christmas%20sweater.jpg?raw=1&quot; alt=&quot;2018 12 Christmas sweater&quot; /&gt;
        &lt;span&gt;2018 12 Christmas sweater&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/oyl20fsfp8q9l5k/2018%20At%20Romare%20Bearden%20Park%20Charlotte.JPEG?raw=1&quot; title=&quot;2018 At Romare Bearden Park Charlotte&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/oyl20fsfp8q9l5k/2018%20At%20Romare%20Bearden%20Park%20Charlotte.JPEG?raw=1&quot; alt=&quot;2018 At Romare Bearden Park Charlotte&quot; /&gt;
        &lt;span&gt;2018 At Romare Bearden Park Charlotte&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/f8vaddjfglq6vd6/2018%20Molly%20at%20Museum%20Towers.JPEG?raw=1&quot; title=&quot;2018 Molly at Museum Towers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/f8vaddjfglq6vd6/2018%20Molly%20at%20Museum%20Towers.JPEG?raw=1&quot; alt=&quot;2018 Molly at Museum Towers&quot; /&gt;
        &lt;span&gt;2018 Molly at Museum Towers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/8it7tu2eefg2gdp/2019%2004%20Cash%20can%27t%20take%20no.jpg?raw=1&quot; title=&quot;2019 04 Cash can&apos;t take no&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/8it7tu2eefg2gdp/2019%2004%20Cash%20can%27t%20take%20no.jpg?raw=1&quot; alt=&quot;2019 04 Cash can&apos;t take no&quot; /&gt;
        &lt;span&gt;2019 04 Cash can&apos;t take no&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/974dx8llf4uigxo/2019%2004%20Cash%20is%20too%20pushy.jpg?raw=1&quot; title=&quot;2019 04 Cash is too pushy&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/974dx8llf4uigxo/2019%2004%20Cash%20is%20too%20pushy.jpg?raw=1&quot; alt=&quot;2019 04 Cash is too pushy&quot; /&gt;
        &lt;span&gt;2019 04 Cash is too pushy&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/f7sku31p0faenny/2019%2005%20First%20hike%20in%20retirement.JPEG?raw=1&quot; title=&quot;2019 05 First hike in retirement&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/f7sku31p0faenny/2019%2005%20First%20hike%20in%20retirement.JPEG?raw=1&quot; alt=&quot;2019 05 First hike in retirement&quot; /&gt;
        &lt;span&gt;2019 05 First hike in retirement&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/v9yae0fqthix50l/2019%2006%20Molly%20with%20Harper.JPEG?raw=1&quot; title=&quot;2019 06 Molly with Harper&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/v9yae0fqthix50l/2019%2006%20Molly%20with%20Harper.JPEG?raw=1&quot; alt=&quot;2019 06 Molly with Harper&quot; /&gt;
        &lt;span&gt;2019 06 Molly with Harper&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/h3afv0h5qw4c6xm/2019%2006%20Too%20Tired%20to%20Finish.JPEG?raw=1&quot; title=&quot;2019 06 Too Tired to Finish&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/h3afv0h5qw4c6xm/2019%2006%20Too%20Tired%20to%20Finish.JPEG?raw=1&quot; alt=&quot;2019 06 Too Tired to Finish&quot; /&gt;
        &lt;span&gt;2019 06 Too Tired to Finish&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/bzcw94mb6exv8om/2019%2010%201%20Molly%27s%20Costume%20Before%20Parade.JPEG?raw=1&quot; title=&quot;2019 10 1 Molly&apos;s Costume Before Parade&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/bzcw94mb6exv8om/2019%2010%201%20Molly%27s%20Costume%20Before%20Parade.JPEG?raw=1&quot; alt=&quot;2019 10 1 Molly&apos;s Costume Before Parade&quot; /&gt;
        &lt;span&gt;2019 10 1 Molly&apos;s Costume Before Parade&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/hnijxos9j3s8fe2/2019%2010%202%20Molly%27s%20Exhausted%20after%20parade.JPEG?raw=1&quot; title=&quot;2019 10 2 Molly&apos;s Exhausted after parade&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/hnijxos9j3s8fe2/2019%2010%202%20Molly%27s%20Exhausted%20after%20parade.JPEG?raw=1&quot; alt=&quot;2019 10 2 Molly&apos;s Exhausted after parade&quot; /&gt;
        &lt;span&gt;2019 10 2 Molly&apos;s Exhausted after parade&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/lbsg7lipspqr85d/2019%2012%20Hiking%20on%20Mirror%20Lake%20Hwy%20in%20the%20snow.jpg?raw=1&quot; title=&quot;2019 12 Hiking on Mirror Lake Hwy in the snow&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/lbsg7lipspqr85d/2019%2012%20Hiking%20on%20Mirror%20Lake%20Hwy%20in%20the%20snow.jpg?raw=1&quot; alt=&quot;2019 12 Hiking on Mirror Lake Hwy in the snow&quot; /&gt;
        &lt;span&gt;2019 12 Hiking on Mirror Lake Hwy in the snow&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/qhk42k1g1pbfcw5/2020%2012%20Christmas.JPEG?raw=1&quot; title=&quot;2020 12 Christmas&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/qhk42k1g1pbfcw5/2020%2012%20Christmas.JPEG?raw=1&quot; alt=&quot;2020 12 Christmas&quot; /&gt;
        &lt;span&gt;2020 12 Christmas&lt;/span&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;Molly
&lt;/figcaption&gt;
  
&lt;/figure&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Molly" /><category term="Personal" /><summary type="html">Introduction</summary></entry><entry><title type="html">Repository Interrelationships</title><link href="https://billhertzing.github.io/technical/Repository-Interrelationships/" rel="alternate" type="text/html" title="Repository Interrelationships" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Repository-Interrelationships</id><content type="html" xml:base="https://billhertzing.github.io/technical/Repository-Interrelationships/">&lt;p&gt;‚Äì add dot diagram here? use a png to start.&lt;/p&gt;

&lt;p&gt;I am writing a program that will help you make / string together programs that automate some of your ToDos in real life. The program I‚Äôm writing runs anywhere .Net Core 3.0 runs, uses a Blazor interface, supports a bare minimum ‚ÄúI‚Äôm here‚Äù in minimal mode, but can be expanded by the enabling of features and loading of PlugIns. PlugIns are designed to share their public data, methods and events with each other.&lt;/p&gt;

&lt;p&gt;I‚Äôm also publishing a series of Demo programs that explain in detail the concepts and constructs used in the AceCommander program. This is ensure I understand, and can explain, what ‚Äòthe code I got from goggling the Internet‚Äô is doing when I use it. The Demos are also another way I want to give back and help others understand how the C# language and the .Net  libraries can be used.&lt;/p&gt;

&lt;p&gt;The software in these repositoies are an ongoing effort to collect in a centralized location data structures, algorithms an concepts that I‚Äôve developed or used over the coursse of 45 years of working with computers.&lt;/p&gt;

&lt;p&gt;One repository is called Ace. Ace is my take on the implementation of a digital assistant. Doing a search on GitHub for ‚ÄúJarvis‚Äù (The English accented AI personal assistant to Tony Stark in the Ironman movies) results in hundreds of repositories bearing vriations on that name, and a quick browse through some of them reveals that the desire to code up our won JArvis appeals to many programmers.&lt;/p&gt;

&lt;p&gt;Ace is designed to be availalble on any kind of device. The primary/initial implemenations are on Windows and Linux. The software is designed to be a Windows Service or a Linux Demon. The base implemention provides a simple shell of basic services, and a framework for adding plugins. Most of Ace‚Äôs features and capabilities are provided by individual plugins.&lt;/p&gt;

&lt;p&gt;Ace is built on Dot Net components. The framework is primarly DotNet standard (curretnly an V2.1) for the majority of code, since this code will run on both Linux and Windows. The full Windows framework modules (currently DotNet471) is used for the Windows-Service specific portions; DotNetCore is used for the Linux runtime daemon.&lt;/p&gt;

&lt;p&gt;The Windows-Service framework is ServiceStack (currently V5.1). On Windows, this is wrapped by the TopShelf library, which provides features that make it easy to install, uninstall, start, stop, and manage a Windows service.&lt;/p&gt;

&lt;p&gt;Ace non-GUI plugins are microservice providers. Ace GUI plugins provide the human intefaces to thesse microservices.
ServiceStack is the current microservice provider, and static web server.&lt;/p&gt;

&lt;p&gt;Blazor is currently the primary GUI architecture, as it integrate well with both static web servers and with data structure based on .Net components.&lt;/p&gt;

&lt;p&gt;Distribution of Ace is done via NuGet packaages and the Chocolatey pacakge management software.&lt;/p&gt;

&lt;p&gt;Wherever possible, algorithms and data structures used in Ace are re-factored into utility libraries, to promote code reuse as much as possible.  These utility libraries are managed within the ATAP.Utilities repository. There are currently over 30 packages in this reposity. Some are little more than placeholders with only one or two simple fuctions; other utiltiy libraries contain larger numbers of structures and functions.&lt;/p&gt;

&lt;p&gt;Utility libraries are designed so that data structures are packaged in one unit, objects in another, and static functions in a third unit. This allows the data structures to be shared between the GUI code and the microservice code, using serialization mechanisms found in the data structures pacakge.&lt;/p&gt;

&lt;p&gt;The process needed to translate the code found in these repositories into versioned distribution pacakges, and integrting these ditribution packages into the exisitign world-wide software distribution system, is not trivial. Three of the ATAP.Utility packages are devoted to the Build Tooling code needed to make this happen. In the course of developing thsse BuildTooling pacakages, a number of issues surfaced, and their olutions implemented. You will find in the documentation library a document devoted to explaining how the BuilTooling parts interact with the building (MSBuild.exe invoked via Visual Studio, and invoked via dotnet.exe), testing/verification (UnitTest, IntegrationTest, End-To-End (E2E) test, Appveyor) and distribution (NuGet and Chocolaty) tool suites.&lt;/p&gt;

&lt;h1 id=&quot;atapwebsitesatapconsulting&quot;&gt;ATAP.WebSites.ATAPConsulting&lt;/h1&gt;
&lt;p&gt;Documentation for the corporate website&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;

&lt;h2 id=&quot;third-party-libraries&quot;&gt;Third-Party Libraries&lt;/h2&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;h3 id=&quot;company-icons&quot;&gt;Company Icons&lt;/h3&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;h3 id=&quot;fonts&quot;&gt;Fonts&lt;/h3&gt;

&lt;h2 id=&quot;management-of-sensitive-information-used-for-deployment&quot;&gt;Management of Sensitive information used for deployment&lt;/h2&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;h3 id=&quot;development-environments&quot;&gt;Development Environments&lt;/h3&gt;
&lt;p&gt;Development may be done using any appropriate tool, and any appropriate web server host may be used during development.
Initial documentation will be for development using the Visual Studio 2017 IIDE, along with the integrated IIS Express web server host.&lt;/p&gt;

&lt;h3 id=&quot;deployment-to-development-web-server-hosts&quot;&gt;Deployment to Development Web Server Hosts&lt;/h3&gt;
&lt;p&gt;###&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;h3 id=&quot;testing-tools&quot;&gt;Testing tools&lt;/h3&gt;

&lt;h3 id=&quot;deployment-to-testing-web-server-hosts&quot;&gt;Deployment to Testing Web Server Hosts&lt;/h3&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;

&lt;h3 id=&quot;integration-testing&quot;&gt;Integration Testing&lt;/h3&gt;

&lt;h2 id=&quot;production&quot;&gt;Production&lt;/h2&gt;

&lt;h3 id=&quot;deployment-to-production-web-server-hosts&quot;&gt;Deployment to Production Web Server Hosts&lt;/h3&gt;

&lt;h1 id=&quot;detailed-instructions-for-building-the-atapconsulting-corporate-web-site&quot;&gt;Detailed Instructions for building the ATAPConsulting corporate Web site.&lt;/h1&gt;

&lt;h2 id=&quot;development-1&quot;&gt;Development&lt;/h2&gt;
&lt;p&gt;Instructions for building and testing the web site in development lifecycle stage&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-professional-ide&quot;&gt;Visual Studio Professional IDE&lt;/h3&gt;

&lt;h3 id=&quot;visual-studio-code-community-edition&quot;&gt;Visual Studio Code Community Edition&lt;/h3&gt;

&lt;h3 id=&quot;unit-tests&quot;&gt;Unit Tests&lt;/h3&gt;
&lt;p&gt;Add NuGet Package reference to xUnit
Add NuGet Package refrence to MOQ&lt;/p&gt;

&lt;h2 id=&quot;qatesting&quot;&gt;QA/Testing&lt;/h2&gt;
&lt;p&gt;Instructions for building and testing the web site in QA/Testing lifecycle stage&lt;/p&gt;
&lt;h3 id=&quot;integration-tests&quot;&gt;Integration Tests&lt;/h3&gt;
&lt;p&gt;Add NuGet Package reference to latest Microsoft.AspNetCore.App
Download and install latest .NET Core SDK (2.1 or better) to build and run integration tests
https://www.microsoft.com/net/download&lt;/p&gt;

&lt;h3 id=&quot;automated-continous-integration-ci-tools-used&quot;&gt;Automated Continous Integration (CI) tools used&lt;/h3&gt;

&lt;h2 id=&quot;production-1&quot;&gt;Production&lt;/h2&gt;
&lt;p&gt;Instructions for building and testing the web site in its final, production, lifecycle stage&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Instructions for deploying the production web site to the hosting provider&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;
&lt;p&gt;https://www.dotnetcurry.com/aspnet/1402/aspnet-core-2-new-features
https://www.dotnetcurry.com/aspnet-core/1414/unit-testing-aspnet-core
https://www.dotnetcurry.com/aspnet-core/1420/integration-testing-aspnet-core
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.1&amp;amp;tabs=aspnetcore2x
https://www.dotnetcurry.com/aspnet-core/1433/end-to-end-testing-aspnet-core
http://www.eidias.com/blog/2016/2/14/automated-ui-testing-in-aspnet-mvc5-using-selenium-webdriver&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="AceCommander" /><category term="ATAP.Utilities" /><category term="Blazor," /><category term="StronglyTypedIds," /><category term="BillHertzing.github.io" /><summary type="html">‚Äì add dot diagram here? use a png to start.</summary></entry><entry><title type="html">Powershell To Convert Nest Report To Excel Pivot Table</title><link href="https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/" rel="alternate" type="text/html" title="Powershell To Convert Nest Report To Excel Pivot Table" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table</id><content type="html" xml:base="https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/">&lt;p&gt;Notes for PowerShell SLC meetup
 1) List of cool PowerShell projects folks wold like to work on
 1) signup for one, or more, projects
 1) Pair or team programming work for 1 month and share with meetup group following month
 1) Use GitHub, OSS, MIT license for the 
 1) Some kind of coding collaboration tool? and/or gitter room? or slack channel? that everyone can participate in
 1) Project list
    1) PowerShell in DevOps
	  1) tokenize .razor files
	  1) run a PowerShell scriptblock against all files matching a filename pattern
    1) PowerShell and creating SVG graphs
	  1) Read a source (file (local, remote, or UNC); database;)
	  1) Provide a scriptblock to transform the raw data into a structured hierarchy
	  1) Provide a scriptblock to transform the structured hierarchy into a digraph (a sctructure that describes a graph)
	  1) Provide a set of output providers (write to file (local, remote, UNC); database
	  1) PowerShell option to send the digraph to PlantUML. which can create SVG drawing of the graph 
	1) PowerShell templates
	  1) using Plaster to scaffold a new PowerShell project
	  1) automatically setting up the Pester test runner in a new PowerShell project
	  1) automatically setting up Jenkins to create a CI/CD pipeline for a new PowerShell project&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Powershell" /><category term="Nest" /><category term="RegEx" /><category term="PIvotTable" /><category term="Excel" /><summary type="html">Notes for PowerShell SLC meetup 1) List of cool PowerShell projects folks wold like to work on 1) signup for one, or more, projects 1) Pair or team programming work for 1 month and share with meetup group following month 1) Use GitHub, OSS, MIT license for the 1) Some kind of coding collaboration tool? and/or gitter room? or slack channel? that everyone can participate in 1) Project list 1) PowerShell in DevOps 1) tokenize .razor files 1) run a PowerShell scriptblock against all files matching a filename pattern 1) PowerShell and creating SVG graphs 1) Read a source (file (local, remote, or UNC); database;) 1) Provide a scriptblock to transform the raw data into a structured hierarchy 1) Provide a scriptblock to transform the structured hierarchy into a digraph (a sctructure that describes a graph) 1) Provide a set of output providers (write to file (local, remote, UNC); database 1) PowerShell option to send the digraph to PlantUML. which can create SVG drawing of the graph 1) PowerShell templates 1) using Plaster to scaffold a new PowerShell project 1) automatically setting up the Pester test runner in a new PowerShell project 1) automatically setting up Jenkins to create a CI/CD pipeline for a new PowerShell project</summary></entry><entry><title type="html">Powershell Snippets</title><link href="https://billhertzing.github.io/technical/Powershell-snippets/" rel="alternate" type="text/html" title="Powershell Snippets" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Powershell-snippets</id><content type="html" xml:base="https://billhertzing.github.io/technical/Powershell-snippets/">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Get-ChildItem -File -r&lt;/td&gt;
      &lt;td&gt;where {$_.fullname -match ‚Äúcshtml‚Äù}&lt;/td&gt;
      &lt;td&gt;foreach { git mv ($&lt;em&gt;.fullname) ($&lt;/em&gt;.fullname ‚Äìreplace ‚Äúcshtml‚Äù,‚Äùrazor‚Äù) }&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Get-ChildItem -Dir -r&lt;/td&gt;
      &lt;td&gt;where {$_.fullname -match ‚Äúobj&lt;/td&gt;
      &lt;td&gt;bin‚Äù}&lt;/td&gt;
      &lt;td&gt;foreach {$_.fullname}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Powershell" /><summary type="html">Get-ChildItem -File -r where {$_.fullname -match ‚Äúcshtml‚Äù} foreach { git mv ($.fullname) ($.fullname ‚Äìreplace ‚Äúcshtml‚Äù,‚Äùrazor‚Äù) }</summary></entry><entry><title type="html">Introduction To Acecommander</title><link href="https://billhertzing.github.io/technical/Introduction-to-AceCommander/" rel="alternate" type="text/html" title="Introduction To Acecommander" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Introduction-to-AceCommander</id><content type="html" xml:base="https://billhertzing.github.io/technical/Introduction-to-AceCommander/">&lt;p&gt;The MySQL a is \called AceCommander, it holds userauth user tables&lt;/p&gt;

&lt;p&gt;Install MySql here:&lt;/p&gt;

&lt;p&gt;the database files need to be under dropbox, so a my.ini file has to be created, and MySQL has to be told to look for it under a dropbox location.
The current location is under &lt;drive&gt;:/DropBox/MySQLData&lt;/drive&gt;&lt;/p&gt;

&lt;p&gt;every developer, qa, and test environment, as well as every production system, needs its own AceCommander database
the my.ini file specifies this as &lt;drive&gt;:/dropbox/MySQL/data&lt;/drive&gt;&lt;/p&gt;

&lt;p&gt;The MySQL database name, user, and user password is in the configuration file, as part of the MySQL connection string.&lt;/p&gt;

&lt;p&gt;Make sure that on the development or QA or production server, that the database exists, and that the specified user has the correct permissions and password set&lt;/p&gt;

&lt;p&gt;LiquiBase is the Open Software tool that is used to keep version-controlled information on the MySL database schema and lookup tables‚Äô data.&lt;/p&gt;

&lt;p&gt;Service stack returns ‚Äò403 - forbidden‚Äô when Blazor GUI makes it‚Äôs first call to ServiceStack and asks for all of its DLL files. Have to document the addition of .dll to SS allowed file extensions
Service stack returns ‚Äò403 - forbidden‚Äô when Blazor GUI makes it‚Äôs first call to ServiceStack and asks for all of its PDB files. Have to document the addition of .pdb to SS allowed file extensions. PDB files are for debugging&lt;/p&gt;

&lt;p&gt;Also document the V S2019 requirement and the .DotNetCore V3 preview requirement.
Maybe a section on how to upgrade from V0.5.0 to V0.9.0
Document the issue with Blazor.Extensions.logging still being on V.0.7.0, and the conflict it caused, and how Blazor.extensions.Logging had to be ripped out.&lt;/p&gt;

&lt;p&gt;Sentinel startup stuff&lt;/p&gt;

&lt;p&gt;Document how to add SQLServer to a system, minimal, to use with Ace&lt;/p&gt;

&lt;p&gt;For VS 2019:
To automatically close the console when debugging stops, enable Tools-&amp;gt;Options-&amp;gt;Debugging-&amp;gt;Automatically close the console when debugging stops.&lt;/p&gt;

&lt;p&gt;So, now enumerations are a code smell? https://github.com/ardalis/SmartEnum and others&lt;/p&gt;

&lt;p&gt;Installing Telerik UI components for Blazor: Following instructions, it starts with needing to install nuget.exe; that will make the nuget package push work, as well.
Add to the prerequisites part of the doc the need to download and install nuget.exe, and then to put it on the environment path.&lt;/p&gt;

&lt;p&gt;today, that is 32-bit V4.9.4, instal to programfiles(86)/nuget&lt;/p&gt;

&lt;p&gt;The follow Telerik instructions on how to add the telerik private feed to visual studio&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Ace" /><category term="AceCommander" /><summary type="html">The MySQL a is \called AceCommander, it holds userauth user tables</summary></entry><entry><title type="html">Client Side Blazor Demos</title><link href="https://billhertzing.github.io/technical/Client-side-Blazor-Demos/" rel="alternate" type="text/html" title="Client Side Blazor Demos" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Client-side-Blazor-Demos</id><content type="html" xml:base="https://billhertzing.github.io/technical/Client-side-Blazor-Demos/">&lt;p&gt;Until last week, my main app (and my Blazor demos), used ServiceStack middleware hosted in .Net 4.7.1 using the Windows HTTPListener in a Console App. I spent the last week moving the web servers in my demos 06 and 07 to ASP.NET Core Kestrel self-hosted WITHOUT IIS integration. Yesterday and the day before, I got demo06 server working with V3.0P4 SS Middleware in Kestrel WITH IIS intergation, and demo07 working with SS in Kestrel WITHOUT IIS integration.&lt;/p&gt;

&lt;p&gt;Happy to report that one of my demos and my main app have both been upgraded to V3.0 Preview 5. There are (at least one) thing still broken in P5 that were broke in P4;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Issue in Preview 4 &amp;amp; 5  requires the &quot;route&quot; to be a complete URL
var uriBuilder = new UriBuilder(&quot;http://localhost:21200/BaseServicesInitialization&quot;);
InitializationResponse = await HttpClient.PostJsonAsync&amp;lt;InitializationResponse&amp;gt;(uriBuilder.Uri.ToString(),initializationRequest);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But that will make me take the time to figure out how to configure both the host and the port at runtime instead of being lazy and hardcoding them as I‚Äôve done so far‚Ä¶
Lots more testing to go do, now‚Ä¶&lt;/p&gt;

&lt;p&gt;here‚Äôs a gist with my program.cs file, and how I eventually got it to work in P5
 https://gist.github.com/BillHertzing/d0a27b2dcdf29ffce1b3f9d1e5413497
 Thats the first public gist I‚Äôve shared, please let me know if you have issues seeing it.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;LaunchSettings.json : only applicable to a ASP.NET Core console host (or service) running a web server&lt;/dt&gt;
  &lt;dd&gt;should not be under any GUI projects&lt;/dd&gt;
  &lt;dd&gt;should be under all Server projects&lt;/dd&gt;
  &lt;dd&gt;should define profiles for the Development, Testing,Staging, Production environments. Testing is a custom environments&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;The ‚ÄúapplicationUrl‚Äù: ‚Äúhttp://localhost:21250/‚Äù found in LaunchSettings.json must match the current ‚ÄúListenOn‚Äù that the web server is running, or else it will not launch a browser. In a launchsettings.json Profile, it associates a project‚Äôs executable environment with an endpoint the application hosted in the web server will respond on. Together they provide a channel that the developer can use. Visual Studio uses it to determine if it will launch a browser.&lt;/p&gt;

&lt;p&gt;Top level ReadMe&lt;/p&gt;

&lt;h2 id=&quot;demo01&quot;&gt;Demo01&lt;/h2&gt;

&lt;p&gt;Starting with the basics. Introducing the development environment / the development tools. The most basic of the Demos: a GUI and a WebServer; Introducing the Blazor GUI running in/on WASM in the browsers. Introducing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page. Introducing logging in the GUI via Microsoft.Extensions.Logging and the Blazor.Logging.Extensions. Introducing the WebServer; in Demo01, a Framework 4.7 ConsoleApp running a default WebHost over HTTP.Sys. Introducing the ServiceStack Middleware host, using ServiceStack logging and NLog. Introducing Sentinel, a UDP log capture and viewing rool. Explanation of how the WebServer servers the static files that make up the Blazor GUI. Introduction to the basic debugging tools for the GUI and for the WebServer.&lt;/p&gt;

&lt;h2 id=&quot;demo02&quot;&gt;Demo02&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-blazor-basics&quot;&gt;The GUI focuses on Blazor basics,&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a CodeBehind page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor.cs&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page.&lt;/li&gt;
  &lt;li&gt;The GUI adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; to the CodeBehind page and adds its visual display to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page.&lt;/li&gt;
  &lt;li&gt;The GUI adds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor.cs&lt;/code&gt; the visual representation and the c# code to support a button called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI adds an implementation of a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; handler which increments the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Discussions on the transient nature of data in the browser.&lt;/li&gt;
  &lt;li&gt;Styling focuses on the site.css file
    &lt;ul&gt;
      &lt;li&gt;The site.css file adds a background color for the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; page.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-the-integratediisinprocess-webhost&quot;&gt;The Server focuses on the IntegratedIISInProcess WebHost&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to .Net Core V2.1 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;Discussions on how the WebServer serves the static files that make up the Blazor GUI.&lt;/li&gt;
  &lt;li&gt;launchsettings.json is introduced, and contains settings for running /debugging the  IntegratedIISInProcess WebHost.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware is hosted in the IntegratedIISInProcess WebHost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling&quot;&gt;The build / debug tooling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on how the Server is started, both with and without debugging, from Visual Studio and from the CLI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo02-readme&quot;&gt;details for the Demo02 readme&lt;/h3&gt;
&lt;p&gt;The Server moves the SSApp middleware into an IntegratedIISInProcess WebHost running under .Net Core V2.1.
A static method for the creation of an IWebHostBuilder configured to create an IntegratedIISInProcess WebHost is introduced.
Within the static method, the extension method WebHost.CreateDefaultBuilder() is used to return an IWebHost pre-configured with the defaults necessary to run as an IntegratedIISInProcess WebHost.
launchSettings.json refers to IISExpress
The GUI ‚Äòs one page gets a local variable and a button to increment it. Discussions of persistence of data in a browser-hosted GUI. The site.css file is modified to produce a background effect. The Server appears, a .Net Core 2.1 WebHost running all the defaults (IntegratedIISInProcess). This replaces the ConsoleApp of Demo01.  launchsettings.json is introduced, and contains settings for running the  IntegratedIISInProcess WebHost. The Blazor GUI project introduces a button, and the button‚Äôs OnClick handler&lt;/p&gt;

&lt;h2 id=&quot;demo03---gui-gets-browser-local-storage-server-moves-to-net-core-v22-and-kestrel-webhost&quot;&gt;Demo03 - GUI gets browser-local storage, Server moves to .Net Core V2.2 and Kestrel WebHost&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-browser-local-storage&quot;&gt;The GUI focuses on browser-local storage&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds the third-party Blazor library &lt;a href=&quot;&quot;&gt;Blazored.LocalStorage&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI uses the synchronous interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blazored.Localstorage&lt;/code&gt; persist the value of the page-local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via that property‚Äôs getter and setter.&lt;/li&gt;
  &lt;li&gt;Styling focuses on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.css&lt;/code&gt; file is migrated to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;The background color of  the Body tag is modified.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-the-kestrel-webhost&quot;&gt;The Server focuses on the Kestrel WebHost&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to .Net Core V2.2 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds a static method for the creation of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IWebHostBuilder&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;launchsettings.json adds a section to support launching the Kestrel-based Server.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware is hosted in the Kestrel WebHost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on-adding-support-for-sccs-files&quot;&gt;The build / debug tooling focuses on adding support for .sccs files&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Visual Studio build tooling adds the VSIX extension &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebCompiler&quot;&gt;Web Compiler&lt;/a&gt;. Visual Studio is configured to compile any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sccs&lt;/code&gt; file into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.css&lt;/code&gt; file and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.min.css&lt;/code&gt; file, both of which are copied to the GUI‚Äôs ContentRoot folder during build / publish..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo03-readme&quot;&gt;details for the Demo03 readme&lt;/h3&gt;
&lt;p&gt;A site.sccs file, and tools to compile the site.sccs file to the site.css file, are introduced.
The server project targets Net Core V2.2. A KestrelAlone WebHost is introduced.
The site-wide site.sccs file is added to the wwwroot/css directory. The contents of the current site.css is copied into the new site.scss file for the GUI.
The GUI references the third-party Blazor library Blazored.LocalStorage.
The synchronous interface to Blazored.Localstorage is used to persist the page-local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via that property‚Äôs getter and setter.
The server moves the SSApp middleware into a KestreAlone WebHost running under .Net Core V2.2.
A static method for the creation of an IWebHostBuilder configured to create a KestreAlone WebHost is introduced.
Within the static method,  a new WebHost is configured with no defaults by new()ing an instance of the WebHostBuilder class then applying the extension method .AddKestrel() and others.
 launchsettings.json are expanded to include settings for KestrelOnly
The GUI‚Äôs local variable takes on persistence in browser-local storage using &lt;a href=&quot;&quot;&gt;Blazored.LocalStorage&lt;/a&gt; by &lt;a href=&quot;&quot;&gt;Chris Sainty&lt;/a&gt;.  Mads Kristensen  Web Compiler is installed to Visual Studio, the wwwroot/site.css is migrated to site.scss, and the build tools extended to process .scss files. The Server targets .Net Core 2.2. The WebHost in this Demo is Kestrel (alone).  launchsettings.json are expanded to include settings for KestrelOnly&lt;/p&gt;

&lt;h2 id=&quot;demo04---gui-adds-visual-attributes-and-async-event-handlers--server-get-environment-variables-and-a-selectable-webhost&quot;&gt;Demo04 - GUI adds visual attributes and async event handlers,  Server get Environment Variables and a selectable WebHost&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI gets some big changes. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; is placed within a text span &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpan&lt;/code&gt; for styling with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt; page-local property. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt; adds three page-local properties for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;. The button‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; event handler binding becomes async and indirect. The GUI now has two possible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; event handler methods, one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Active&lt;/code&gt; an one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;, with ‚ÄòActive‚Äô being the initial handler for the button.&lt;/li&gt;
  &lt;li&gt;Clicking the button, when Active, adds visual modifications to the button and to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt;, changes the event handler to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;, increments the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via a simulated async operation with a 4 second delay before returning, and then again changes the visual attributes and the event handler of the button back to ‚ÄòActive‚Äô.&lt;/li&gt;
  &lt;li&gt;Discussions on how async event handlers interact with async Tasks and TaskContinuations.&lt;/li&gt;
  &lt;li&gt;Styling focuses on variables in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.
    &lt;ul&gt;
      &lt;li&gt;The .sccs file adds ‚Ä¶.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-environment-variables-remains-on-net-core-v22&quot;&gt;The Server focuses on Environment Variables, remains on .Net Core V2.2&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Server adds the ability to allow the developer to select either of the two web server hosts, KestrelAlone or IISIntegratedInProcess, to be used when starting the project‚Äôs executable.&lt;/li&gt;
  &lt;li&gt;Discussions on Environment variables&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; adds Environment Variables, and uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlazorDemos_WebHostBuilder&lt;/code&gt; to select which WebHost to build.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Examples of selecting the WebHost for debugging sessions started from either Visual Studio or the CLI are discussed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo04-readme&quot;&gt;details for the Demo04 readme&lt;/h3&gt;
&lt;p&gt;Discussions on async event handlers in the context of the UI thread. Making all of the StateChangeEventHandlers into async Action&lt;task&gt; signatures makes it possible to store them en-group in the State object. They can be lambdas, or they can refer to methods belonging to the CodeBehind classes / file. They can be retrieved from the IEnumerable&amp;lt;Func&lt;Task&gt;&amp;gt; collection with a LINQ query.  Launchsettings.json are introduced to allow the developer to select either of the two static WebHostBuilders when starting a debugging session.
New in this Demonstration are&lt;/Task&gt;&lt;/task&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;a second entry in the launchSettings.json Profiles list&lt;/li&gt;
  &lt;li&gt;environment variables introduced into the individual entries of the launchSettings.json Profiles list&lt;/li&gt;
  &lt;li&gt;How to read environment variables before the web host is created so that the program can decide what kind of a web host to create&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;demo05---gui-gets-a-timer-and-state-server-gets-net-core-v30-environment-and-environment-aware-features&quot;&gt;Demo05 - GUI gets a Timer, and State, Server gets .Net Core V3.0, Environment and environment-aware features.&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-1&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on various GUI State approaches&lt;/li&gt;
  &lt;li&gt;The GUI adds a State class to reduce the repetitive boilerplate needed for c# property representation of visual and action attributes of the HTML page / elements.&lt;/li&gt;
  &lt;li&gt;The GUI adds a new DI-injected State object and its methods is used to store the Action&lt;Task&gt; methods for the statechange handlers, along with a LINQ-based query to retrieve the correct `MethodToUse`.&lt;/Task&gt;&lt;/li&gt;
  &lt;li&gt;The GUI adds a timer, an animated gif file to represent the timer, and two event handlers for the timer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expired&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI Timer Expired statetransition handler does nothing to any properties bound to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt;. The  Expired state program does change the style of the timer gif for a timed delay of 0.5 seconds using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Delay(500)&lt;/code&gt; then changes it back and resets and restarts the timer.&lt;/li&gt;
  &lt;li&gt;The GUI starts using string constants for the class, style, and text properties for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt; and for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt; button‚Äôs visual attributes (for both Active and queuing visual effects).&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-net-core-v30-the-generichost-and-environment&quot;&gt;The Server focuses on .Net Core V3.0., the GenericHost, and environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on the .Net Core V3.0 GenericHost and hosting a WebHost within the GenericcHost&lt;/li&gt;
  &lt;li&gt;References to .Net Core V3.0 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;Discussion on the concept of Environment (Production, Staging, Debug, etc) and the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; environment variable. Discussion on localization of this environment variable, and how to select which WebHost to build/run/use based on the value of this environment variable.&lt;/li&gt;
  &lt;li&gt;The Server adds error pages based on environment, along with ‚ÄòDevelopment-environment-only‚Äô features.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; grows to support four runtime choices consisting of two Environment choices and two WebHost choices.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds&quot;&gt;The build / debug tooling adds&lt;/h3&gt;

&lt;h3 id=&quot;details-for-the-demo05-readme&quot;&gt;details for the Demo05 readme&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Note that having both a button OnClick Active event handler and the TimerExpired Active event handler both ‚Äúactive‚Äù, means that the program is multiplexing those two statechange inputs. The program  can be in the midst of responding to one, when the other occurs, which can lead to synchronicity issues. In Demo05, the program is written so that there is no interaction between the two active statechange handlers, hence no need (yet) to synchronize access to state variables from the two statechange handlers. Also note that having an animated gif in the visual display can provide a clue if the main browser UI thread is blocked.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo06---gui-timer-enhancements-enumerations-supportedwebhosts-and-either-kestral-and-integratediisinprocess-in-the-server&quot;&gt;Demo06 - GUI Timer enhancements, Enumerations, SupportedWebHosts, and either Kestral and IntegratedIISInProcess in the Server&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-2&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a button to start/stop the timer, a CSS animation to represent the timer enabled boolean, and event handlers for the button&lt;/li&gt;
  &lt;li&gt;State&lt;/li&gt;
  &lt;li&gt;Styling focuses on CSS Animations and .sccs include files
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds styles for the TimerControl button,&lt;/li&gt;
      &lt;li&gt;The GUI project adds a new .&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sccs&lt;/code&gt; file fragment suitable for including into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;The new `.sccs. file fragment contains a CSS Animation&lt;/li&gt;
      &lt;li&gt;animations is triggered visible-running / invisible-disabled by the expiration of the Timer trigger.&lt;/li&gt;
      &lt;li&gt;Further styling via String.Constants to make the elements visually explanatory as the demo is run through its visual states.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-a-single-static-builder-for-the-generichost-which-incorporates-different-webhostbuilder-configurations-based-on-a-parameter-to-the-method-the-multiple-static-builders-are-removed&quot;&gt;The Server focuses on a single static builder for the GenericHost, which incorporates different webHostBuilder configurations based on a parameter to the method. The multiple static builders are removed.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds an enumeration for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SupportedWebHostBuilders&lt;/code&gt; and validates/parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlazorDemos_WebHostBuilder&lt;/code&gt; environment variable against this enumeration.&lt;/li&gt;
  &lt;li&gt;The Server merges the two static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IWebHostBuilders&lt;/code&gt; into a single parameterized static builder method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSpecificHostBuilder(SupportedWebHostBuilders webHostBuilderToBuild)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A new compilation unit is introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerations.cs&lt;/code&gt;. The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; is made into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial&lt;/code&gt; class, and the new Enumerations.cs also contains a declaration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial Program&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Discussions on how to ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-1&quot;&gt;The build / debug tooling&lt;/h3&gt;

&lt;h1 id=&quot;cut-line-for-version-150&quot;&gt;Cut Line for version 1.5.0&lt;/h1&gt;
&lt;h3 id=&quot;demos-below-this-line-are-still-under-active-development-in-the-various-features-branches-and-the-develop-branch-and-in-the-last-few-cases-the-demo-is-still-completely-tbd&quot;&gt;Demos below this line are still under active development in the various features Branches and the develop branch, and in the last few cases the demo is still completely TBD.&lt;/h3&gt;

&lt;h2 id=&quot;demo07---configuration-part1&quot;&gt;Demo07 - Configuration (Part1)&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-configuration-tbd-when-csb-supports-extensionsconfiguration&quot;&gt;The GUI focuses on Configuration (TBD when CSB supports Extensions.Configuration)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a new compilation unit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultConfiguration.cs&lt;/code&gt;, which contains the minimal configKeys needed to run the GUI in production&lt;/li&gt;
  &lt;li&gt;A discussion on concurrency if two or more event handlers try to access the same state variable(s)&lt;/li&gt;
  &lt;li&gt;State element properties for data and visual attributes get their setters hooked to NotifyPropertyChange-like and NotifyPropertyChanging-like events&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-creating-a-configurationroot-and-the-microsoftextensionsconfiguration-class&quot;&gt;The Server focuses on creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configurationRoot&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on the concept of Configuration (ConfigurationBuilder, Configuration Providers, and a ConfigurationRoot) is introduce&lt;/li&gt;
  &lt;li&gt;References to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds a new compilation unit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultConfiguration.cs&lt;/code&gt;, which contains the minimal configKeys needed to run the program in production For Demo07 and future, that minimum includes at least the list of URL(s) to ListenTo.&lt;/li&gt;
  &lt;li&gt;The Server adds an initial hostConfigurationRoot created from InMemory, File, and EnvironmentVariable providers.&lt;/li&gt;
  &lt;li&gt;WebHostToBuild and Environment strings from the ConfigurationRoot are validated. If not present, defaults are provided and added to the ConfigurationRoot.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; adds environment variable for the list of URLs that the Server is expected to ListenOn.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--1&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;h3 id=&quot;details-for-the-demo07-readme&quot;&gt;details for the Demo07 readme&lt;/h3&gt;
&lt;p&gt;The static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHostBuilder&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateGenericHostBuilder()&lt;/code&gt; grows an additional parameter of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigurationRoot&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostConfigurationRoot&lt;/code&gt; is passed to the method
The Environment value retrieved from the hostConfigurationRoot is used to conditionally apply the Development-only configuration options.
The Development-only configuration options are moved into the static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateGenericHostBuilder()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;demo08---async-tasks-and-waitany-in-the-gui-configuration-part2-in-the-server&quot;&gt;Demo08 - Async Tasks and WaitAny in the GUI, Configuration (Part2) in the Server&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-visual-representation-of-a-simple-async-tasks&quot;&gt;The GUI focuses on visual representation of a simple async task‚Äôs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;lifecycle: initialization, quiescent, dispatch, awaiting, synchronization, task continuation, completion .&lt;/li&gt;
  &lt;li&gt;The GUI adds an async method that returns a Task, a button that dispatches it, and  visual badge for the task‚Äôs status and results.&lt;/li&gt;
  &lt;li&gt;Notation and relationships of state triggers, as exemplified by buttons, timers, and tasks, are abstracted as a Linq query.&lt;/li&gt;
  &lt;li&gt;The browser-local storage properties involved with State get a concurrency flag.&lt;/li&gt;
  &lt;li&gt;Additional expansion of Configuration if warrented after Blazor supports it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-project-focuses-on-adding-detailed-environment-specific-configuration-settings&quot;&gt;The Server project focuses on adding &lt;em&gt;Detailed environment-specific configuration settings&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; to including the concept of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; (Production, Development, Testing, etc.) driving the contents of the ConfigurationRoot&lt;/li&gt;
  &lt;li&gt;The static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHostBuilder&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSpecificGenericHostBuilder()&lt;/code&gt; adds AppConfiguration based on a chain of Configuration providers.&lt;/li&gt;
  &lt;li&gt;The AppConfiguration includes
    &lt;ol&gt;
      &lt;li&gt;CommandLine Arguments&lt;/li&gt;
      &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
      &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
      &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
      &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--2&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;h2 id=&quot;demo09---logging-in-the-server-and-synchronicity-in-the-gui&quot;&gt;Demo09 - Logging in the Server and synchronicity in the GUI&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-logging-tbd-when-csb-supports-extensionslogging-beyond-just-the-console-logger&quot;&gt;The GUI focuses on logging (TBD when CSB supports Extensions.Logging beyond just the Console Logger)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on how to accomplish Logging from a browser, that is browser-independent and platform-independent.&lt;/li&gt;
  &lt;li&gt;(TBD) The GUI adds Serilog as a logging provider for the CSB GUI application, which writes to the DebugConsole sink, whihc, when run under IISINtegrated, will write-back to the Visual Studio Debug output console&lt;/li&gt;
  &lt;li&gt;The statechange methods for the Timer and for the asynch task are modified so they also increment the IntegerProperty.&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The .sccs file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-microsoftextensionslogging-using-serilog-as-the-logging-extension&quot;&gt;The Server focuses on Microsoft.Extensions.Logging using Serilog as the logging extension&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to Serilog are added, and references to NLog and ServiceStack logging are removed.&lt;/li&gt;
  &lt;li&gt;Log statements that used string expansion are replaced with SeriLog structured logging&lt;/li&gt;
  &lt;li&gt;Discussions on how to add / reference SeriLog as a MEL logger, how to configure logging in a ConfigurationRoot, and how to view logging in a stream database (SEQ).&lt;/li&gt;
  &lt;li&gt;launchsettings.json ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds-seq-for-log-collection-and-viewing-along-with-a-discussion-on-how-to-use-it-with-these-demos&quot;&gt;The build / debug tooling adds SEQ for log collection and viewing ,along with a discussion on how to use it with these Demos.&lt;/h3&gt;
&lt;p&gt;An external tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; is added to provide centralized log collection and viewing. Log messages are ingested as HTTP messages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; on the default port 5341
&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;p&gt;This demo focuses on Logging
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceStack.Logging&lt;/code&gt; dependency and using is removed from all compilation units (source .cs files)
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging&lt;/code&gt; NuGet Package dependency is added to the project
Serilog dependencies (NuGet Packages) are added to the project: (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serilog, Serilog.AspNetCore, Serilog.Enrichers.Thread,S erilog.Exceptions, Serilog.Settings.Configuration, Serilog.Sinks.Console, Serilog.Sinks.Debug, Serilog.Sinks.File, Serilog.Sinks.Seq, SerilogAnalyzer&lt;/code&gt;)
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.development.json&lt;/code&gt; files grow an extensive logging sections for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging&lt;/code&gt; and for Serilog
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; (production) configures Serilog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; writer. The Serilog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogContext&lt;/code&gt; is enriched with the current threadID, and an additional property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt; having the value ‚ÄòDemo09‚Äù
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; (Development) configures Serilog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; writer, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Console&lt;/code&gt; writer, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DebugOutput&lt;/code&gt; writer. 
The Serilog static Log object is initialized with the Serilog configuration read from the ConfigurationRoot
The static method CreateGenericHost adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serilog.AspNetCore&lt;/code&gt; logging to the genericHost‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigureWebHostDefaults&lt;/code&gt; builder extension and to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ConfigureLogging&lt;/code&gt; builder extension via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.UseSerilog()&lt;/code&gt;
The NLog.config and NLog.xsd files are removed. 
The Serilog Analyzer, installed via NuGet, will provide IntelliSense for the Serilog Log methods.
logging statements throughout the code are replaced with SeriLog structured  logging statements 
The Log statements that used String expansion are replaced with SeriLog structured logging messages. The Analyzer provides a suggested replacement, so this step is just a ‚Äúreplace all occurrences‚Äù in the project
&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;

&lt;h2 id=&quot;demo10---server-tracing-and-profiling-via-event-tracing-for-windows-etw-gui-simple-task&quot;&gt;Demo10 - Server: Tracing and Profiling via Event Tracing for Windows (ETW), GUI: simple Task&lt;/h2&gt;
&lt;p&gt;This is the specific documentation for Demo10, &lt;em&gt;Adding Event Tracing for Windows (ETW)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-gui-focuses-on-3&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds
        &lt;h3 id=&quot;the-server-focuses-ontracing-and-profiling-via-event-tracing-for-windows-etw&quot;&gt;The Server focuses onTracing and Profiling via Event Tracing for Windows (ETW)&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The server adds the ability to log method boundaries in the ETW tracing window (not getters or setters yet)
    &lt;ul&gt;
      &lt;li&gt;A managed ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt; is added.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; class has one static Property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log&lt;/code&gt;, which holds an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; class.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; has one method, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Information&lt;/code&gt;, which writes to the ETW subsystem via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics.Tracing&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A number of external tools useful for collecting, viewing, and analyzing ETW events are discussed in the documentation, along with links to further information
    &lt;ol&gt;
      &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
      &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs&lt;/li&gt;
      &lt;li&gt;ToDo: ‚ÄìWPA, Windows Performance Analyzer‚Äì&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo11---ilweaving-using-fody&quot;&gt;Demo11 - ILWeaving using Fody&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-4&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-adding-fody-for-ilweaving-and-the-methodaspectboundry-weaver-addin-for-fody&quot;&gt;The Server focuses on adding Fody for ILWeaving, and the MethodAspectBoundry weaver AddIn for Fody&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on what ILWeaving is, and using Fody to accomplish it&lt;/li&gt;
  &lt;li&gt;Discussions on&lt;/li&gt;
  &lt;li&gt;References to MethodAspectBoundry.Fody are added to the .csproj&lt;/li&gt;
  &lt;li&gt;A new Attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETWLogAttribute&lt;/code&gt; is defined, added to almost every class, and all method entry and exit logging statements are removed.&lt;/li&gt;
  &lt;li&gt;The Server uses the MethodAspectBoundry Weaver to add ETW logging for every method in a class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds-ilweaving-package&quot;&gt;The build / debug tooling adds ILWeaving package&lt;/h3&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Blazor GUI project ‚Ä¶
Todo: The server project focuses on the details of ILWeaving using Fody to provide ETW logging of method entry and exit, including getters and setters. MethodBoundryAspect Fody Plugin also logs exceptions to ETW automagically.
ToDo: look some of that, and move to the next demo.The server project focuses on the details of installing the server project as a Windows service, and partially automating that process.
The Common DTOs ..&lt;/p&gt;

&lt;h2 id=&quot;demo12---publishing-both-the--gui-and-the-server-into-a-windows-service&quot;&gt;Demo12 - Publishing both the  GUI and the Server into a Windows Service&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-getting-the-new-publishedservicepubxml-file-setup-properly&quot;&gt;The GUI focuses on getting the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishedService.pubxml&lt;/code&gt; file setup properly.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds the ability to publish to a specific folder within the &lt;em&gt;_PublishedAgent\PublishedService&lt;/em&gt; subdirectory tree using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishedService.pubxml&lt;/code&gt; publishing option&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-creating-the-basic-windows-service-additions-then-hosting-the-servicestack-middleware-in-a-kestrel-only-webhost-inside-a-generichost-under-net-core-v30-and-running-it-as-a-service&quot;&gt;The Server focuses on creating the basic windows service additions, then hosting the ServiceStack middleware in a Kestrel-only webHost inside a GenericHost under Net Core V3.0 and running it as a Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;Discussion on the differences between a ConsoleApp and a Service&lt;/li&gt;
  &lt;li&gt;Discussion on concepts from the Runtime, to determine if the program is running under Windows or Linux&lt;/li&gt;
  &lt;li&gt;The Server adds a key runtime variable  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsConsoleApp&lt;/code&gt; to determine if the program is running under Windows or Linux&lt;/li&gt;
  &lt;li&gt;The Server adds switchMappings ConfigurationRoot to detect -C or -Console as a command-line switch&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on-the-windows-scexe-utility&quot;&gt;The build / debug tooling focuses on the Windows sc.exe utility&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt; for manually installing and uninstalling the genericHost as a Windows Service are documented&lt;/li&gt;
  &lt;li&gt;Discussion on how to setup VisualStudio and the CLI to ‚ÄòPublish‚Äô the Server to a specified location, which can be referenced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;publishing-steps&quot;&gt;Publishing Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Demo12 adds a new section to the ReadMe for documenting what changes get made in the publishing process.&lt;/li&gt;
  &lt;li&gt;The initial section describes the manual steps for creating / publishings, installing, and running the server as a service, how to uninstall it, and the run edit compile cycle for developing the service..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo-13---tbd-automating-publishing&quot;&gt;Demo 13 - (TBD) Automating Publishing&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-5&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on&quot;&gt;The build / debug tooling focuses on&lt;/h3&gt;
&lt;p&gt;a discussion of the InstallUti;l&lt;/p&gt;

&lt;p&gt;You will need to install a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.Net Core Global Tool&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installUtil&lt;/code&gt;. From a VS 2019 command prompt, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet tool install -g --framework netcoreapp3.0 --version 1.2.0 InstallUtil&lt;/code&gt;. Of course check that this is still the latest version and adjust the instructions accordingly, if a later version exists.&lt;/p&gt;

&lt;h3 id=&quot;publishing-steps-1&quot;&gt;Publishing Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;focuses on automating the publishing process, and provides a PowerShell script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishingAutomation.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo14---tbd-publishing-both-the-gui-and-the-server-to-windows-subsystem-for-linux-as-a-daemon&quot;&gt;Demo14 - (TBD) Publishing both the GUI and the Server to Windows Subsystem for Linux as a Daemon&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-6&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;Discussions on how to ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--3&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-2&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo15---tbd-publishing-both-the-gui-and-the-server-to-linux-kernals&quot;&gt;Demo15 - (TBD) Publishing both the GUI and the Server to Linux kernals&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-7&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-1&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;Discussions on how to ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--4&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-3&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo16---gui-and-server-open-communications&quot;&gt;Demo16 - GUI and Server open communications&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-8&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-2&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;Discussions on how to ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--5&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-4&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo17---gui-and-server-plugins&quot;&gt;Demo17 - GUI and Server PlugIns&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-an-implementation-of-additional-pages-defined-in-configuration-and-loaded-at-runtime&quot;&gt;The GUI focuses on an implementation of additional pages defined in Configuration and loaded at runtime&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-an-implementation-of-additional-services-via-the-ss-plugin-structures&quot;&gt;The Server focuses on an implementation of additional services via the SS Plugin structures&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;Discussions on how to ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--6&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-5&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;p&gt;‚Äî- Cut Line ‚Äî-
Rough notes below, to be integrated&lt;/p&gt;

&lt;p&gt;ToDo: InstallUtil? Registering messages with Windows Application EventLog?
Details in &lt;a href=&quot;Server/ReadMe.html&quot;&gt;Demo12 Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo13 - The GUI focuses on ‚Ä¶. The GUI adds ‚Ä¶. Discussions on ‚Ä¶. The .sccs file adds ‚Ä¶. The build tooling adds‚Ä¶ The Server focuses on ‚Ä¶. References to ‚Ä¶. are added‚Ä¶. Discussions on ‚Ä¶. launchsettings.json ‚Ä¶. The ServiceStack middleware adds ‚Ä¶. The CommonDTOs adds ‚Ä¶&lt;/p&gt;

&lt;p&gt;The AppConfiguration includes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CommandLine Arguments&lt;/li&gt;
  &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
  &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
  &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
  &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;
The AppConfiguration includes
AppConfiguration 
CommandLine Arguments
Environment variables, filtered by a prefix
Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost
compiled-in defaults for the Environment
event handlers
How to branch the flow of execution based on Environment, and how to name the settings files.
logging statements
ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;
System.Diagnostics.Tracing
The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
  &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs
ETWLogAttribute
[ETWLogAttribute]
logging messages for method entry and exit throughout the Server classes are
Blazored.LocalStorage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Blazor GUI site.scss file uses variables to define the &amp;lt;body&amp;gt; tags background style / color.&lt;/p&gt;

&lt;p&gt;Blazor.Logging.Extensions&lt;/p&gt;

&lt;p&gt;Logging  in the GUI via Microsoft.Extensions.Logging, and Blazor.Logging.Extensions&lt;/p&gt;

&lt;p&gt;Blazored.LocalStorage&lt;/p&gt;

&lt;p&gt;Blazored.LocalStorage&lt;/p&gt;

&lt;p&gt;The Server adds Environment variables, and uses one to select which WebHost to build/run/use.  launchsettings.json grows Environment variables.
Environment Variables and LaunchSettings.json grow to add Environment
.Net Core 2.2
The .sccs file adds styles for AnIntegerProperty, and IncrementAnIntegerPropertyButton (for both Active and queuing visual effects)
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers for the button and for the timer itself
The .sccs file adds styles for AnIntegerProperty, and IncrementAnIntegerPropertyButton (for both Active and queuing visual effects).
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers and state transitions for the button and for the timer itself.
The Server adds Environment variables, and uses one to select which WebHost to build/run/use.  launchsettings.json grows Environment variables. The Server targets  .Net Core 3.0 and will remain so for the rest of the demos (Currently Preview6)
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers and state transitions for the button and for the timer itself.&lt;br /&gt;
Demo06  -  The GUI adds a second integer property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnotherIntegerProperty&lt;/code&gt;, a  button to increment it, and a fourth button that will increment both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerProperties&lt;/code&gt;.   Further styling to make the elements visually explanatory as the demo is run through its visual states. Our browser-local storage properties involved with State get their setters hooked. A discussion on concurrency if two or more substates try to access the same state variable
 The Server adds the concept of Environment (Production, Staging, Debug, etc). Discussion on localization of these values, and uses one to select which WebHost to build/run/use.  Environment Variables and launchSettings.json grow to add Environment.
Demo06  -  The GUI adds a second integer property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnotherIntegerProperty&lt;/code&gt;, a  button to increment it, and a fourth button that will increment both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerProperties&lt;/code&gt;.   Further styling to make the elements visually explanatory as the demo is run through its visual states. Our browser-local storage properties involved with State get their setters hooked. A discussion on concurrency if two or more substates try to access the same state variable.   The Server adds the concept of Environment (Production, Staging, Debug, etc). Discussion on localization of these values, and uses one to select which WebHost to build/run/use.  Environment Variables and launchSettings.json grow to add Environment. 
focuses on a single static builder for the GenericHost, which incorporates different webHostBuilder configurations based on a parameter to the method. The multiple static builders are removed.
A new enumeration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SupportedWebHostBuilders&lt;/code&gt;is introduced,
Demo07  -  The GUI adds an async method that returns a Task, a button that dispatches it, and  visual badge for the task‚Äôs status and results. Notation and relationships of state triggers, as exemplified by buttons, timers, and tasks, are abstracted as a Linq query.     Our browser-local storage properties involved with State get a concurrency flag. A discussion on concurrency if two or more substates try to access the same state variable.   The Server focuses on a single static builder for the 3.0 GenericHost, which incorporates different WebHostBuilder configurations based on a parameter to the method. The multiple static builders are removed. A new enumeration SupportedWebHostBuildersis introduced, and corresponding environment variable and launchsettings.json entries
Demo07  -  The GUI adds an 
Demo07  -  The GUI adds
The AppConfiguration includes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CommandLine Arguments&lt;/li&gt;
  &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
  &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
  &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
  &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;
The AppConfiguration includes
AppConfiguration 
CommandLine Arguments
Environment variables, filtered by a prefix
How to branch the flow of execution based on Environment, and how to name the settings files.
Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost
compiled-in defaults for the Environment
event handlers
How to branch the flow of execution based on Environment, and how to name the settings files.
This demo focuses on Logging
Server adds Microsoft.Extensions.Configuration
genericHostSettings.json
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.development.json&lt;/code&gt; files grow an extensive logging section
logging statements
ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;
System.Diagnostics.Tracing
The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
  &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs
ETWLogAttribute
[ETWLogAttribute]
logging messages for method entry and exit throughout the Server classes are
Blazored.LocalStorage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TEMPLATE:&lt;/p&gt;

&lt;h2 id=&quot;demoxx---xxx&quot;&gt;DemoXX - XXX&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-9&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-3&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to ‚Ä¶. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;Discussions on how to ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ‚Ä¶.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ‚Ä¶.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--7&quot;&gt;The build / debug tooling ‚Ä¶&lt;/h3&gt;

&lt;hr /&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Blazor" /><summary type="html">Until last week, my main app (and my Blazor demos), used ServiceStack middleware hosted in .Net 4.7.1 using the Windows HTTPListener in a Console App. I spent the last week moving the web servers in my demos 06 and 07 to ASP.NET Core Kestrel self-hosted WITHOUT IIS integration. Yesterday and the day before, I got demo06 server working with V3.0P4 SS Middleware in Kestrel WITH IIS intergation, and demo07 working with SS in Kestrel WITHOUT IIS integration.</summary></entry><entry><title type="html">Case For A Non Anonymous Internet Part 01</title><link href="https://billhertzing.github.io/political/Case-for-a-non-anonymous-Internet-Part-01/" rel="alternate" type="text/html" title="Case For A Non Anonymous Internet Part 01" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/political/Case-for-a-non-anonymous-Internet-Part-01</id><content type="html" xml:base="https://billhertzing.github.io/political/Case-for-a-non-anonymous-Internet-Part-01/">&lt;h2 id=&quot;tl-dr&quot;&gt;TL DR&lt;/h2&gt;

&lt;p&gt;Making people use their true identity when posting comments to my blog posts might make them more civil. It also allows for the creation of a history of behavior.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;ToDo: add content&lt;/p&gt;

&lt;h2 id=&quot;studies-showing-the-incident-and-degree-of-hateful-speech-declines-when-true-identity-is-required&quot;&gt;Studies showing the incident and degree of hateful speech declines when true identity is required&lt;/h2&gt;

&lt;p&gt;ToDo: add content&lt;/p&gt;

&lt;h2 id=&quot;studies-showing-the-incident-and-degree-of-hateful-speech-increases-when-anonymity-is-allowed&quot;&gt;Studies showing the incident and degree of hateful speech increases when anonymity is allowed&lt;/h2&gt;

&lt;p&gt;ToDo: add content&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;ToDo: add content&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;ToDo: add content&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;

&lt;p&gt;ToDo: add content&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="political" /><category term="Non-Anonymous" /><category term="Internet" /><summary type="html">TL DR</summary></entry><entry><title type="html">Attributions For Internet Resources</title><link href="https://billhertzing.github.io/technical/Attributions-For-Internet-Resources/" rel="alternate" type="text/html" title="Attributions For Internet Resources" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Attributions-For-Internet-Resources</id><content type="html" xml:base="https://billhertzing.github.io/technical/Attributions-For-Internet-Resources/">&lt;h1&gt; People, Books, Articles, Blogs, websites that have sparked ideas or code used in this app

&lt;h2&gt; Attribution for ideas to currently incorporated into the project

|  Group  | Sub-group | ToolName |                  URL                 | NuGet                                    | Date Added | ByWhom |
|:-------:|:---------:|:--------:|:------------------------------------:|------------------------------------------|:----------:|--------|
| Testing | BDD       | SpecFlow | https://github.com/techtalk/SpecFlow | https://www.nuget.org/packages/SpecFlow/ | 06/17/2018 | WGH    |
|         |           |          |                                      |                                          |            |        |
|         |           |          |                                      |                                          |            |        |

&lt;h2&gt; Ideas to be incorporated into the project

|  Group  | Sub-group | ToolName |                  URL                 | NuGet                                    | Date Added | ByWhom |
|:-------:|:---------:|:--------:|:------------------------------------:|------------------------------------------|:----------:|--------|
| Testing | BDD       | SpecFlow | https://github.com/techtalk/SpecFlow | https://www.nuget.org/packages/SpecFlow/ | 06/17/2018 | WGH    |
|         |           |          |                                      |                                          |            |        |
|         |           |          |                                      |                                          |            |        |

&lt;h2&gt; Attribution for ideas which were once incorporated into the project but have been replaced or superseded

&lt;/h2&gt;&lt;/h2&gt;&lt;/h2&gt;&lt;/h1&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Attribution" /><summary type="html">People, Books, Articles, Blogs, websites that have sparked ideas or code used in this app</summary></entry><entry><title type="html">Adventures In Voice Dictation And Commands For A Developer</title><link href="https://billhertzing.github.io/technical/Adventures-in-Voice-Dictation-and-Commands-for-a-Developer/" rel="alternate" type="text/html" title="Adventures In Voice Dictation And Commands For A Developer" /><published>2021-04-24T10:27:49-06:00</published><updated>2021-04-24T10:27:49-06:00</updated><id>https://billhertzing.github.io/technical/Adventures-in-Voice-Dictation-and-Commands-for-a-Developer</id><content type="html" xml:base="https://billhertzing.github.io/technical/Adventures-in-Voice-Dictation-and-Commands-for-a-Developer/">&lt;p&gt;Voice dictation is the subject of my second blog post&lt;/p&gt;

&lt;p&gt;Specifically, can I switch between dictation mode and programming mode&lt;/p&gt;

&lt;p&gt;As I am dictating this into a new voice dictation software package, I have learned just how hard it is to create content on the fly, in complete sentences.&lt;/p&gt;

&lt;p&gt;I did an Internet search on the subject of voice commands to/for Visual Studio code. Aside from the usual dross from the big companies, the articles that seemed remotely interesting, all seen to involve one or more third-party packages.&lt;/p&gt;

&lt;p&gt;All of the articles suggested that the initial steps are to set up microphone, workspace, and to install a voice recognition app.&lt;/p&gt;

&lt;p&gt;I am familiar with voice recognition on Google, and I have tried Microsoft‚Äôs Windows built in product.&lt;/p&gt;

&lt;p&gt;A few years ago I bought a copy of the commercial version of DragonDictate. I never installed it . But I decided to give it a try today.  The DragonDictate has been bought by Nuance. Looking at their website, there are two newer versions of the software. Not sure I want to spend money on this yet, although one of the Internet article did reference using DragonDictate. Unfortunately the article indicated that the professional version does a much better job. Unfortunately, because it costs significantly more money, and as a retiree, I haven‚Äôt got any to spare. :-)&lt;/p&gt;

&lt;p&gt;Pretty much right out of the box I am dictating all of this into a DragonDictate text control which easily pastes into the notepad++ text editor I‚Äôm using.&lt;/p&gt;

&lt;p&gt;It has taken me about 10 minutes to dictate all of this, learning as I go. The biggest issue is it doesn‚Äôt seem to recognize the first couple of words when I start a sentence, so I have to go back to The beginning and enter those words. As happened here, note the capital T prior. I started dictating at ‚ÄúI have to ggo back‚Ä¶‚Äù.&lt;/p&gt;

&lt;p&gt;The next step is to see if it will be possible to give commands to the text editor.&lt;/p&gt;

&lt;p&gt;Instead, went down a rabbit hole. Found a forum where people discuss using DragonDictate to control third-party apps. In the forum, I found a few nuggets from people who were, in 2016, using DragonDictate and Visual Studio. What I did see in code examples was that a variation of Basic is being used customized DragonDictate.&lt;/p&gt;

&lt;p&gt;My programming language preferences are C# and PowerShell. Realizing that I would have to write significant Visual Basic code, I have decided that DragonDictate is probably not the voice dictation recognition software that I‚Äôm looking to pursue.&lt;/p&gt;

&lt;p&gt;So it‚Äôs back to the drawing board! I‚Äôll try to write sooner next time.&lt;/p&gt;

&lt;p&gt;Combining Voice dictation and code editing is the subject of my third blog post&lt;/p&gt;

&lt;p&gt;(Ed. First paragraph is typed) I was going to try and dictate as I coded, but upon opening my environment, I realized it was time for a housecleaning. I spent a few hours prior to dictating closing out my MAPs subscription cleaning out old SDK versions, removing two of my three Visual studio installs, and creating the first two workspaces for Visual Studio Code in the ATAP.Utilities repository.&lt;/p&gt;

&lt;p&gt;So the remainder of this post will be the raw dictation transcription, as I try to get the Powershell code I wrote last week into the original Console program that read a lot of disks, and records info about every file. The next step is to store the data in a graph DB. Yesterday I got the SQL Server 2017(?) service running locally, with the graph extensions, and I also created a node and edge table . I have powershell script that can insert the directory nodes from upstream into the nodes table of the DB&lt;/p&gt;

&lt;p&gt;Now to try dictating stream of conscionous to Visual Studio Code&lt;/p&gt;

&lt;p&gt;First thing I‚Äôm going to try to do is to correct the build tools path.
The solution file contains a section called .build with has entries for tools whose pans include .build from the solution directory.&lt;/p&gt;

&lt;p&gt;Hello while I am still trying to figure out why the path to the finished build tools is short by one directory, by manage to move four of the build tools directories under the source parent directory, and was able to properly reroot them in the solution directory under the build folder under src&lt;/p&gt;

&lt;p&gt;The second thing I‚Äôm going to try to do is to figure out the loft configurations so that it specifies the correct directory.&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Dictation" /><category term="Voice" /><summary type="html">Voice dictation is the subject of my second blog post</summary></entry></feed>