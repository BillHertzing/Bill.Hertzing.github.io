<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-04-17T00:29:07-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the kids. I&apos;ve got it all!</subtitle><entry><title type="html">Why I Wanted A Blog</title><link href="https://billhertzing.github.io/political/2021/04/17/Why-I-wanted-a-Blog/" rel="alternate" type="text/html" title="Why I Wanted A Blog" /><published>2021-04-17T00:29:06-06:00</published><updated>2021-04-17T00:29:06-06:00</updated><id>https://billhertzing.github.io/political/2021/04/17/Why-I-wanted-a-Blog</id><content type="html" xml:base="https://billhertzing.github.io/political/2021/04/17/Why-I-wanted-a-Blog/">&lt;h2 id=&quot;tl-dr&quot;&gt;TL DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;As a place to share knowledge, tips and how-tos, mostly regarding development, operations and monitoring of computer systems.&lt;/li&gt;
  &lt;li&gt;As a place to publish the reasoning that underlie my personal stance on sometimes controversial political issues.&lt;/li&gt;
  &lt;li&gt;As a place to share pictures and stories about myself and my family to other family members and our friends.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I have always envied the developers who do a good job communicating with the world. They enjoy a connectivity to others that seems it must enrich their lives. I’ve always wanted my own blog site where I can write about whatever interests me, technically, politically, and personally. I have had three previous forays into blogging. Once using Blogger at Google, once trying to host my own site at 1And1 (now IONOS), and once with a site at wordpress.com. In each of these prior attempts, I’ve foundered on the technical implementation. Either the platform didn’t have the features I wanted, or the learning curve was too steep, or the cost was prohibitive. Now I’m about to try launching my fourth attempt, using the static site generator Jekyll, with the pages served by GitHub. Here’s hoping that this time I’ll be long-term successful!&lt;/p&gt;

&lt;h2 id=&quot;about-the-atap-name-used-in-the-app-and-library-branding&quot;&gt;About the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP&lt;/code&gt; name used in the app and library branding&lt;/h2&gt;

&lt;p&gt;The last 12 years of my career I owned and operated a &lt;em&gt;microISV&lt;/em&gt;, a company with a very small number of employees that focused on providing consulting services. The name of the company was ATAP Technology, Inc. All the code I wrote on my own during that time, (the portion of code which was not directly funded by my customers), used the namespace and branding of ATAP Technology. When I retired, I closed the company. That body of code I have continued to use and extend in my Open Source Software projects. As the author of the code, and the prior owner and CEO of ATAP Technology, I have placed it into the public domain under the MIT license. I’d love to hear from any lawyers on how best to ensure the code I’ve written and published stays in the public domain.&lt;/p&gt;

&lt;h2 id=&quot;technical-postings&quot;&gt;Technical postings&lt;/h2&gt;

&lt;p&gt;I’m here to show that a single individual, retired from a career in computer engineering, can put together a satisfying experience for contributing to the state of the art in software engineering. This means doing it as much as possible in free, open source software (OSS). But not completely free, as I’ve chosen to spend a bit of my retirement money on upgraded components. I spend maybe $500 USD a year in software licensing fees, which is not cheap but covers paid licenses for various tools. There are plenty other tools I would like to have / use, but I no longer have the luxury of a corporate employer to purchase them! Free tools usually are limited in what they can do, compared to the paid ones. Not saying free ones can’t do it all, but you often have to string together multiple free tools, and that takes more time. The technical posts here will offer insights into how to use the free tools and how to combine them to make development and writing about development easier.&lt;/p&gt;

&lt;p&gt;The technical posts fall into two broad categories. The first category are posts that discuss the OSS application and libraries that I am creating. The second category deals with tips and how-to posts regarding specific tools, libraries, and techniques I use in my day-to-day development activities.&lt;/p&gt;

&lt;p&gt;I’m publishing my work now because it has reached a stage I need to invite comment and criticism, and to do that I have to announce it exists, and have a place where people can stop by and have a look. The other obvious (to me!) reason is that there is probably only about a decade of my life left to try and do something meaningful, and if I don’t start now, as Pink Floyd said “no one told you when to run, you missed the starting gun”. The whole application, library, and blog site pastiche is certainly still in it’s early stages, but I invite you to come along for the ride.&lt;/p&gt;

&lt;h3 id=&quot;the-oss-app-and-libraries-that-i-write&quot;&gt;The OSS app and libraries that I write&lt;/h3&gt;

&lt;p&gt;I have often espoused to friends my dreams of building a wide-ranging multi-function application. That application resides in the repository named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ace&lt;/code&gt;. As much as possible, the code base for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ace&lt;/code&gt; is factored into multiple Nuget packages bundled under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP.Utilities&lt;/code&gt; repository. There are additional repositories that expand on, test, and document specific packages, that I use a teaching tools to provide deeper insights into some of the packages in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP.Utilities&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;The relationships between the repositories I’ve created is explained in the post &lt;em&gt;&lt;a href=&quot;https://ToDo:&quot;&gt;Repository Interrelationships&lt;/a&gt;. Still in Draft&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;political-postings&quot;&gt;Political postings&lt;/h2&gt;

&lt;p&gt;All too often, friends and acquaintances repost stuff on social media with no critical thinking. It is easy to hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;share&lt;/code&gt; when something that resonates as ‘true’ or funny appears, without spending hardly any time to think about it and decide if it true or not, or if it causes anger to a faction of people. When a social issue that is a hot button with my friends from both sides of the political spectrum appears, my preference is to dig into news and opinions, think about it, and sometimes take the time to write down my conclusions and reasoning. In the past, I’ve posted long comments on friends’ Facebook pages, haha, you know who you are. I’d rather post those screeds here for general access, instead of on a single social media platform.  I’m hoping to figure out a way to reach my friends and acquaintances through their preferred platform, and post to them when I write a &lt;em&gt;political&lt;/em&gt; post here, and ask them for their opinions and feedback.&lt;/p&gt;

&lt;h2 id=&quot;pictures-and-stories&quot;&gt;Pictures and Stories&lt;/h2&gt;

&lt;p&gt;Such fun it is, to work on a mashup of text, images, and video for hours, so you can post to the world your latest family event, and then post to your preferred platform, only to learn that many of your friends didn’t see it, just because “oh, I don’t spend much time on blah anymore, I’m mostly online on bleh.”. Frustrating, isn’t it? So I’ll try doing that same mashup of text and images memorializing my next fun outing or family get-together on this blog site, using the Jekyll toolchain to stich it all together, and a cloud service like Dropbox to host the media, and a CDN like Cloudflare to make access quicker. Some posts and media I’ll make available to the world, and others will be only accessible if granted access. Then all I need is a notification to friends and family to “take a look”. For that, I can educate them on RSS Feeds, IFTTT, how to subscribe to the Bill’s Blog RSS feed, and how to stitch it all together so they get an e-mail if I make a new or updated post. Viola, no more being tied to a single platform.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Humans have an innate desire to communicate. I built this blog to communicate. I hope that what I have to say is considered interesting by a large number of folks, and that I’m able to establish a rapport and correspondence with many. I also hope that I can model behavior that encourages others to follow my blog’s philosophy and actions.&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;

&lt;p&gt;This content is all mine, no attributions for this post :-)&lt;/p&gt;</content><author><name></name></author><category term="political" /><summary type="html">TL DR</summary></entry><entry><title type="html">Repository Interrelationships</title><link href="https://billhertzing.github.io/technical/2021/04/16/Repository-Interrelationships/" rel="alternate" type="text/html" title="Repository Interrelationships" /><published>2021-04-16T15:29:02-06:00</published><updated>2021-04-16T15:29:02-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Repository-Interrelationships</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Repository-Interrelationships/">-- add dot diagram here? use a png to start.

I am writing a program that will help you make / string together programs that automate some of your ToDos in real life. The program I&apos;m writing runs anywhere .Net Core 3.0 runs, uses a Blazor interface, supports a bare minimum &quot;I&apos;m here&quot; in minimal mode, but can be expanded by the enabling of features and loading of PlugIns. PlugIns are designed to share their public data, methods and events with each other.

I&apos;m also publishing a series of Demo programs that explain in detail the concepts and constructs used in the AceCommander program. This is ensure I understand, and can explain, what &apos;the code I got from goggling the Internet&apos; is doing when I use it. The Demos are also another way I want to give back and help others understand how the C# language and the .Net  libraries can be used.


The software in these repositoies are an ongoing effort to collect in a centralized location data structures, algorithms an concepts that I&apos;ve developed or used over the coursse of 45 years of working with computers.

One repository is called Ace. Ace is my take on the implementation of a digital assistant. Doing a search on GitHub for &quot;Jarvis&quot; (The English accented AI personal assistant to Tony Stark in the Ironman movies) results in hundreds of repositories bearing vriations on that name, and a quick browse through some of them reveals that the desire to code up our won JArvis appeals to many programmers.

Ace is designed to be availalble on any kind of device. The primary/initial implemenations are on Windows and Linux. The software is designed to be a Windows Service or a Linux Demon. The base implemention provides a simple shell of basic services, and a framework for adding plugins. Most of Ace&apos;s features and capabilities are provided by individual plugins.

Ace is built on Dot Net components. The framework is primarly DotNet standard (curretnly an V2.1) for the majority of code, since this code will run on both Linux and Windows. The full Windows framework modules (currently DotNet471) is used for the Windows-Service specific portions; DotNetCore is used for the Linux runtime daemon.

The Windows-Service framework is ServiceStack (currently V5.1). On Windows, this is wrapped by the TopShelf library, which provides features that make it easy to install, uninstall, start, stop, and manage a Windows service.

Ace non-GUI plugins are microservice providers. Ace GUI plugins provide the human intefaces to thesse microservices.
ServiceStack is the current microservice provider, and static web server.

Blazor is currently the primary GUI architecture, as it integrate well with both static web servers and with data structure based on .Net components.

Distribution of Ace is done via NuGet packaages and the Chocolatey pacakge management software.

Wherever possible, algorithms and data structures used in Ace are re-factored into utility libraries, to promote code reuse as much as possible.  These utility libraries are managed within the ATAP.Utilities repository. There are currently over 30 packages in this reposity. Some are little more than placeholders with only one or two simple fuctions; other utiltiy libraries contain larger numbers of structures and functions.

Utility libraries are designed so that data structures are packaged in one unit, objects in another, and static functions in a third unit. This allows the data structures to be shared between the GUI code and the microservice code, using serialization mechanisms found in the data structures pacakge.

The process needed to translate the code found in these repositories into versioned distribution pacakges, and integrting these ditribution packages into the exisitign world-wide software distribution system, is not trivial. Three of the ATAP.Utility packages are devoted to the Build Tooling code needed to make this happen. In the course of developing thsse BuildTooling pacakages, a number of issues surfaced, and their olutions implemented. You will find in the documentation library a document devoted to explaining how the BuilTooling parts interact with the building (MSBuild.exe invoked via Visual Studio, and invoked via dotnet.exe), testing/verification (UnitTest, IntegrationTest, End-To-End (E2E) test, Appveyor) and distribution (NuGet and Chocolaty) tool suites.



# ATAP.WebSites.ATAPConsulting
Documentation for the corporate website

## Overview

## Architecture

## Frameworks

## Third-Party Libraries

## Static Assets

### Company Icons

### Images

### Fonts

## Management of Sensitive information used for deployment

## Development

### Development Environments
Development may be done using any appropriate tool, and any appropriate web server host may be used during development.
Initial documentation will be for development using the Visual Studio 2017 IIDE, along with the integrated IIS Express web server host.

### Deployment to Development Web Server Hosts
### 

## Testing

### Testing tools

### Deployment to Testing Web Server Hosts

### Unit Testing

### Integration Testing

## Production

### Deployment to Production Web Server Hosts

# Detailed Instructions for building the ATAPConsulting corporate Web site.

## Development
Instructions for building and testing the web site in development lifecycle stage

### Visual Studio Professional IDE

### Visual Studio Code Community Edition


### Unit Tests
Add NuGet Package reference to xUnit
Add NuGet Package refrence to MOQ

## QA/Testing
Instructions for building and testing the web site in QA/Testing lifecycle stage
### Integration Tests
Add NuGet Package reference to latest Microsoft.AspNetCore.App
Download and install latest .NET Core SDK (2.1 or better) to build and run integration tests
https://www.microsoft.com/net/download

### Automated Continous Integration (CI) tools used

## Production
Instructions for building and testing the web site in its final, production, lifecycle stage

## Deployment
Instructions for deploying the production web site to the hosting provider

## Attributions
https://www.dotnetcurry.com/aspnet/1402/aspnet-core-2-new-features
https://www.dotnetcurry.com/aspnet-core/1414/unit-testing-aspnet-core
https://www.dotnetcurry.com/aspnet-core/1420/integration-testing-aspnet-core
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.1&amp;tabs=aspnetcore2x
https://www.dotnetcurry.com/aspnet-core/1433/end-to-end-testing-aspnet-core
http://www.eidias.com/blog/2016/2/14/automated-ui-testing-in-aspnet-mvc5-using-selenium-webdriver</content><author><name></name></author><category term="technical" /><category term="AceCommander" /><category term="ATAP.Utilities" /><category term="Blazor," /><category term="StronglyTypedIds," /><category term="BillHertzing.github.io" /><summary type="html">-- add dot diagram here? use a png to start.</summary></entry><entry><title type="html">Introduction To Acecommander</title><link href="https://billhertzing.github.io/technical/2021/04/16/Introduction-to-AceCommander/" rel="alternate" type="text/html" title="Introduction To Acecommander" /><published>2021-04-16T15:10:17-06:00</published><updated>2021-04-16T15:10:17-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Introduction-to-AceCommander</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Introduction-to-AceCommander/">&lt;p&gt;The MySQL a is \called AceCommander, it holds userauth user tables&lt;/p&gt;

&lt;p&gt;Install MySql here:&lt;/p&gt;

&lt;p&gt;the database files need to be under dropbox, so a my.ini file has to be created, and MySQL has to be told to look for it under a dropbox location.
The current location is under &lt;drive&gt;:/DropBox/MySQLData&lt;/drive&gt;&lt;/p&gt;

&lt;p&gt;every developer, qa, and test environment, as well as every production system, needs its own AceCommander database
the my.ini file specifies this as &lt;drive&gt;:/dropbox/MySQL/data&lt;/drive&gt;&lt;/p&gt;

&lt;p&gt;The MySQL database name, user, and user password is in the configuration file, as part of the MySQL connection string.&lt;/p&gt;

&lt;p&gt;Make sure that on the development or QA or production server, that the database exists, and that the specified user has the correct permissions and password set&lt;/p&gt;

&lt;p&gt;LiquiBase is the Open Software tool that is used to keep version-controlled information on the MySL database schema and lookup tables’ data.&lt;/p&gt;

&lt;p&gt;Service stack returns ‘403 - forbidden’ when Blazor GUI makes it’s first call to ServiceStack and asks for all of its DLL files. Have to document the addition of .dll to SS allowed file extensions
Service stack returns ‘403 - forbidden’ when Blazor GUI makes it’s first call to ServiceStack and asks for all of its PDB files. Have to document the addition of .pdb to SS allowed file extensions. PDB files are for debugging&lt;/p&gt;

&lt;p&gt;Also document the V S2019 requirement and the .DotNetCore V3 preview requirement.
Maybe a section on how to upgrade from V0.5.0 to V0.9.0
Document the issue with Blazor.Extensions.logging still being on V.0.7.0, and the conflict it caused, and how Blazor.extensions.Logging had to be ripped out.&lt;/p&gt;

&lt;p&gt;Sentinel startup stuff&lt;/p&gt;

&lt;p&gt;Document how to add SQLServer to a system, minimal, to use with Ace&lt;/p&gt;

&lt;p&gt;For VS 2019:
To automatically close the console when debugging stops, enable Tools-&amp;gt;Options-&amp;gt;Debugging-&amp;gt;Automatically close the console when debugging stops.&lt;/p&gt;

&lt;p&gt;So, now enumerations are a code smell? https://github.com/ardalis/SmartEnum and others&lt;/p&gt;

&lt;p&gt;Installing Telerik UI components for Blazor: Following instructions, it starts with needing to install nuget.exe; that will make the nuget package push work, as well.
Add to the prerequisites part of the doc the need to download and install nuget.exe, and then to put it on the environment path.&lt;/p&gt;

&lt;p&gt;today, that is 32-bit V4.9.4, instal to programfiles(86)/nuget&lt;/p&gt;

&lt;p&gt;The follow Telerik instructions on how to add the telerik private feed to visual studio&lt;/p&gt;</content><author><name></name></author><category term="technical" /><category term="Ace" /><category term="AceCommander" /><summary type="html">The MySQL a is \called AceCommander, it holds userauth user tables</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 02</title><link href="https://billhertzing.github.io/technical/2021/04/16/how-i-setup-this-github-pages-blog-site-part-02/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 02" /><published>2021-04-16T15:09:57-06:00</published><updated>2021-04-16T15:09:57-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/how-i-setup-this-github-pages-blog-site-part-02</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/how-i-setup-this-github-pages-blog-site-part-02/">&lt;p&gt;Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series &lt;a href=&quot;TBD&quot;&gt;How I setup this GitHub Pages Blog&lt;/a&gt;, you should probably give it a quick review, to become familiar with how it all started.&lt;/p&gt;

&lt;p&gt;The next steps will be to implement the features specified in &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/2&quot;&gt;Milestone 0.02.0&lt;/a&gt;.  I like to plan my development efforts using GitHub Milestones. They are quick and easy to create and maintain, especially for tiny sites like mine that have no collaborators. Of course I don’t &lt;strong&gt;&lt;em&gt;have&lt;/em&gt;&lt;/strong&gt; to create Milestones, but I’ve found that there is always “feature creep” in releases if I don’t take the time to write down what is going into the next release, and what’s on tap for some future release. This helps me keep to the release cadence I want, and ensures these posts corresponding to each release don’t get too big!&lt;/p&gt;

&lt;p&gt;This release is mostly adding files that are common to a good repository, and then adding the ability to add comments to a post.&lt;/p&gt;

&lt;p&gt;Lets move on!&lt;/p&gt;

&lt;h2 id=&quot;create-_drafts-folder&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; folder&lt;/h2&gt;

&lt;p&gt;Being able to work on a draft of a post, and not have that draft appear on the production site, is important during development. Jekyll has built in support for drafts, using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; folder. Simply create the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; under the root of your repository.&lt;/p&gt;

&lt;h2 id=&quot;create-a-draft-post&quot;&gt;Create a draft post&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how-i-setup-this-github-pages-blog-site-part-02.md&lt;/code&gt; under the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory. Do not add the &lt;em&gt;YYYY-MM-DD&lt;/em&gt; prefix to this file.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter text to the file. Modify it as appropriate for your site. &lt;em&gt;Note&lt;/em&gt; There is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date:&lt;/code&gt; key in a draft post. Jekyll will insert that key when you promote the post out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; and publish it for the first time.&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: How I setup this GitHub Pages Blog, Part 2
 tags: Jekyll &quot;GitHubPages&quot;
 layout: post
 description: Second steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;
 Add text you want to see in your second post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and commit.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;. Jekyll will build the drafts with the current date so they will be easy to find at the top of your (chronologically sorted) post listings.&lt;/li&gt;
  &lt;li&gt;Validate your new post exists locally.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;community-health-files&quot;&gt;Community Health files&lt;/h2&gt;

&lt;p&gt;GitHub encourages authors to ensure their repositories are setup for building communities for healthy and effective collaboration. Details are at &lt;a href=&quot;https://docs.github.com/en/communities&quot;&gt;Building communities&lt;/a&gt;. The first guideline is &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions&quot;&gt;Setting up your project for healthy contributions&lt;/a&gt;. Among other things, it recommends &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project&quot;&gt;Adding a code of conduct to your project&lt;/a&gt; and &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors&quot;&gt;Setting guidelines for repository contributors&lt;/a&gt;. But what if you have more than one repository? Do you have to duplicate these files in every one? No, you can setup defaults for these files, and have every repository inherit from your default. Details are in &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&quot;&gt;Creating a default community health file&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-github-repo&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repo&lt;/h3&gt;

&lt;p&gt;I’m not going to repeat here the instructions you can find on the GitHub doc above. But at this point in the development of this site, I created the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; public repository under my username, and added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODE_OF_CONDUCT.md&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; files to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repo. ToDo: insert jpg&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; I changed my GitHub theme to Dark, so the screen shots of GitHub are going to look different from Part 1 of this series!&lt;/p&gt;

&lt;p&gt;Now go look at your site’s repository in GitHub, drill down into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insights&lt;/code&gt;, and then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Community&lt;/code&gt; tab, and you can see that both of these files are now present in this repository’s Community Profile! ToDo: insert jpg&lt;/p&gt;

&lt;h3 id=&quot;how-to-link-to-these-default-files&quot;&gt;How to link to these default files&lt;/h3&gt;

&lt;p&gt;Lets add links to both of these files, both here, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt; template. From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insights-&amp;gt;Community&lt;/code&gt; page, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code of conduct&lt;/code&gt; link, the in the browser’s address bar, copy the URL showing. Mine looks like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&lt;/code&gt;. Create a markdown link to this as follows:&lt;/p&gt;

&lt;notextile&gt;[Code of Conduct](https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md)&lt;/notextile&gt;
&lt;p&gt;produces &lt;a href=&quot;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt;.&lt;/p&gt;

&lt;notextile&gt;[CONTRIBUTING](https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md)&lt;/notextile&gt;
&lt;p&gt;produces
&lt;a href=&quot;https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-readmemd&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt; file at the root of a repo will get displayed to visitors on the repo’s landing page. Here are some posts with great ideas&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://meakaakka.medium.com/a-beginners-guide-to-writing-a-kickass-readme-7ac01da88ab3#:~:text=A%20great%20README%20file%20helps,basic%20introduction%20to%20the%20software.&quot;&gt;A Beginners Guide to writing a Kickass README&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/PurpleBooth/109311bb0361f32d87a2&quot;&gt;A template to make good README.md · GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matiassingers/awesome-readme&quot;&gt;A curated list of awesome READMEs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;chetanraj/awesome-github-badges&quot;&gt;awesome-github-badges&lt;/a&gt; - add some badges to the readme&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aleen42/badges&quot;&gt;badges&lt;/a&gt; - To make badges more standard and acceptable.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;lukas-h/license-badges.md&quot;&gt;Markdown License badges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; If you want to use a badge that refers to any of the repo’s Community Health files (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODE OF CONDUCT&lt;/code&gt; AND if you want to use &lt;strong&gt;&lt;em&gt;default&lt;/em&gt;&lt;/strong&gt; Community Health files, then specify the repo &lt;em&gt;GitHubUserName&lt;/em&gt;/.github in the badge’s repo field.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Edit the file, and add whatever content you think appropriate&lt;/li&gt;
  &lt;li&gt;Commit and push to the GitHub repo.&lt;/li&gt;
  &lt;li&gt;Validate your ReadMe file now displays on the GitHub repo’s landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-changelogmd&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Having a ChangeLog for your blog site will help user’s understand changes you  have applied&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://keepachangelog.com/en/1.0.0/&quot;&gt;keep a changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to automate the ChangeLog to a degree, it is important that the commits in the repo have meaningful commit messages that are machine readable. Here are some examples of commit messages and tools that can read them.
&lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt; also has a large bibliography of tooling around Conventional Commits
&lt;a href=&quot;https://github.com/marketplace/actions/universal-changelog-generator&quot;&gt;Universal Changelog Generator action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you want to automate the generation of the ChangeLog, you need to write your commits in a standard format&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hve a feature identified in the Far Future Milestone for automation in this area, so I’ll start using commits in the style specified by &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt;. According to that document, commits I’ve already made will just be ignored by the automated tooling, and the ChangeLog can be manually edited as I have done for the initial ChangeLog I create below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Edit the file, and add content appropriate for the site’s “Birthday”, and Release V1.01.1&lt;/li&gt;
  &lt;li&gt;Commit and push to the GitHub repo.&lt;/li&gt;
  &lt;li&gt;Validate your ChangeLog file now displays on the GitHub repo’s landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-commit-message-template&quot;&gt;Add Commit Message Template&lt;/h2&gt;

&lt;p&gt;To make it easier to create commit messages that follow a standard template, add a git commit message template to the repository and configure git to use that file. The standardized commit message template I chose for my initial version of the template can be found at &lt;a href=&quot;https://dev.to/timmybytes/keeping-git-commit-messages-consistent-with-a-custom-template-1jkm&quot;&gt;Keeping Git Commit Messages Consistent with a Custom Template&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git.commit.template.txt&lt;/code&gt; in the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file, and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;    ToDo: Add final text just before release
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global commit.template .github/git.commit.template.txt&lt;/code&gt; to add the template to your global git config.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global core.editor &quot;code --wait&quot;&lt;/code&gt; to add VSC as git’s editor of choice. See also &lt;a href=&quot;https://stackoverflow.com/questions/30149132/multiline-git-commit-message-in-vscode/54139152#54139152&quot;&gt;MarredCheese’s answer to StackOverflow question&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that VSC is the editor for the commit message which comes up pre-populated with the template’s text.&lt;/li&gt;
  &lt;li&gt;Click on the SCM icon in the sidebar. Validate that what was the single line commit message text box at the top has expanded to contain the non-comment template lines, and blank lines wherever there was a comment. Hmmm… Wonder how we can have only non-comment lines from the template in the SCM editor’s commit text box, yet have the full template text at just a keystroke away if needed for reference  ToDo: Figure that out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When doing design work on a feature, it saves some time if you edit the template to add a reference to the feature specification or the release milestone that calls out the feature under development. Likewise if you are working on a post, and doing the edit/build/view dance, editing the template may save you some time and keystrokes.&lt;/p&gt;

&lt;h2 id=&quot;add-bug-report-and-feature-request-issue-templates&quot;&gt;Add Bug Report and Feature Request Issue Templates&lt;/h2&gt;

&lt;p&gt;Bug Report and Feature Request Issue Templates will make it easier for contributors to create issues for bug reports and feature requests. Standardizing on formats for these items early in the site’s development will make it easier for automation in the future. These files can also be part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Community Health Files&lt;/code&gt;, and default versions of these can be placed in the user’s or organization’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repository and shared amongst all of a GitHub user’s or organization’s repositories.&lt;/p&gt;

&lt;p&gt;Details on how to use the issue templates from the Community Health repo are at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository&quot;&gt;Configuring issue templates for your repository&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;[Configuring the template chooser]- [https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser]&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&quot;&gt;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates&quot;&gt;About issue and pull request templates&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Use the tool of your choice to navigate to the root of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repository that was created above in [#Create&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;repo].&lt;/li&gt;
  &lt;li&gt;Create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; in the root of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; (yes, it &lt;strong&gt;&lt;em&gt;is&lt;/em&gt;&lt;/strong&gt; confusing).&lt;/li&gt;
  &lt;li&gt;Create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt; in the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; in root of the `.github1 repository.&lt;/li&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bug_Report_Template.md&lt;/code&gt; in the new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ToDo: Add final text just before release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Feature_Request_Template.md&lt;/code&gt; in the new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ToDo: Add final text just before release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Commit the change made to .github repository and sync the changes with the remote.&lt;/li&gt;
  &lt;li&gt;Validate the new templates are available in the static site repository. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-the-jekyll-timeago-plugin&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin&lt;/h2&gt;

&lt;p&gt;One of the main reasons that I am not using GitHub Pages built-in Jekyll site generator is so that I can use the entire ecosystem of Jekyll plugins. Github limits you to a white-list of approved plugins. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; is a nice simple non-approved plugin that adds simple functionality to calculate how long ago a date is. To ensure we can use non-approved plugins, lets start with this one.&lt;/p&gt;

&lt;h3 id=&quot;install-the-jekyll-timeago-plugin-locally&quot;&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin locally&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-timeago&lt;/code&gt; in the Powershell window (at the base of the repo).  Make a note of the version installed, that will be used in the next step, to the right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem ...&lt;/code&gt; line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-the-jekyll-timeago-plugin-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt;. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-the-jekyll-timeago-plugin-to-the-_configyml-file&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jekyll-timeago&lt;/code&gt; to the plugins key. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-timeago&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;The next line looks like this in the post’s .md&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;page publication date was {{ page.date }}, which was {{ page.date&lt;/td&gt;
      &lt;td&gt;timeago }}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Which renders as:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;page publication date was 2021-04-16 15:09:57 -0600, which was yesterday&lt;/p&gt;

&lt;h2 id=&quot;put-the-most-recent-releases-tag-semantic-version-in-the-footer-template&quot;&gt;Put the most recent releases tag Semantic Version in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer&lt;/code&gt; template&lt;/h2&gt;

&lt;p&gt;The plugin &lt;a href=&quot;https://github.com/rob-murray/jekyll-version-plugin&quot;&gt;jekyll-version-plugin&lt;/a&gt; will get the latest releases tag from the local git repository.&lt;/p&gt;

&lt;h3 id=&quot;install-the-jekyll-version-plugin-plugin-locally&quot;&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-version-plugin&lt;/code&gt; plugin locally&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-version-plugin&lt;/code&gt; in the Powershell window (at the base of the repo). Make a note of the version installed, that will be used in the next step, to the right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem ...&lt;/code&gt; line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-the-jekyll-version-plugin-plugin-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-version-plugin&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-version-plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt;. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll_version_plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-the-jekyll-version-plugin-plugin-to-the-_configyml-file&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-version-plugin&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jekyll-version-plugin&lt;/code&gt; to the plugins key. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-timeago&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll_version_plugin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;The next line looks like this in this post’s .md&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;project_version returns: {% project_version %}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which renders as:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;project_version returns: releases/0.01.001-13-g1445700&lt;/p&gt;

&lt;h3 id=&quot;parse-the-full-tag-into-a-string-suitable-for-display&quot;&gt;Parse the full tag into a string suitable for display&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The next two lines looks like this in this post’s .md&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{% capture long_tag_name %}{% project_version %}{% endcapture %}&lt;/p&gt;

&lt;p&gt;latest release tag: {{ long_tag_name | remove: ‘releases/’ | split: ‘-‘ | first | prepend: ‘V’ }}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which renders as:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;latest release tag: V0.01.001&lt;/p&gt;

&lt;h3 id=&quot;place-the-results-in-the-footerhtml-file&quot;&gt;Place the results in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;Add the following somewhere within the div &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;footer-col-wrapper&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-MarkDown&quot;&gt;   &amp;lt;div class=&quot;footer-col&quot;&amp;gt;
     &amp;lt;p&amp;gt;Site Release {% capture long_tag_name %}{% project_version %}{% endcapture %}{{ long_tag_name | remove: &apos;releases/&apos; | split: &apos;-&apos; | first | prepend: &quot;V&quot; }}&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Save the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the Site release version information appears at the bottom of each page and each post, including the landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-jekyll-include-cache-plugin&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin&lt;/h2&gt;

&lt;p&gt;Build times for the static site locally can be significantly improved over the out-of-the-box experience. Details of one such approach can be found at &lt;a href=&quot;https://forestry.io/blog/how-i-reduced-my-jekyll-build-time-by-61/&quot;&gt;How I reduced my Jekyll build time by 61%&lt;/a&gt;. This early in the creation of this site, I don’t expect to see a whopping improvement, but getting the speedup steps done now should keep me from writing incompatible code in future releases.&lt;/p&gt;

&lt;h3 id=&quot;benchmark-the-current-build-time&quot;&gt;Benchmark the current build time&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build --profile&lt;/code&gt; to use Jekyll’s built in profiler. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-`Text&quot;&gt;  | PHASE      |   TIME |
  +------------+--------+
  | RESET      | 0.0001 |
  | READ       | 0.0900 |
  | GENERATE   | 0.0043 |
  | RENDER     | 1.1278 |
  | CLEANUP    | 0.0105 |
  | WRITE      | 0.0184 |
  +------------+--------+
  | TOTAL TIME | 1.2511 |
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure-command { bundle exec jekyll build  | out-host }&lt;/code&gt; to use Powershell’s Measure-Command applet. THis only works when building on Windows. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    TotalSeconds      : 4.1939049
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Powershell’s measurement includes all the overhead time to invoke Ruby and to clean up after the generation. This number is much closer to the “clock-time” I experience when generating the site.&lt;/p&gt;

&lt;h3 id=&quot;install-the-jekyll-include-cache-plugin-locally&quot;&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin locally&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-include-cache&lt;/code&gt; in the Powershell window (at the base of the repo). Make a note of the version installed, that will be used in the next step, to the right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem ...&lt;/code&gt; line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-the-jekyll-include-cache-plugin-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-include-cache&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt;. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll_version_plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-include-cache&quot;, &quot;~&amp;gt; 0.2.1&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-the-jekyll-include-cache-plugin-to-the-_configyml-file&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jekyll-include-cache&lt;/code&gt; to the plugins key. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-timeago&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll_version_plugin&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-include-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;benchmark-the-improved-build-time&quot;&gt;Benchmark the improved build time&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build --profile&lt;/code&gt; to use Jekyll’s built in profiler. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-`Text&quot;&gt;  | PHASE      |   TIME |
  +------------+--------+
  | RESET      | 0.0001 |
  | READ       | 0.0943 |
  | GENERATE   | 0.0044 |
  | RENDER     | 1.1449 |
  | CLEANUP    | 0.0109 |
  | WRITE      | 0.0181 |
  +------------+--------+
  | TOTAL TIME | 1.2727 |
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure-command { bundle exec jekyll build  | out-host }&lt;/code&gt; to use Powershell’s Measure-Command applet. This only works when building on Windows. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    TotalSeconds      : 4.2954848
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HaHaHaHa - adding the cache increased the build time infinitesimally! But as any performance tester will tell you, it is important to run timing tests like these hundreds of times, throw out outliers, and take the average of the results. I’m not going to do that yet in the development of this site, but I’ll add a task to do this into the later Milestones of the project.&lt;/p&gt;

&lt;h2 id=&quot;add-draft-post-case-for-a-non-anonymous-internet-part-01-to-political-category&quot;&gt;Add draft post &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case for a non-anonymous Internet, Part 01&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;political&lt;/code&gt; category&lt;/h2&gt;

&lt;p&gt;If you are not planning to implement post categories, you can ignore the following two sections. If you want catagories, follow along with these instructions, and modify them to fit your specific needs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a subdirectory below the repo root named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;political&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a new file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory (under the repo root) called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case for a non-anonymous Internet, Part 01.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to the draft post:&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: Case for a non-anonymous Internet, Part 01
 tags: &quot;Non-Anonymous Internet&quot;
 layout: post
 description: Justification to not allow anonymous comments on my site and posts.
 category: political
&lt;span class=&quot;p&quot;&gt; ---
    &lt;/span&gt;
 ## TL DR
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and commit the file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that the post appears on the home (landing) page, and the contents of the post appear as expected.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-draft-post-welcome-to-the-personal-section-of-my-site-to-personal-category&quot;&gt;Add draft post &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to the Personal section of my site&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; category&lt;/h2&gt;

&lt;p&gt;If you are not planning to implement post categories, you can ignore the following two sections. If you want catagories, follow along with these instructions, and modify them to fit your specific needs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a subdirectory below the repo root named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a new file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory (under the repo root) called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to the Personal section of my site.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to the draft post:&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: Welcome to the Personal section of my site
 tags: Introduction Personal
 layout: post
 description: Explanation of how to register for and use the personal section of this site.
 category: personal
&lt;span class=&quot;p&quot;&gt; ---
    &lt;/span&gt;
 ## TL DR
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and commit the file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that the post appears on the home (landing) page, and the contents of the post appear as expected.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;making-the-second-release-of-the-site&quot;&gt;Making the second release of the site&lt;/h2&gt;

&lt;p&gt;I’m happy now with the enhancements I’ve made to the blogging site. It’s time to wrap up this release. I’m going to start a checklist for “release” chores, and eventually will automate as much as I feel is worth putting in the time to do.&lt;/p&gt;

&lt;h3 id=&quot;site-minor-release-checklist&quot;&gt;Site Minor Release checklist&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch builds cleanly.&lt;/li&gt;
  &lt;li&gt;Review any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warnings&lt;/code&gt; that appear in VSC’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problems&lt;/code&gt;. pane. Clean up the underlying issue, or decide they are OK to live with for this release. Commit any changes made during this step to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and push to the remote.&lt;/li&gt;
  &lt;li&gt;Update the ChangeLog.md. I simply cleanup the Milestone text and add it to ChangeLog. I’ll get around to automating this from the Git commit messages in a future release. Commit the ChangeLog.md and push it.&lt;/li&gt;
  &lt;li&gt;Publish the draft Part 02 post into _technical&lt;/li&gt;
  &lt;li&gt;Publish the draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case for a non-anonymous Internet, Part 01&lt;/code&gt; post into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;Publish the draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to the Personal section of my site&lt;/code&gt; post into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; subdirectory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll make a final commit of my outstanding work, then I’ll make another commit and add a Release tag. For now, the release tags will follow the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releases/\d+\.\d+\.\d+&lt;/code&gt;. I prefer to use a full Git Annotated Tag. Details on Git Tagging can be found in &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging.&quot;&gt;Git Basics - Tagging&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have committed all the changes you want for Release 0.01.0,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/0.01.000 -m &quot;Initial release of Bill&apos;s Blog&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --tags&lt;/code&gt; to push the release tag to GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This concludes the first edition of this post. In all my career, I’ve never encountered a significant document that didn’t require revisions, and I expect this will, as well. During the course of developing this site, I plan to incorporate a revision tracking system, so (eventually), you should be able to see all the revisions I’ve done to the post, and a change log. However, my idea is that I’ll only publish post revisions when I do a site release. I may increment the third part of the site version when I publish a revision to a post. I think that is in keeping with the spirit of Semantic Versioning, since ‘fixing’ a published post would be somewhat equivalent to fixing a bug in a released software package.&lt;/p&gt;

&lt;p&gt;There are some Milestones defined in this repository’s Issues tab, which detail what I hope to accomplish in the next four revisions. Feel free to look them over if you want to know what’s coming in the next three parts to this series.&lt;/p&gt;

&lt;p&gt;Comments for posts should be enabled soon, until then, please use the Issues on this repository to communicate with me, if you find errors or have questions.&lt;/p&gt;

&lt;p&gt;Thanks for staying to the end :-).&lt;/p&gt;

&lt;p&gt;Bill Hertzing, April 8, 2021&lt;/p&gt;

&lt;h2 id=&quot;add-disqus-comments-to-posts&quot;&gt;Add Disqus comments to posts&lt;/h2&gt;

&lt;p&gt;There is a lot of opinions on the Internet related to “what is the best way to add a comments section to posts”. I decided to use the Disqus approach, primarily because I did not want to have to spend time moderating comments to remove spam. Most people who weighed in on this topic agreed that Disqus had a very good track record in eliminating spam. As of this date, 2021-04-13, Disqus will provide the basic service (no ads) for free if I self-identify as a personal or OSS site. I have registered today, and will send a note to their support tomorrow. More on this later.&lt;/p&gt;

&lt;h3 id=&quot;register-for-an-account-at-disqus&quot;&gt;Register for an account at Disqus&lt;/h3&gt;

&lt;p&gt;Go through the Disqus registration procedure for a site.&lt;/p&gt;

&lt;h3 id=&quot;enable-support-for-disqus-in-the-minimal-mistakes-theme&quot;&gt;Enable support for Disqus in the Minimal Mistakes theme&lt;/h3&gt;

&lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments: true&lt;/code&gt;  as a default for posts in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file to enable comments for all posts. Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments:&lt;/code&gt; key to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, and add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt; as the value for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider&lt;/code&gt; subkey. Also under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt; subkey, add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname:&lt;/code&gt; subkey,  and set its value to  the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname&lt;/code&gt;, you entered when registering for your Disqus account.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# _posts&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;posts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;disqus&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shortname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;BillHertzing&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="technical" /><category term="Jekyll" /><category term="&quot;GitHubPages&quot;" /><summary type="html">Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series How I setup this GitHub Pages Blog, you should probably give it a quick review, to become familiar with how it all started.</summary></entry><entry><title type="html">Powershell To Convert Nest Report To Excel Pivot Table</title><link href="https://billhertzing.github.io/technical/2021/04/16/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/" rel="alternate" type="text/html" title="Powershell To Convert Nest Report To Excel Pivot Table" /><published>2021-04-16T10:18:36-06:00</published><updated>2021-04-16T10:18:36-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Powershell-to-convert-Nest-report-to-Excel-Pivot-table</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/">Notes for PowerShell SLC meetup
 1) List of cool PowerShell projects folks wold like to work on
 1) signup for one, or more, projects
 1) Pair or team programming work for 1 month and share with meetup group following month
 1) Use GitHub, OSS, MIT license for the 
 1) Some kind of coding collaboration tool? and/or gitter room? or slack channel? that everyone can participate in
 1) Project list
    1) PowerShell in DevOps
	  1) tokenize .razor files
	  1) run a PowerShell scriptblock against all files matching a filename pattern
    1) PowerShell and creating SVG graphs
	  1) Read a source (file (local, remote, or UNC); database;)
	  1) Provide a scriptblock to transform the raw data into a structured hierarchy
	  1) Provide a scriptblock to transform the structured hierarchy into a digraph (a sctructure that describes a graph)
	  1) Provide a set of output providers (write to file (local, remote, UNC); database
	  1) PowerShell option to send the digraph to PlantUML. which can create SVG drawing of the graph 
	1) PowerShell templates
	  1) using Plaster to scaffold a new PowerShell project
	  1) automatically setting up the Pester test runner in a new PowerShell project
	  1) automatically setting up Jenkins to create a CI/CD pipeline for a new PowerShell project</content><author><name></name></author><category term="technical" /><category term="Powershell" /><category term="Nest" /><category term="RegEx" /><category term="PIvotTable" /><category term="Excel" /><summary type="html">Notes for PowerShell SLC meetup 1) List of cool PowerShell projects folks wold like to work on 1) signup for one, or more, projects 1) Pair or team programming work for 1 month and share with meetup group following month 1) Use GitHub, OSS, MIT license for the 1) Some kind of coding collaboration tool? and/or gitter room? or slack channel? that everyone can participate in 1) Project list 1) PowerShell in DevOps 1) tokenize .razor files 1) run a PowerShell scriptblock against all files matching a filename pattern 1) PowerShell and creating SVG graphs 1) Read a source (file (local, remote, or UNC); database;) 1) Provide a scriptblock to transform the raw data into a structured hierarchy 1) Provide a scriptblock to transform the structured hierarchy into a digraph (a sctructure that describes a graph) 1) Provide a set of output providers (write to file (local, remote, UNC); database 1) PowerShell option to send the digraph to PlantUML. which can create SVG drawing of the graph 1) PowerShell templates 1) using Plaster to scaffold a new PowerShell project 1) automatically setting up the Pester test runner in a new PowerShell project 1) automatically setting up Jenkins to create a CI/CD pipeline for a new PowerShell project</summary></entry><entry><title type="html">Powershell Snippets</title><link href="https://billhertzing.github.io/technical/2021/04/16/Powershell-snippets/" rel="alternate" type="text/html" title="Powershell Snippets" /><published>2021-04-16T10:16:21-06:00</published><updated>2021-04-16T10:16:21-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Powershell-snippets</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Powershell-snippets/">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Get-ChildItem -File -r&lt;/td&gt;
      &lt;td&gt;where {$_.fullname -match “cshtml”}&lt;/td&gt;
      &lt;td&gt;foreach { git mv ($&lt;em&gt;.fullname) ($&lt;/em&gt;.fullname –replace “cshtml”,”razor”) }&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Get-ChildItem -Dir -r&lt;/td&gt;
      &lt;td&gt;where {$_.fullname -match “obj&lt;/td&gt;
      &lt;td&gt;bin”}&lt;/td&gt;
      &lt;td&gt;foreach {$_.fullname}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="technical" /><category term="Powershell" /><summary type="html">Get-ChildItem -File -r where {$_.fullname -match “cshtml”} foreach { git mv ($.fullname) ($.fullname –replace “cshtml”,”razor”) }</summary></entry><entry><title type="html">Client Side Blazor Demos</title><link href="https://billhertzing.github.io/technical/2021/04/16/Client-side-Blazor-Demos/" rel="alternate" type="text/html" title="Client Side Blazor Demos" /><published>2021-04-16T10:14:03-06:00</published><updated>2021-04-16T10:14:03-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Client-side-Blazor-Demos</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Client-side-Blazor-Demos/">&lt;p&gt;Until last week, my main app (and my Blazor demos), used ServiceStack middleware hosted in .Net 4.7.1 using the Windows HTTPListener in a Console App. I spent the last week moving the web servers in my demos 06 and 07 to ASP.NET Core Kestrel self-hosted WITHOUT IIS integration. Yesterday and the day before, I got demo06 server working with V3.0P4 SS Middleware in Kestrel WITH IIS intergation, and demo07 working with SS in Kestrel WITHOUT IIS integration.&lt;/p&gt;

&lt;p&gt;Happy to report that one of my demos and my main app have both been upgraded to V3.0 Preview 5. There are (at least one) thing still broken in P5 that were broke in P4;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Issue in Preview 4 &amp;amp; 5  requires the &quot;route&quot; to be a complete URL
var uriBuilder = new UriBuilder(&quot;http://localhost:21200/BaseServicesInitialization&quot;);
InitializationResponse = await HttpClient.PostJsonAsync&amp;lt;InitializationResponse&amp;gt;(uriBuilder.Uri.ToString(),initializationRequest);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But that will make me take the time to figure out how to configure both the host and the port at runtime instead of being lazy and hardcoding them as I’ve done so far…
Lots more testing to go do, now…&lt;/p&gt;

&lt;p&gt;here’s a gist with my program.cs file, and how I eventually got it to work in P5
 https://gist.github.com/BillHertzing/d0a27b2dcdf29ffce1b3f9d1e5413497
 Thats the first public gist I’ve shared, please let me know if you have issues seeing it.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;LaunchSettings.json : only applicable to a ASP.NET Core console host (or service) running a web server&lt;/dt&gt;
  &lt;dd&gt;should not be under any GUI projects&lt;/dd&gt;
  &lt;dd&gt;should be under all Server projects&lt;/dd&gt;
  &lt;dd&gt;should define profiles for the Development, Testing,Staging, Production environments. Testing is a custom environments&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;The “applicationUrl”: “http://localhost:21250/” found in LaunchSettings.json must match the current “ListenOn” that the web server is running, or else it will not launch a browser. In a launchsettings.json Profile, it associates a project’s executable environment with an endpoint the application hosted in the web server will respond on. Together they provide a channel that the developer can use. Visual Studio uses it to determine if it will launch a browser.&lt;/p&gt;

&lt;p&gt;Top level ReadMe&lt;/p&gt;

&lt;h2 id=&quot;demo01&quot;&gt;Demo01&lt;/h2&gt;

&lt;p&gt;Starting with the basics. Introducing the development environment / the development tools. The most basic of the Demos: a GUI and a WebServer; Introducing the Blazor GUI running in/on WASM in the browsers. Introducing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page. Introducing logging in the GUI via Microsoft.Extensions.Logging and the Blazor.Logging.Extensions. Introducing the WebServer; in Demo01, a Framework 4.7 ConsoleApp running a default WebHost over HTTP.Sys. Introducing the ServiceStack Middleware host, using ServiceStack logging and NLog. Introducing Sentinel, a UDP log capture and viewing rool. Explanation of how the WebServer servers the static files that make up the Blazor GUI. Introduction to the basic debugging tools for the GUI and for the WebServer.&lt;/p&gt;

&lt;h2 id=&quot;demo02&quot;&gt;Demo02&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-blazor-basics&quot;&gt;The GUI focuses on Blazor basics,&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a CodeBehind page &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor.cs&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page.&lt;/li&gt;
  &lt;li&gt;The GUI adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; to the CodeBehind page and adds its visual display to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; page.&lt;/li&gt;
  &lt;li&gt;The GUI adds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.razor.cs&lt;/code&gt; the visual representation and the c# code to support a button called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI adds an implementation of a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; handler which increments the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Discussions on the transient nature of data in the browser.&lt;/li&gt;
  &lt;li&gt;Styling focuses on the site.css file
    &lt;ul&gt;
      &lt;li&gt;The site.css file adds a background color for the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; page.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-the-integratediisinprocess-webhost&quot;&gt;The Server focuses on the IntegratedIISInProcess WebHost&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to .Net Core V2.1 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how the WebServer serves the static files that make up the Blazor GUI.&lt;/li&gt;
  &lt;li&gt;launchsettings.json is introduced, and contains settings for running /debugging the  IntegratedIISInProcess WebHost.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware is hosted in the IntegratedIISInProcess WebHost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling&quot;&gt;The build / debug tooling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on how the Server is started, both with and without debugging, from Visual Studio and from the CLI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo02-readme&quot;&gt;details for the Demo02 readme&lt;/h3&gt;
&lt;p&gt;The Server moves the SSApp middleware into an IntegratedIISInProcess WebHost running under .Net Core V2.1.
A static method for the creation of an IWebHostBuilder configured to create an IntegratedIISInProcess WebHost is introduced.
Within the static method, the extension method WebHost.CreateDefaultBuilder() is used to return an IWebHost pre-configured with the defaults necessary to run as an IntegratedIISInProcess WebHost.
launchSettings.json refers to IISExpress
The GUI ‘s one page gets a local variable and a button to increment it. Discussions of persistence of data in a browser-hosted GUI. The site.css file is modified to produce a background effect. The Server appears, a .Net Core 2.1 WebHost running all the defaults (IntegratedIISInProcess). This replaces the ConsoleApp of Demo01.  launchsettings.json is introduced, and contains settings for running the  IntegratedIISInProcess WebHost. The Blazor GUI project introduces a button, and the button’s OnClick handler&lt;/p&gt;

&lt;h2 id=&quot;demo03---gui-gets-browser-local-storage-server-moves-to-net-core-v22-and-kestrel-webhost&quot;&gt;Demo03 - GUI gets browser-local storage, Server moves to .Net Core V2.2 and Kestrel WebHost&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-browser-local-storage&quot;&gt;The GUI focuses on browser-local storage&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds the third-party Blazor library &lt;a href=&quot;&quot;&gt;Blazored.LocalStorage&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI uses the synchronous interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blazored.Localstorage&lt;/code&gt; persist the value of the page-local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via that property’s getter and setter.&lt;/li&gt;
  &lt;li&gt;Styling focuses on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.css&lt;/code&gt; file is migrated to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;The background color of  the Body tag is modified.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-the-kestrel-webhost&quot;&gt;The Server focuses on the Kestrel WebHost&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to .Net Core V2.2 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds a static method for the creation of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IWebHostBuilder&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;launchsettings.json adds a section to support launching the Kestrel-based Server.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware is hosted in the Kestrel WebHost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on-adding-support-for-sccs-files&quot;&gt;The build / debug tooling focuses on adding support for .sccs files&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Visual Studio build tooling adds the VSIX extension &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebCompiler&quot;&gt;Web Compiler&lt;/a&gt;. Visual Studio is configured to compile any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sccs&lt;/code&gt; file into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.css&lt;/code&gt; file and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.min.css&lt;/code&gt; file, both of which are copied to the GUI’s ContentRoot folder during build / publish..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo03-readme&quot;&gt;details for the Demo03 readme&lt;/h3&gt;
&lt;p&gt;A site.sccs file, and tools to compile the site.sccs file to the site.css file, are introduced.
The server project targets Net Core V2.2. A KestrelAlone WebHost is introduced.
The site-wide site.sccs file is added to the wwwroot/css directory. The contents of the current site.css is copied into the new site.scss file for the GUI.
The GUI references the third-party Blazor library Blazored.LocalStorage.
The synchronous interface to Blazored.Localstorage is used to persist the page-local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via that property’s getter and setter.
The server moves the SSApp middleware into a KestreAlone WebHost running under .Net Core V2.2.
A static method for the creation of an IWebHostBuilder configured to create a KestreAlone WebHost is introduced.
Within the static method,  a new WebHost is configured with no defaults by new()ing an instance of the WebHostBuilder class then applying the extension method .AddKestrel() and others.
 launchsettings.json are expanded to include settings for KestrelOnly
The GUI’s local variable takes on persistence in browser-local storage using &lt;a href=&quot;&quot;&gt;Blazored.LocalStorage&lt;/a&gt; by &lt;a href=&quot;&quot;&gt;Chris Sainty&lt;/a&gt;.  Mads Kristensen  Web Compiler is installed to Visual Studio, the wwwroot/site.css is migrated to site.scss, and the build tools extended to process .scss files. The Server targets .Net Core 2.2. The WebHost in this Demo is Kestrel (alone).  launchsettings.json are expanded to include settings for KestrelOnly&lt;/p&gt;

&lt;h2 id=&quot;demo04---gui-adds-visual-attributes-and-async-event-handlers--server-get-environment-variables-and-a-selectable-webhost&quot;&gt;Demo04 - GUI adds visual attributes and async event handlers,  Server get Environment Variables and a selectable WebHost&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI gets some big changes. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; is placed within a text span &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpan&lt;/code&gt; for styling with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt; page-local property. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt; adds three page-local properties for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;. The button’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; event handler binding becomes async and indirect. The GUI now has two possible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnClick&lt;/code&gt; event handler methods, one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Active&lt;/code&gt; an one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;, with ‘Active’ being the initial handler for the button.&lt;/li&gt;
  &lt;li&gt;Clicking the button, when Active, adds visual modifications to the button and to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt;, changes the event handler to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;, increments the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; via a simulated async operation with a 4 second delay before returning, and then again changes the visual attributes and the event handler of the button back to ‘Active’.&lt;/li&gt;
  &lt;li&gt;Discussions on how async event handlers interact with async Tasks and TaskContinuations.&lt;/li&gt;
  &lt;li&gt;Styling focuses on variables in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.
    &lt;ul&gt;
      &lt;li&gt;The .sccs file adds ….&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-environment-variables-remains-on-net-core-v22&quot;&gt;The Server focuses on Environment Variables, remains on .Net Core V2.2&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Server adds the ability to allow the developer to select either of the two web server hosts, KestrelAlone or IISIntegratedInProcess, to be used when starting the project’s executable.&lt;/li&gt;
  &lt;li&gt;Discussions on Environment variables&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; adds Environment Variables, and uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlazorDemos_WebHostBuilder&lt;/code&gt; to select which WebHost to build.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-&quot;&gt;The build / debug tooling …&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Examples of selecting the WebHost for debugging sessions started from either Visual Studio or the CLI are discussed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details-for-the-demo04-readme&quot;&gt;details for the Demo04 readme&lt;/h3&gt;
&lt;p&gt;Discussions on async event handlers in the context of the UI thread. Making all of the StateChangeEventHandlers into async Action&lt;task&gt; signatures makes it possible to store them en-group in the State object. They can be lambdas, or they can refer to methods belonging to the CodeBehind classes / file. They can be retrieved from the IEnumerable&amp;lt;Func&lt;Task&gt;&amp;gt; collection with a LINQ query.  Launchsettings.json are introduced to allow the developer to select either of the two static WebHostBuilders when starting a debugging session.
New in this Demonstration are&lt;/Task&gt;&lt;/task&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;a second entry in the launchSettings.json Profiles list&lt;/li&gt;
  &lt;li&gt;environment variables introduced into the individual entries of the launchSettings.json Profiles list&lt;/li&gt;
  &lt;li&gt;How to read environment variables before the web host is created so that the program can decide what kind of a web host to create&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;demo05---gui-gets-a-timer-and-state-server-gets-net-core-v30-environment-and-environment-aware-features&quot;&gt;Demo05 - GUI gets a Timer, and State, Server gets .Net Core V3.0, Environment and environment-aware features.&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-1&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on various GUI State approaches&lt;/li&gt;
  &lt;li&gt;The GUI adds a State class to reduce the repetitive boilerplate needed for c# property representation of visual and action attributes of the HTML page / elements.&lt;/li&gt;
  &lt;li&gt;The GUI adds a new DI-injected State object and its methods is used to store the Action&lt;Task&gt; methods for the statechange handlers, along with a LINQ-based query to retrieve the correct `MethodToUse`.&lt;/Task&gt;&lt;/li&gt;
  &lt;li&gt;The GUI adds a timer, an animated gif file to represent the timer, and two event handlers for the timer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expired&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogThenIgnore&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The GUI Timer Expired statetransition handler does nothing to any properties bound to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerProperty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt;. The  Expired state program does change the style of the timer gif for a timed delay of 0.5 seconds using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Delay(500)&lt;/code&gt; then changes it back and resets and restarts the timer.&lt;/li&gt;
  &lt;li&gt;The GUI starts using string constants for the class, style, and text properties for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnIntegerPropertyTextSpanStyle&lt;/code&gt; and for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IncrementAnIntegerPropertyButton&lt;/code&gt; button’s visual attributes (for both Active and queuing visual effects).&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-net-core-v30-the-generichost-and-environment&quot;&gt;The Server focuses on .Net Core V3.0., the GenericHost, and environment&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on the .Net Core V3.0 GenericHost and hosting a WebHost within the GenericcHost&lt;/li&gt;
  &lt;li&gt;References to .Net Core V3.0 are added to the .csproj&lt;/li&gt;
  &lt;li&gt;Discussion on the concept of Environment (Production, Staging, Debug, etc) and the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt; environment variable. Discussion on localization of this environment variable, and how to select which WebHost to build/run/use based on the value of this environment variable.&lt;/li&gt;
  &lt;li&gt;The Server adds error pages based on environment, along with ‘Development-environment-only’ features.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; grows to support four runtime choices consisting of two Environment choices and two WebHost choices.&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds&quot;&gt;The build / debug tooling adds&lt;/h3&gt;

&lt;h3 id=&quot;details-for-the-demo05-readme&quot;&gt;details for the Demo05 readme&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Note that having both a button OnClick Active event handler and the TimerExpired Active event handler both “active”, means that the program is multiplexing those two statechange inputs. The program  can be in the midst of responding to one, when the other occurs, which can lead to synchronicity issues. In Demo05, the program is written so that there is no interaction between the two active statechange handlers, hence no need (yet) to synchronize access to state variables from the two statechange handlers. Also note that having an animated gif in the visual display can provide a clue if the main browser UI thread is blocked.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo06---gui-timer-enhancements-enumerations-supportedwebhosts-and-either-kestral-and-integratediisinprocess-in-the-server&quot;&gt;Demo06 - GUI Timer enhancements, Enumerations, SupportedWebHosts, and either Kestral and IntegratedIISInProcess in the Server&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-2&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a button to start/stop the timer, a CSS animation to represent the timer enabled boolean, and event handlers for the button&lt;/li&gt;
  &lt;li&gt;State&lt;/li&gt;
  &lt;li&gt;Styling focuses on CSS Animations and .sccs include files
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds styles for the TimerControl button,&lt;/li&gt;
      &lt;li&gt;The GUI project adds a new .&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sccs&lt;/code&gt; file fragment suitable for including into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;The new `.sccs. file fragment contains a CSS Animation&lt;/li&gt;
      &lt;li&gt;animations is triggered visible-running / invisible-disabled by the expiration of the Timer trigger.&lt;/li&gt;
      &lt;li&gt;Further styling via String.Constants to make the elements visually explanatory as the demo is run through its visual states.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-a-single-static-builder-for-the-generichost-which-incorporates-different-webhostbuilder-configurations-based-on-a-parameter-to-the-method-the-multiple-static-builders-are-removed&quot;&gt;The Server focuses on a single static builder for the GenericHost, which incorporates different webHostBuilder configurations based on a parameter to the method. The multiple static builders are removed.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds an enumeration for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SupportedWebHostBuilders&lt;/code&gt; and validates/parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlazorDemos_WebHostBuilder&lt;/code&gt; environment variable against this enumeration.&lt;/li&gt;
  &lt;li&gt;The Server merges the two static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IWebHostBuilders&lt;/code&gt; into a single parameterized static builder method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSpecificHostBuilder(SupportedWebHostBuilders webHostBuilderToBuild)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A new compilation unit is introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerations.cs&lt;/code&gt;. The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; is made into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial&lt;/code&gt; class, and the new Enumerations.cs also contains a declaration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial Program&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-1&quot;&gt;The build / debug tooling&lt;/h3&gt;

&lt;h1 id=&quot;cut-line-for-version-150&quot;&gt;Cut Line for version 1.5.0&lt;/h1&gt;
&lt;h3 id=&quot;demos-below-this-line-are-still-under-active-development-in-the-various-features-branches-and-the-develop-branch-and-in-the-last-few-cases-the-demo-is-still-completely-tbd&quot;&gt;Demos below this line are still under active development in the various features Branches and the develop branch, and in the last few cases the demo is still completely TBD.&lt;/h3&gt;

&lt;h2 id=&quot;demo07---configuration-part1&quot;&gt;Demo07 - Configuration (Part1)&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-configuration-tbd-when-csb-supports-extensionsconfiguration&quot;&gt;The GUI focuses on Configuration (TBD when CSB supports Extensions.Configuration)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds a new compilation unit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultConfiguration.cs&lt;/code&gt;, which contains the minimal configKeys needed to run the GUI in production&lt;/li&gt;
  &lt;li&gt;A discussion on concurrency if two or more event handlers try to access the same state variable(s)&lt;/li&gt;
  &lt;li&gt;State element properties for data and visual attributes get their setters hooked to NotifyPropertyChange-like and NotifyPropertyChanging-like events&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-creating-a-configurationroot-and-the-microsoftextensionsconfiguration-class&quot;&gt;The Server focuses on creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configurationRoot&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on the concept of Configuration (ConfigurationBuilder, Configuration Providers, and a ConfigurationRoot) is introduce&lt;/li&gt;
  &lt;li&gt;References to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds a new compilation unit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DefaultConfiguration.cs&lt;/code&gt;, which contains the minimal configKeys needed to run the program in production For Demo07 and future, that minimum includes at least the list of URL(s) to ListenTo.&lt;/li&gt;
  &lt;li&gt;The Server adds an initial hostConfigurationRoot created from InMemory, File, and EnvironmentVariable providers.&lt;/li&gt;
  &lt;li&gt;WebHostToBuild and Environment strings from the ConfigurationRoot are validated. If not present, defaults are provided and added to the ConfigurationRoot.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; adds environment variable for the list of URLs that the Server is expected to ListenOn.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--1&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h3 id=&quot;details-for-the-demo07-readme&quot;&gt;details for the Demo07 readme&lt;/h3&gt;
&lt;p&gt;The static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHostBuilder&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateGenericHostBuilder()&lt;/code&gt; grows an additional parameter of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigurationRoot&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostConfigurationRoot&lt;/code&gt; is passed to the method
The Environment value retrieved from the hostConfigurationRoot is used to conditionally apply the Development-only configuration options.
The Development-only configuration options are moved into the static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateGenericHostBuilder()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;demo08---async-tasks-and-waitany-in-the-gui-configuration-part2-in-the-server&quot;&gt;Demo08 - Async Tasks and WaitAny in the GUI, Configuration (Part2) in the Server&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-visual-representation-of-a-simple-async-tasks&quot;&gt;The GUI focuses on visual representation of a simple async task’s&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;lifecycle: initialization, quiescent, dispatch, awaiting, synchronization, task continuation, completion .&lt;/li&gt;
  &lt;li&gt;The GUI adds an async method that returns a Task, a button that dispatches it, and  visual badge for the task’s status and results.&lt;/li&gt;
  &lt;li&gt;Notation and relationships of state triggers, as exemplified by buttons, timers, and tasks, are abstracted as a Linq query.&lt;/li&gt;
  &lt;li&gt;The browser-local storage properties involved with State get a concurrency flag.&lt;/li&gt;
  &lt;li&gt;Additional expansion of Configuration if warrented after Blazor supports it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-project-focuses-on-adding-detailed-environment-specific-configuration-settings&quot;&gt;The Server project focuses on adding &lt;em&gt;Detailed environment-specific configuration settings&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Configuration&lt;/code&gt; to including the concept of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; (Production, Development, Testing, etc.) driving the contents of the ConfigurationRoot&lt;/li&gt;
  &lt;li&gt;The static &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHostBuilder&lt;/code&gt; method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateSpecificGenericHostBuilder()&lt;/code&gt; adds AppConfiguration based on a chain of Configuration providers.&lt;/li&gt;
  &lt;li&gt;The AppConfiguration includes
    &lt;ol&gt;
      &lt;li&gt;CommandLine Arguments&lt;/li&gt;
      &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
      &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
      &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
      &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; …&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--2&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;demo09---logging-in-the-server-and-synchronicity-in-the-gui&quot;&gt;Demo09 - Logging in the Server and synchronicity in the GUI&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-logging-tbd-when-csb-supports-extensionslogging-beyond-just-the-console-logger&quot;&gt;The GUI focuses on logging (TBD when CSB supports Extensions.Logging beyond just the Console Logger)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on how to accomplish Logging from a browser, that is browser-independent and platform-independent.&lt;/li&gt;
  &lt;li&gt;(TBD) The GUI adds Serilog as a logging provider for the CSB GUI application, which writes to the DebugConsole sink, whihc, when run under IISINtegrated, will write-back to the Visual Studio Debug output console&lt;/li&gt;
  &lt;li&gt;The statechange methods for the Timer and for the asynch task are modified so they also increment the IntegerProperty.&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The .sccs file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-microsoftextensionslogging-using-serilog-as-the-logging-extension&quot;&gt;The Server focuses on Microsoft.Extensions.Logging using Serilog as the logging extension&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to Serilog are added, and references to NLog and ServiceStack logging are removed.&lt;/li&gt;
  &lt;li&gt;Log statements that used string expansion are replaced with SeriLog structured logging&lt;/li&gt;
  &lt;li&gt;Discussions on how to add / reference SeriLog as a MEL logger, how to configure logging in a ConfigurationRoot, and how to view logging in a stream database (SEQ).&lt;/li&gt;
  &lt;li&gt;launchsettings.json ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds-seq-for-log-collection-and-viewing-along-with-a-discussion-on-how-to-use-it-with-these-demos&quot;&gt;The build / debug tooling adds SEQ for log collection and viewing ,along with a discussion on how to use it with these Demos.&lt;/h3&gt;
&lt;p&gt;An external tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; is added to provide centralized log collection and viewing. Log messages are ingested as HTTP messages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; on the default port 5341
&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;
&lt;h2 id=&quot;server&quot;&gt;Server&lt;/h2&gt;
&lt;p&gt;This demo focuses on Logging
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServiceStack.Logging&lt;/code&gt; dependency and using is removed from all compilation units (source .cs files)
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging&lt;/code&gt; NuGet Package dependency is added to the project
Serilog dependencies (NuGet Packages) are added to the project: (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serilog, Serilog.AspNetCore, Serilog.Enrichers.Thread,S erilog.Exceptions, Serilog.Settings.Configuration, Serilog.Sinks.Console, Serilog.Sinks.Debug, Serilog.Sinks.File, Serilog.Sinks.Seq, SerilogAnalyzer&lt;/code&gt;)
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.development.json&lt;/code&gt; files grow an extensive logging sections for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft.Extensions.Logging&lt;/code&gt; and for Serilog
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; (production) configures Serilog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; writer. The Serilog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogContext&lt;/code&gt; is enriched with the current threadID, and an additional property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt; having the value ‘Demo09”
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; (Development) configures Serilog with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&lt;/code&gt; writer, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Console&lt;/code&gt; writer, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DebugOutput&lt;/code&gt; writer. 
The Serilog static Log object is initialized with the Serilog configuration read from the ConfigurationRoot
The static method CreateGenericHost adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Serilog.AspNetCore&lt;/code&gt; logging to the genericHost’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigureWebHostDefaults&lt;/code&gt; builder extension and to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ConfigureLogging&lt;/code&gt; builder extension via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.UseSerilog()&lt;/code&gt;
The NLog.config and NLog.xsd files are removed. 
The Serilog Analyzer, installed via NuGet, will provide IntelliSense for the Serilog Log methods.
logging statements throughout the code are replaced with SeriLog structured  logging statements 
The Log statements that used String expansion are replaced with SeriLog structured logging messages. The Analyzer provides a suggested replacement, so this step is just a “replace all occurrences” in the project
&lt;strong&gt;__&lt;/strong&gt;__&lt;/p&gt;

&lt;h2 id=&quot;demo10---server-tracing-and-profiling-via-event-tracing-for-windows-etw-gui-simple-task&quot;&gt;Demo10 - Server: Tracing and Profiling via Event Tracing for Windows (ETW), GUI: simple Task&lt;/h2&gt;
&lt;p&gt;This is the specific documentation for Demo10, &lt;em&gt;Adding Event Tracing for Windows (ETW)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-gui-focuses-on-3&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds
        &lt;h3 id=&quot;the-server-focuses-ontracing-and-profiling-via-event-tracing-for-windows-etw&quot;&gt;The Server focuses onTracing and Profiling via Event Tracing for Windows (ETW)&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The server adds the ability to log method boundaries in the ETW tracing window (not getters or setters yet)
    &lt;ul&gt;
      &lt;li&gt;A managed ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt; is added.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; class has one static Property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log&lt;/code&gt;, which holds an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; class.&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt; has one method, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Information&lt;/code&gt;, which writes to the ETW subsystem via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics.Tracing&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A number of external tools useful for collecting, viewing, and analyzing ETW events are discussed in the documentation, along with links to further information
    &lt;ol&gt;
      &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
      &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs&lt;/li&gt;
      &lt;li&gt;ToDo: –WPA, Windows Performance Analyzer–&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo11---ilweaving-using-fody&quot;&gt;Demo11 - ILWeaving using Fody&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-4&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-adding-fody-for-ilweaving-and-the-methodaspectboundry-weaver-addin-for-fody&quot;&gt;The Server focuses on adding Fody for ILWeaving, and the MethodAspectBoundry weaver AddIn for Fody&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussions on what ILWeaving is, and using Fody to accomplish it&lt;/li&gt;
  &lt;li&gt;Discussions on&lt;/li&gt;
  &lt;li&gt;References to MethodAspectBoundry.Fody are added to the .csproj&lt;/li&gt;
  &lt;li&gt;A new Attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETWLogAttribute&lt;/code&gt; is defined, added to almost every class, and all method entry and exit logging statements are removed.&lt;/li&gt;
  &lt;li&gt;The Server uses the MethodAspectBoundry Weaver to add ETW logging for every method in a class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-adds-ilweaving-package&quot;&gt;The build / debug tooling adds ILWeaving package&lt;/h3&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Blazor GUI project …
Todo: The server project focuses on the details of ILWeaving using Fody to provide ETW logging of method entry and exit, including getters and setters. MethodBoundryAspect Fody Plugin also logs exceptions to ETW automagically.
ToDo: look some of that, and move to the next demo.The server project focuses on the details of installing the server project as a Windows service, and partially automating that process.
The Common DTOs ..&lt;/p&gt;

&lt;h2 id=&quot;demo12---publishing-both-the--gui-and-the-server-into-a-windows-service&quot;&gt;Demo12 - Publishing both the  GUI and the Server into a Windows Service&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-getting-the-new-publishedservicepubxml-file-setup-properly&quot;&gt;The GUI focuses on getting the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishedService.pubxml&lt;/code&gt; file setup properly.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds the ability to publish to a specific folder within the &lt;em&gt;_PublishedAgent\PublishedService&lt;/em&gt; subdirectory tree using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishedService.pubxml&lt;/code&gt; publishing option&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-creating-the-basic-windows-service-additions-then-hosting-the-servicestack-middleware-in-a-kestrel-only-webhost-inside-a-generichost-under-net-core-v30-and-running-it-as-a-service&quot;&gt;The Server focuses on creating the basic windows service additions, then hosting the ServiceStack middleware in a Kestrel-only webHost inside a GenericHost under Net Core V3.0 and running it as a Service&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;Discussion on the differences between a ConsoleApp and a Service&lt;/li&gt;
  &lt;li&gt;Discussion on concepts from the Runtime, to determine if the program is running under Windows or Linux&lt;/li&gt;
  &lt;li&gt;The Server adds a key runtime variable  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsConsoleApp&lt;/code&gt; to determine if the program is running under Windows or Linux&lt;/li&gt;
  &lt;li&gt;The Server adds switchMappings ConfigurationRoot to detect -C or -Console as a command-line switch&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on-the-windows-scexe-utility&quot;&gt;The build / debug tooling focuses on the Windows sc.exe utility&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Discussion on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt; for manually installing and uninstalling the genericHost as a Windows Service are documented&lt;/li&gt;
  &lt;li&gt;Discussion on how to setup VisualStudio and the CLI to ‘Publish’ the Server to a specified location, which can be referenced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;publishing-steps&quot;&gt;Publishing Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Demo12 adds a new section to the ReadMe for documenting what changes get made in the publishing process.&lt;/li&gt;
  &lt;li&gt;The initial section describes the manual steps for creating / publishings, installing, and running the server as a service, how to uninstall it, and the run edit compile cycle for developing the service..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo-13---tbd-automating-publishing&quot;&gt;Demo 13 - (TBD) Automating Publishing&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-5&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling-focuses-on&quot;&gt;The build / debug tooling focuses on&lt;/h3&gt;
&lt;p&gt;a discussion of the InstallUti;l&lt;/p&gt;

&lt;p&gt;You will need to install a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.Net Core Global Tool&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installUtil&lt;/code&gt;. From a VS 2019 command prompt, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet tool install -g --framework netcoreapp3.0 --version 1.2.0 InstallUtil&lt;/code&gt;. Of course check that this is still the latest version and adjust the instructions accordingly, if a later version exists.&lt;/p&gt;

&lt;h3 id=&quot;publishing-steps-1&quot;&gt;Publishing Steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;focuses on automating the publishing process, and provides a PowerShell script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PublishingAutomation.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo14---tbd-publishing-both-the-gui-and-the-server-to-windows-subsystem-for-linux-as-a-daemon&quot;&gt;Demo14 - (TBD) Publishing both the GUI and the Server to Windows Subsystem for Linux as a Daemon&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-6&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--3&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-2&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo15---tbd-publishing-both-the-gui-and-the-server-to-linux-kernals&quot;&gt;Demo15 - (TBD) Publishing both the GUI and the Server to Linux kernals&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-7&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-1&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--4&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-3&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo16---gui-and-server-open-communications&quot;&gt;Demo16 - GUI and Server open communications&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-8&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-2&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--5&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-4&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;h2 id=&quot;demo17---gui-and-server-plugins&quot;&gt;Demo17 - GUI and Server PlugIns&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-an-implementation-of-additional-pages-defined-in-configuration-and-loaded-at-runtime&quot;&gt;The GUI focuses on an implementation of additional pages defined in Configuration and loaded at runtime&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-an-implementation-of-additional-services-via-the-ss-plugin-structures&quot;&gt;The Server focuses on an implementation of additional services via the SS Plugin structures&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--6&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;h2 id=&quot;publishing-steps-5&quot;&gt;Publishing Steps&lt;/h2&gt;

&lt;p&gt;—- Cut Line —-
Rough notes below, to be integrated&lt;/p&gt;

&lt;p&gt;ToDo: InstallUtil? Registering messages with Windows Application EventLog?
Details in &lt;a href=&quot;Server/ReadMe.html&quot;&gt;Demo12 Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo13 - The GUI focuses on …. The GUI adds …. Discussions on …. The .sccs file adds …. The build tooling adds… The Server focuses on …. References to …. are added…. Discussions on …. launchsettings.json …. The ServiceStack middleware adds …. The CommonDTOs adds …&lt;/p&gt;

&lt;p&gt;The AppConfiguration includes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CommandLine Arguments&lt;/li&gt;
  &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
  &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
  &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
  &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;
The AppConfiguration includes
AppConfiguration 
CommandLine Arguments
Environment variables, filtered by a prefix
Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost
compiled-in defaults for the Environment
event handlers
How to branch the flow of execution based on Environment, and how to name the settings files.
logging statements
ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;
System.Diagnostics.Tracing
The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
  &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs
ETWLogAttribute
[ETWLogAttribute]
logging messages for method entry and exit throughout the Server classes are
Blazored.LocalStorage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Blazor GUI site.scss file uses variables to define the &amp;lt;body&amp;gt; tags background style / color.&lt;/p&gt;

&lt;p&gt;Blazor.Logging.Extensions&lt;/p&gt;

&lt;p&gt;Logging  in the GUI via Microsoft.Extensions.Logging, and Blazor.Logging.Extensions&lt;/p&gt;

&lt;p&gt;Blazored.LocalStorage&lt;/p&gt;

&lt;p&gt;Blazored.LocalStorage&lt;/p&gt;

&lt;p&gt;The Server adds Environment variables, and uses one to select which WebHost to build/run/use.  launchsettings.json grows Environment variables.
Environment Variables and LaunchSettings.json grow to add Environment
.Net Core 2.2
The .sccs file adds styles for AnIntegerProperty, and IncrementAnIntegerPropertyButton (for both Active and queuing visual effects)
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers for the button and for the timer itself
The .sccs file adds styles for AnIntegerProperty, and IncrementAnIntegerPropertyButton (for both Active and queuing visual effects).
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers and state transitions for the button and for the timer itself.
The Server adds Environment variables, and uses one to select which WebHost to build/run/use.  launchsettings.json grows Environment variables. The Server targets  .Net Core 3.0 and will remain so for the rest of the demos (Currently Preview6)
The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers and state transitions for the button and for the timer itself.&lt;br /&gt;
Demo06  -  The GUI adds a second integer property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnotherIntegerProperty&lt;/code&gt;, a  button to increment it, and a fourth button that will increment both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerProperties&lt;/code&gt;.   Further styling to make the elements visually explanatory as the demo is run through its visual states. Our browser-local storage properties involved with State get their setters hooked. A discussion on concurrency if two or more substates try to access the same state variable
 The Server adds the concept of Environment (Production, Staging, Debug, etc). Discussion on localization of these values, and uses one to select which WebHost to build/run/use.  Environment Variables and launchSettings.json grow to add Environment.
Demo06  -  The GUI adds a second integer property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnotherIntegerProperty&lt;/code&gt;, a  button to increment it, and a fourth button that will increment both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerProperties&lt;/code&gt;.   Further styling to make the elements visually explanatory as the demo is run through its visual states. Our browser-local storage properties involved with State get their setters hooked. A discussion on concurrency if two or more substates try to access the same state variable.   The Server adds the concept of Environment (Production, Staging, Debug, etc). Discussion on localization of these values, and uses one to select which WebHost to build/run/use.  Environment Variables and launchSettings.json grow to add Environment. 
focuses on a single static builder for the GenericHost, which incorporates different webHostBuilder configurations based on a parameter to the method. The multiple static builders are removed.
A new enumeration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SupportedWebHostBuilders&lt;/code&gt;is introduced,
Demo07  -  The GUI adds an async method that returns a Task, a button that dispatches it, and  visual badge for the task’s status and results. Notation and relationships of state triggers, as exemplified by buttons, timers, and tasks, are abstracted as a Linq query.     Our browser-local storage properties involved with State get a concurrency flag. A discussion on concurrency if two or more substates try to access the same state variable.   The Server focuses on a single static builder for the 3.0 GenericHost, which incorporates different WebHostBuilder configurations based on a parameter to the method. The multiple static builders are removed. A new enumeration SupportedWebHostBuildersis introduced, and corresponding environment variable and launchsettings.json entries
Demo07  -  The GUI adds an 
Demo07  -  The GUI adds
The AppConfiguration includes&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CommandLine Arguments&lt;/li&gt;
  &lt;li&gt;Environment variables, filtered by a prefix&lt;/li&gt;
  &lt;li&gt;How to branch the flow of execution based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;, and how to name the settings files.&lt;/li&gt;
  &lt;li&gt;Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost&lt;/li&gt;
  &lt;li&gt;compiled-in defaults for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt;
The AppConfiguration includes
AppConfiguration 
CommandLine Arguments
Environment variables, filtered by a prefix
How to branch the flow of execution based on Environment, and how to name the settings files.
Settings file(s) in JSON format, Production, and additional settings based on Environment, for both the GenericHost and the WebHost
compiled-in defaults for the Environment
event handlers
How to branch the flow of execution based on Environment, and how to name the settings files.
This demo focuses on Logging
Server adds Microsoft.Extensions.Configuration
genericHostSettings.json
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genericHostSettings.development.json&lt;/code&gt; files grow an extensive logging section
logging statements
ETW provider, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider&lt;/code&gt;, derived form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventSource&lt;/code&gt;
System.Diagnostics.Tracing
The Serilog logging messages for method entry and exit throughout the Server classes are replaced with calls to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DemoETWProvider.Log.Information&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visual Studio Diagnostics Event window&lt;/li&gt;
  &lt;li&gt;PerfView, and how to use it to collect ETW events from the demo, and view the ETW logs
ETWLogAttribute
[ETWLogAttribute]
logging messages for method entry and exit throughout the Server classes are
Blazored.LocalStorage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TEMPLATE:&lt;/p&gt;

&lt;h2 id=&quot;demoxx---xxx&quot;&gt;DemoXX - XXX&lt;/h2&gt;
&lt;h3 id=&quot;the-gui-focuses-on-9&quot;&gt;The GUI focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The GUI adds&lt;/li&gt;
  &lt;li&gt;Discussions on how to&lt;/li&gt;
  &lt;li&gt;Styling focuses on
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site.sccs&lt;/code&gt; file adds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-server-focuses-on-3&quot;&gt;The Server focuses on&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;References to …. are added to the .csproj&lt;/li&gt;
  &lt;li&gt;The Server adds ….&lt;/li&gt;
  &lt;li&gt;Discussions on how to ….&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchsettings.json&lt;/code&gt; ….&lt;/li&gt;
  &lt;li&gt;The ServiceStack middleware adds ….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-build--debug-tooling--7&quot;&gt;The build / debug tooling …&lt;/h3&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="technical" /><category term="Blazor" /><summary type="html">Until last week, my main app (and my Blazor demos), used ServiceStack middleware hosted in .Net 4.7.1 using the Windows HTTPListener in a Console App. I spent the last week moving the web servers in my demos 06 and 07 to ASP.NET Core Kestrel self-hosted WITHOUT IIS integration. Yesterday and the day before, I got demo06 server working with V3.0P4 SS Middleware in Kestrel WITH IIS intergation, and demo07 working with SS in Kestrel WITHOUT IIS integration.</summary></entry><entry><title type="html">Attributions For Internet Resources</title><link href="https://billhertzing.github.io/technical/2021/04/16/Attributions-For-Internet-Resources/" rel="alternate" type="text/html" title="Attributions For Internet Resources" /><published>2021-04-16T10:12:44-06:00</published><updated>2021-04-16T10:12:44-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Attributions-For-Internet-Resources</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Attributions-For-Internet-Resources/">&lt;h1&gt; People, Books, Articles, Blogs, websites that have sparked ideas or code used in this app

&lt;h2&gt; Attribution for ideas to currently incorporated into the project

|  Group  | Sub-group | ToolName |                  URL                 | NuGet                                    | Date Added | ByWhom |
|:-------:|:---------:|:--------:|:------------------------------------:|------------------------------------------|:----------:|--------|
| Testing | BDD       | SpecFlow | https://github.com/techtalk/SpecFlow | https://www.nuget.org/packages/SpecFlow/ | 06/17/2018 | WGH    |
|         |           |          |                                      |                                          |            |        |
|         |           |          |                                      |                                          |            |        |

&lt;h2&gt; Ideas to be incorporated into the project

|  Group  | Sub-group | ToolName |                  URL                 | NuGet                                    | Date Added | ByWhom |
|:-------:|:---------:|:--------:|:------------------------------------:|------------------------------------------|:----------:|--------|
| Testing | BDD       | SpecFlow | https://github.com/techtalk/SpecFlow | https://www.nuget.org/packages/SpecFlow/ | 06/17/2018 | WGH    |
|         |           |          |                                      |                                          |            |        |
|         |           |          |                                      |                                          |            |        |

&lt;h2&gt; Attribution for ideas which were once incorporated into the project but have been replaced or superseded

&lt;/h2&gt;&lt;/h2&gt;&lt;/h2&gt;&lt;/h1&gt;</content><author><name></name></author><category term="technical" /><category term="Attribution" /><summary type="html">People, Books, Articles, Blogs, websites that have sparked ideas or code used in this app</summary></entry><entry><title type="html">Adventures In Voice Diction And Commands For A Developer</title><link href="https://billhertzing.github.io/technical/2021/04/16/Adventures-in-Voice-Diction-and-Commands-for-a-Developer/" rel="alternate" type="text/html" title="Adventures In Voice Diction And Commands For A Developer" /><published>2021-04-16T10:11:34-06:00</published><updated>2021-04-16T10:11:34-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/16/Adventures-in-Voice-Diction-and-Commands-for-a-Developer</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/16/Adventures-in-Voice-Diction-and-Commands-for-a-Developer/">&lt;p&gt;Voice dictation is the subject of my second blog post&lt;/p&gt;

&lt;p&gt;Specifically, can I switch between dictation mode and programming mode&lt;/p&gt;

&lt;p&gt;As I am dictating this into a new voice dictation software package, I have learned just how hard it is to create content on the fly, in complete sentences.&lt;/p&gt;

&lt;p&gt;I did an Internet search on the subject of voice commands to/for Visual Studio code. Aside from the usual dross from the big companies, the articles that seemed remotely interesting, all seen to involve one or more third-party packages.&lt;/p&gt;

&lt;p&gt;All of the articles suggested that the initial steps are to set up microphone, workspace, and to install a voice recognition app.&lt;/p&gt;

&lt;p&gt;I am familiar with voice recognition on Google, and I have tried Microsoft’s Windows built in product.&lt;/p&gt;

&lt;p&gt;A few years ago I bought a copy of the commercial version of DragonDictate. I never installed it . But I decided to give it a try today.  The DragonDictate has been bought by Nuance. Looking at their website, there are two newer versions of the software. Not sure I want to spend money on this yet, although one of the Internet article did reference using DragonDictate. Unfortunately the article indicated that the professional version does a much better job. Unfortunately, because it costs significantly more money, and as a retiree, I haven’t got any to spare. :-)&lt;/p&gt;

&lt;p&gt;Pretty much right out of the box I am dictating all of this into a DragonDictate text control which easily pastes into the notepad++ text editor I’m using.&lt;/p&gt;

&lt;p&gt;It has taken me about 10 minutes to dictate all of this, learning as I go. The biggest issue is it doesn’t seem to recognize the first couple of words when I start a sentence, so I have to go back to The beginning and enter those words. As happened here, note the capital T prior. I started dictating at “I have to ggo back…”.&lt;/p&gt;

&lt;p&gt;The next step is to see if it will be possible to give commands to the text editor.&lt;/p&gt;

&lt;p&gt;Instead, went down a rabbit hole. Found a forum where people discuss using DragonDictate to control third-party apps. In the forum, I found a few nuggets from people who were, in 2016, using DragonDictate and Visual Studio. What I did see in code examples was that a variation of Basic is being used customized DragonDictate.&lt;/p&gt;

&lt;p&gt;My programming language preferences are C# and PowerShell. Realizing that I would have to write significant Visual Basic code, I have decided that DragonDictate is probably not the voice dictation recognition software that I’m looking to pursue.&lt;/p&gt;

&lt;p&gt;So it’s back to the drawing board! I’ll try to write sooner next time.&lt;/p&gt;

&lt;p&gt;Combining Voice dictation and code editing is the subject of my third blog post&lt;/p&gt;

&lt;p&gt;(Ed. First paragraph is typed) I was going to try and dictate as I coded, but upon opening my environment, I realized it was time for a housecleaning. I spent a few hours prior to dictating closing out my MAPs subscription cleaning out old SDK versions, removing two of my three Visual studio installs, and creating the first two workspaces for Visual Studio Code in the ATAP.Utilities repository.&lt;/p&gt;

&lt;p&gt;So the remainder of this post will be the raw dictation transcription, as I try to get the Powershell code I wrote last week into the original Console program that read a lot of disks, and records info about every file. The next step is to store the data in a graph DB. Yesterday I got the SQL Server 2017(?) service running locally, with the graph extensions, and I also created a node and edge table . I have powershell script that can insert the directory nodes from upstream into the nodes table of the DB&lt;/p&gt;

&lt;p&gt;Now to try dictating stream of conscionous to Visual Studio Code&lt;/p&gt;

&lt;p&gt;First thing I’m going to try to do is to correct the build tools path.
The solution file contains a section called .build with has entries for tools whose pans include .build from the solution directory.&lt;/p&gt;

&lt;p&gt;Hello while I am still trying to figure out why the path to the finished build tools is short by one directory, by manage to move four of the build tools directories under the source parent directory, and was able to properly reroot them in the solution directory under the build folder under src&lt;/p&gt;

&lt;p&gt;The second thing I’m going to try to do is to figure out the loft configurations so that it specifies the correct directory.&lt;/p&gt;</content><author><name></name></author><category term="technical" /><category term="Dictation" /><category term="Voice" /><summary type="html">Voice dictation is the subject of my second blog post</summary></entry><entry><title type="html">Welcome To The Personal Section Of My Site</title><link href="https://billhertzing.github.io/personal/2021/04/15/Welcome-to-the-Personal-section-of-my-site/" rel="alternate" type="text/html" title="Welcome To The Personal Section Of My Site" /><published>2021-04-15T21:12:01-06:00</published><updated>2021-04-15T21:12:01-06:00</updated><id>https://billhertzing.github.io/personal/2021/04/15/Welcome-to-the-Personal-section-of-my-site</id><content type="html" xml:base="https://billhertzing.github.io/personal/2021/04/15/Welcome-to-the-Personal-section-of-my-site/">&lt;h2 id=&quot;tl-dr&quot;&gt;TL DR&lt;/h2&gt;

&lt;p&gt;If you would like to have access to my posts and pictures about family and friends, direct message me via text message e-mail, or a phone call. I’ll add you to the list of people who have access.&lt;/p&gt;

&lt;p&gt;In the future, I hope to have a simple login form that will make it very easy to authenticate using any of your social media apps, or using a userid / password.&lt;/p&gt;

&lt;h2 id=&quot;welcome&quot;&gt;Welcome&lt;/h2&gt;

&lt;p&gt;I’ve long hoped to have a website that I can use to share information with my friends and family, without having to create content for each individual social media site. This is it!&lt;/p&gt;

&lt;h2 id=&quot;pictures-and-videos&quot;&gt;Pictures and Videos&lt;/h2&gt;

&lt;p&gt;I have our cameras and GoPro setup to automatically upload new media to my Dropbox storage. Since I’m already paying Dropbox for 2 TB of storage, I thought I’d simply utilize that space as the place to host media for you to see in my posts. DropBox lets me create a sharing link, so it is easy to put that link into my posts, so that you will get the media delivered to your browser from Dropbox instead of any other third-party cloud storage.&lt;/p&gt;

&lt;h3 id=&quot;example-picture&quot;&gt;Example picture&lt;/h3&gt;

&lt;p&gt;Here is an example of a picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/91zj2xm01zv91aj/Honeymoon%20Bill%20and%20JoAnn.jpg?raw=1&quot; alt=&quot;Bill and JoAnn on our Honeymoon in 1990&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure (above): Bill and JoAnn on our Honeymoon in 1990&lt;/p&gt;

&lt;h3 id=&quot;example-video&quot;&gt;Example video&lt;/h3&gt;

&lt;p&gt;Here is an example of a video. ToDo: embed a player so a user doesn’t have to “open in new window”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3vjhbk1ewf8u327/2021%2004%2011%20Park%20City%20Closing%20Day%20Capers.mp4?raw=1&quot; alt=&quot;JoAnn skiing in costume on Closing Day at Park City Ski Resort  2021 04 11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure (above): JoAnn in costume on closing day 2021 at Park City, UT&lt;/p&gt;</content><author><name></name></author><category term="personal" /><category term="Introduction" /><category term="Personal" /><summary type="html">TL DR</summary></entry></feed>