<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-05-02T10:36:32-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the family. We&apos;ve got it all!</subtitle><author><name>William (Bill) Hertzing</name></author><entry><title type="html">Word Template for letter to CPA HOA regarding sale of golf course</title><link href="https://billhertzing.github.io/political/Word-Template-for-letter-to-CPA-HOA-regarding-sale-of-golf-course/" rel="alternate" type="text/html" title="Word Template for letter to CPA HOA regarding sale of golf course" /><published>2021-05-01T23:17:00-06:00</published><updated>2021-05-01T23:17:00-06:00</updated><id>https://billhertzing.github.io/political/Word-Template-for-letter-to-CPA-HOA-regarding-sale-of-golf-course</id><content type="html" xml:base="https://billhertzing.github.io/political/Word-Template-for-letter-to-CPA-HOA-regarding-sale-of-golf-course/">&lt;p&gt;A reformatting of Jerry D’s response into a Microsoft Word letter .&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;When I decided to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;political&lt;/code&gt; section of my blog, I had grandiose visions of writing essays on the big political issues of the day. But In Real Life, the first political issue to come up since the blog got started is a very local community issue. Politics begins at the community level, so this is a good first political post.&lt;/p&gt;

&lt;p&gt;The current owner of the golf course embedded in our community is Mustang Development. Mustang Development is also the declarant for our community’s master HOA, Community Preservation Association (CPA). CPA is the master HOA for multiple neighborhoods in our small town. Mustang Development has offered to sell the golf course land (but not the operations) to the CPA HOA. Myself and many other homeowners object to this. Phil Rubin distributed, and Jerry Dwinell posted, a “form-letter” response to CPA for homeowners wishing to vote “No”. This form letter was distributed to many of us as a text file, which is fine for e-mail and Facebook, but not so good for printing. I wanted to send my vote in by mail, so I needed to create a version of the response formatted for printing. I also needed a version suitable for property held by a Trust. I chose Microsoft Word as the editor for creating the formatted response.&lt;/p&gt;

&lt;p&gt;There are two documents, one is a short letter with just the information necessary to vote.
The other is a longer letter with the voting information and setting out many reasons to vote no.&lt;/p&gt;

&lt;p&gt;Both are written for homeowners whose property is owned by a trust. The trustees of the trust should be the ones to sign these letters. Disclaimer: I am not an attorney, this is not legal advice. If you have questions regarding your specific situation, consult an attorney.&lt;/p&gt;

&lt;h2 id=&quot;document-links&quot;&gt;Document Links&lt;/h2&gt;

&lt;p&gt;If you would like to download and view these Word documents, click here:&lt;a href=&quot;https://www.dropbox.com/scl/fi/t9zjvkxr1l8ul9l0mc7io/Word-Template-for-letter-to-CPA-regarding-sale-of-golf-course-simple.docx?dl=0&quot;&gt;Word-Template-for-letter-to-CPA-regarding-sale-of-golf-course-simple&lt;/a&gt;  or here: &lt;a href=&quot;https://www.dropbox.com/s/31rcodlsrpe9oek/Word-Template-for-letter-to-CPA-regarding-sale-of-golf-course-with-explanation.docx?dl=0&quot;&gt;Word-Template-for-letter-to-CPA-regarding-sale-of-golf-course-with-explanation&lt;/a&gt; . You will need Microsoft Word or compatible app in order to view these.&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="political" /><category term="HOA" /><category term="Community Preservation Association" /><summary type="html">A reformatting of Jerry D’s response into a Microsoft Word letter .</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 03</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 03" /><published>2021-04-24T00:00:00-06:00</published><updated>2021-04-24T00:00:00-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03/">&lt;p&gt;Welcome to the third part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first two post in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Site Part 01&lt;/a&gt; and &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-02/&quot;&gt;How I setup this GitHub Pages Blog Site Part 02&lt;/a&gt; you should probably give them a quick review, to become familiar with how the site has been built up to this point.&lt;/p&gt;
=======
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-04-25T22:42:13-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the family. We&apos;ve got it all!</subtitle><author><name>William (Bill) Hertzing</name></author><entry><title type="html">How I Setup This Github Pages Blog Site Part 04</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-04/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 04" /><published>2021-04-25T22:38:36-06:00</published><updated>2021-04-25T22:38:36-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-04</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-04/">&lt;p&gt;Welcome to the fourth part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first posts in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Site Part 01&lt;/a&gt;, &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-02/&quot;&gt;How I setup this GitHub Pages Blog Site Part 02&lt;/a&gt;, and &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-03/&quot;&gt;How I setup this GitHub Pages Blog Site Part 03&lt;/a&gt; you should probably give them a quick review, to become familiar with how the site has been built up to this point.&lt;/p&gt;
>>>>>>> e89d6c1 (WIP Added `jekyll-minifier`)
=======
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-04-27T09:44:55-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the family. We&apos;ve got it all!</subtitle><author><name>William (Bill) Hertzing</name></author><entry><title type="html">Powershell To Convert Nest Report To Excel Pivot Table</title><link href="https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/" rel="alternate" type="text/html" title="Powershell To Convert Nest Report To Excel Pivot Table" /><published>2021-04-27T09:44:54-06:00</published><updated>2021-04-27T09:44:54-06:00</updated><id>https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table</id><content type="html" xml:base="https://billhertzing.github.io/technical/Powershell-to-convert-Nest-report-to-Excel-Pivot-table/">&lt;p&gt;A Powershell script to read a Nest history report and dump it into an Excel pivot table.&lt;/p&gt;
>>>>>>> 452a2ab (WIP Add Archives and Masthead navigation)
=======
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-04-30T00:33:07-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the family. We&apos;ve got it all!</subtitle><author><name>William (Bill) Hertzing</name></author><entry><title type="html">How I Setup This Github Pages Blog Site Part 03</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 03" /><published>2021-04-24T00:00:00-06:00</published><updated>2021-04-24T00:00:00-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-03/">&lt;p&gt;Welcome to the third part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first two post in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Site Part 01&lt;/a&gt; and &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-02/&quot;&gt;How I setup this GitHub Pages Blog Site Part 02&lt;/a&gt; you should probably give them a quick review, to become familiar with how the site has been built up to this point.&lt;/p&gt;
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)

&lt;p&gt;The next steps will be to implement the features specified in &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/3&quot;&gt;Milestone 0.03.0&lt;/a&gt;.  I’ve created Milestones for Release V0.03 and V0.04 already. I also have a lot of ideas for additional features in a Milestone &lt;em&gt;Release Far Future&lt;/em&gt;.  I like to plan one or two milestones in advance of the current sprint. That gives me time to study the Internet for examples and guidelines for the specific new features coming in the next two releases. I also arrange the Milestone &lt;em&gt;Release Far Future&lt;/em&gt; features in the rough order of prioritization I want, then when creating a new specific milestone, I move an appropriate number of features from Milestone &lt;em&gt;Release Far Future&lt;/em&gt; into the new next Release milestone. I’ll say this again, I’ve found that there is always “feature creep” in releases if I don’t take the time to write down what is going into the next release. This helps me keep to the release cadence I want, and ensures these posts corresponding to each release don’t get too big!&lt;/p&gt;

&lt;p&gt;This release is all about moving to a better theme, adding navigation elements, and incorporating Disqus comments.&lt;/p&gt;

&lt;p&gt;Lets move on!&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-branch-for-developing-the-next-release&quot;&gt;Create a new branch for developing the next Release&lt;/h2&gt;

&lt;p&gt;First step after doing a Release is to create a new branch for working on the features for the next Release.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to switch to the just released Release. Hopefully, it is clean and there have been no changes since the last release tag was added.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b SprintForRelease0.03.000&lt;/code&gt; to create a branch for the work on the next release. Modify the branch name shown to reflect the number of the next release. For this post and the development of the next Release of this site, I’ll keep coming back to the branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForRelease0.03.000&lt;/code&gt; with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout SprintForRelease0.03.000&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;work-on-bugs-in-parallel-with-new-features&quot;&gt;Work on bugs in parallel with new features&lt;/h2&gt;

&lt;p&gt;Every release brings new bugs. I always want to be working on exciting new features, not trying to figure out my past mistakes 😞. Gotta do it though, so it’s best to get into a rhythm for working on both areas.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use Github issues to record bugs found in the current release.&lt;/li&gt;
  &lt;li&gt;Create a branch to work on each bug issue.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to switch back to the just released Release.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b BugFixIssue#9&lt;/code&gt; to create a branch for the work on fixing the bug. Modify the branch name shown to reflect the Issue number.&lt;/li&gt;
  &lt;li&gt;If you have another issue that you want to work in parallel, fork another branch from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Not too many though, because each time a bugfix branch is merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, the other bugfix branches will need to be rebased. Having just a couple bugfix branches existing and being worked on makes the process of merging and rebasing easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have a few parallel branches setup, you can decide which branch you want to work on today. 😊&lt;/p&gt;

&lt;p&gt;Later in this post I’ll show how I merge the bug fix branches back into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; development sprint and bugfix branches onto the updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;update-the-gitcommittemplate&quot;&gt;Update the git.commit.template&lt;/h2&gt;

&lt;p&gt;There is only one template for commits, and since I’m working primarily on Release V0.03.000, it’s time to change the default template to reflect that.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitTemplates/git.commit.template.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find the line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;See Milestone Release V0.02.00&lt;/code&gt; and change it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;See Milestone Release V0.03.00&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save the file. The new changed template should appear the next time the VSC SCM tool window is opened.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-draft--part-03-post&quot;&gt;Create a draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 03&lt;/code&gt; post&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how-i-setup-this-github-pages-blog-site-part-03.md&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical/_drafts&lt;/code&gt; subdirectory (or under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory at the base of the repo if you are not using categories). Do not add the &lt;em&gt;YYYY-MM-DD&lt;/em&gt; prefix to this file.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter text to the file. Modify it as appropriate for your site. &lt;em&gt;Note&lt;/em&gt; There is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date:&lt;/code&gt; key in a draft post.&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: How I setup this GitHub Pages Blog, Part 3
 tags: Jekyll GitHubPages
 description: third set of steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;
 Add text you want to see in your third post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt; Jekyll will build the drafts with the current date so they will be easy to find at the top of your (chronologically sorted) post listings.&lt;/li&gt;
  &lt;li&gt;Validate the new post exists locally under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt; subdirectory, and a link to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 03&lt;/code&gt; post appears at the top of the landing page.&lt;/li&gt;
  &lt;li&gt;Commit the file, sync with Github, and verify the GiHub repository now has the new branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForRelease0.03.000&lt;/code&gt; and the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 03&lt;/code&gt; file under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical/_drafts&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; During this period in the development of the site, Real Life interfered in the form of the passing of our dear dog Molly. Since one purpose of the site is to post updates regarding real-life happenings to friends and family, the features destined for release V0.03 were re-prioritized to support posting a Eulogy for Molly. This primarily involved doing the minimum needed to convert to the Minimal Mistakes theme, customizing the footer, customizing the Author information, customizing the favicon, and customizing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component to support captions for the images in the gallery, using that modified component to create the picture gallery found in the eulogy post, creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;favicon&lt;/code&gt; and adding a Table Of Contents (TOC) to posts. The remainder of the features originally planed for V0.03 have slipped to V0.04.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;change-theme-to-minimal-mistakes-mm&quot;&gt;Change theme to Minimal Mistakes (MM)&lt;/h2&gt;

&lt;p&gt;Now we’ll switch to a better theme. I decided to use &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;. Installation details are in the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;Quick-Start Guide&lt;/a&gt;. What follows are the steps I took and the choices I made during installation.&lt;/p&gt;

&lt;h3 id=&quot;add-the-minimal-mistakes-jekyll-gem-based-theme-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistakes-jekyll&lt;/code&gt; Gem-based theme to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;minima&quot;, &quot;~&amp;gt; 2.5&quot;&lt;/code&gt; with this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s&quot;&gt;gem &quot;minimal-mistakes-jekyll&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt; to fetch and update bundled gems.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;finding-the-files-that-make-up-the-theme&quot;&gt;Finding the files that make up the theme&lt;/h3&gt;

&lt;p&gt;There are a number of theme files that will need to be overridden. When creating an override for a file, start with the theme’s file. To locate theme files, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle info minimal-mistakes-jekyll&lt;/code&gt;. That will return the path of the Gem theme’s installation directory. From that root path, all of the theme’s files can be found.  Alternatively, the latest versions of all theme files can be found on the MM Github site, at &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;. However, be careful that the version installed locally matches the version on the GitHub site.&lt;/p&gt;

&lt;h3 id=&quot;merge-mm-default-values-of-_configyml&quot;&gt;Merge MM default values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The MM theme has a default file for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. I compared the theme’s default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file currently in use on my site, then merged the two, updating the resulting file with additional information specific to my site. There were a lot of setting in the new file with which I was unfamiliar. This post and subsequent posts will go into greater detail on the contents of this file and how it was modified.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Combine the latest version with the current version
    &lt;ol&gt;
      &lt;li&gt;uncomment the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# theme&lt;/code&gt; line&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subtitle:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repository:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author:&lt;/code&gt; subkey values&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bio:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;links:&lt;/code&gt; subkey values&lt;/li&gt;
      &lt;li&gt;uncomment and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url:&lt;/code&gt; key values for any social media sites you want to appear under your Author information.
        &lt;blockquote&gt;
          &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; I do NOT recommend enabling email links unless you are willing to deal with a lot of spam in your inbox!&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer:links:&lt;/code&gt; subkey values&lt;/li&gt;
      &lt;li&gt;uncomment and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url:&lt;/code&gt; key values for any social media sites you want to have links to appear in the footer.&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timezone:&lt;/code&gt; key value&lt;/li&gt;
      &lt;li&gt;update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins:&lt;/code&gt; key. There are three additional plugins defined in the theme that are not present in the current version. Add all three
        &lt;ul&gt;
          &lt;li&gt;jekyll-paginate&lt;/li&gt;
          &lt;li&gt;jekyll-sitemap&lt;/li&gt;
          &lt;li&gt;jekyll-gist&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Save the file.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;install-additional-gems&quot;&gt;Install additional GEMs&lt;/h3&gt;

&lt;p&gt;The MM theme references three additional plugins. Install them using the commands&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-paginate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-sitemap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-gist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The results of running update will be a list of gems and their versions. Note the version numbers of the gems that match the plugins specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;. The versions shown here are those that existed on April 23, 2021.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-paginate&quot;, &quot;~&amp;gt; 1.1.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-sitemap&quot;, &quot;~&amp;gt; 1.4.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-gist&quot;, &quot;~&amp;gt; 1.5.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.15.1&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-include-cache&quot;, &quot;~&amp;gt; 0.2.1&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll_version_plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the Gemfile&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oops, the site build did not finish and there are errors reported. Gotta work through the troubleshooting.&lt;/p&gt;

&lt;h3 id=&quot;change-post-layout-to-posts-layout&quot;&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; layout to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; layout&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme had a layout named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt;, but MM uses a layout called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt;. In all the posts for Release V0.01 and V0.02, each post had a Front Matter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key. Fix this by removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key from the Front Matter in all posts. The Default Front Matter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file will take care of defining the layout for all posts&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use VSC global search feature to find the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: post&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Go into each file and remove that line if it is within the files’ Front Matter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;change-page-layout&quot;&gt;Change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; layout&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme had a layout named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;, but MM does not. Fix this by modifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key in the Front Matter in all pages, and use a layout specific to the page’s intent.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat the steps used to fix the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; layout. Global search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: page&lt;/code&gt;, replace it as follows:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file (at the root of the repo), use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout: home&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;in all other page files, remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout:&lt;/code&gt; key line completely.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looks like this cleaned up all the warnings about missing the layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; and missing the layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;. Validate that the site builds and serves.&lt;/p&gt;

&lt;h2 id=&quot;fix-the-footer&quot;&gt;Fix the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Eventually, I want the footer to look similar to the footer at GitHub Marketplace Action &lt;a href=&quot;https://github.com/marketplace/actions/deploy-to-github-pages&quot;&gt;Deploy to GitHub Pages&lt;/a&gt;. However, for this release, I’ll start with just the copyright, the License, Code of Conduct, and Contributing links, attributions for Jekyll and MM, and the current Release’s Semantic Version number.  This is done by overriding the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes/footer.html&lt;/code&gt; file .&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistakes-jekyll&lt;/code&gt; theme’s installation directory to the local repo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit the copyright line, replace the entire line with the following (and modify to fit your site):&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-Liquid&quot;&gt; &amp;lt;div class=&quot;page__footer-copyright&quot;&amp;gt;&amp;amp;copy; William Hertzing 2020 - 2021. Licensed under the terms of the &amp;lt;a href=/LICENSE/&amp;gt;MIT License.&amp;lt;/a&amp;gt;
 &amp;lt;a href=https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&amp;gt;Code of Conduct&amp;lt;/a&amp;gt;
 &amp;lt;a href=https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md&amp;gt;CONTRIBUTING&amp;lt;/a&amp;gt; 
 Powered by &amp;lt;a href=&quot;https://jekyllrb.com&quot; rel=&quot;nofollow&quot;&amp;gt;Jekyll&amp;lt;/a&amp;gt; &amp;amp;amp; &amp;lt;a href=&quot;https://mademistakes.com/work/minimal-mistakes-jekyll-theme/&quot; rel=&quot;nofollow&quot;&amp;gt;Minimal Mistakes&amp;lt;/a&amp;gt;.
 Site Release {% capture long_tag_name %}{% project_version  %}{% endcapture %}{{ long_tag_name | remove: &apos;releases/&apos; | split: &apos;-&apos; | first | prepend: &quot;V&quot; }}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The site should build and display, and a decent looking footer should display on all pages and posts. We will address adding to the contents of the footer in later posts.&lt;/p&gt;

&lt;h2 id=&quot;add-a-faviconico&quot;&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I have a .jpg file with an image I’d like to use as the site’s Favicon. The HTML needed to generate Favicon references for all kinds of browsers are usually found in each page’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;... &amp;lt;/head&amp;gt;&lt;/code&gt; section. The MM theme has a place to insert custom HTML for the head tag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head/custom.html&lt;/code&gt;. The MM theme’s original custom head HTML file is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head/custom.html&lt;/code&gt;, and in it there is a line the specifically mentions a place to insert html related to the Favicon. It also refers to &lt;a href=&quot;https://realfavicongenerator.net/&quot;&gt;Favicon Generator. For real.&lt;/a&gt;, which lets you take a .jpg file and turn it into a series of .ico files for various browsers. If you don’t have a picture you want to use yet, you can just try the Favicon Generator with a default image. The site returns a package of files to be installed into the root of the repo, and a block of HTML to be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;... &amp;lt;/head&amp;gt;&lt;/code&gt; section of a page.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new subdirectory and file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/head/custom.html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Copy the contents of the MM original file into the local file above, although it is all comments.&lt;/li&gt;
  &lt;li&gt;Add the snippets generated by the &lt;a href=&quot;https://realfavicongenerator.net/&quot;&gt;Favicon Generator. For real.&lt;/a&gt; to the file.&lt;/li&gt;
  &lt;li&gt;Unpack the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; package that was generated by Favicon Generator into the root of the repo.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Validate the tab in the browser now includes the favicon.&lt;/p&gt;

&lt;h2 id=&quot;modify-the-mm-gallery-component-to-add-a-title-under-each-picture&quot;&gt;Modify the MM &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component to add a title under each picture&lt;/h2&gt;

&lt;p&gt;I needed to put all of Molly’s pictures for her eulogy into a gallery, but I wanted captions under each picture. To do this, I used MM’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gallery&lt;/code&gt; component with a simple modification.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/gallery&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the content of the theme’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/gallery&lt;/code&gt; file from the locally installed gem’s location.&lt;/li&gt;
  &lt;li&gt;Edit the local file and paste the content from the theme’s version of the file&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; just below the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img ...&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test this, a post and some pictures will be needed. In my site, the post was “Eulogy for Molly”, and I added Front Matter specifying the gallery and the pictures.&lt;/p&gt;

&lt;h2 id=&quot;add-basic-toc-to-posts&quot;&gt;Add basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOC&lt;/code&gt; to posts&lt;/h2&gt;

&lt;p&gt;MM theme comes with support for a basic Table of Contents (TOC) displayed to the right of each post. The TOC can be made sticky to the top of the page. This can be enabled in the Default Front Matter.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults:&lt;/code&gt; key&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values:&lt;/code&gt; subkey belonging to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;posts&lt;/code&gt; scope, add the two lines&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;toc_sticky&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt; and validate that the posts now have a TOC displayed on their right. The TOC should remain visible as the post is scrolled down. As the cursor moves to various sections of the post, the appropriate section of the TOC should highlight. Clicking on a section in the TOC should scroll the post to that section.&lt;/p&gt;

&lt;h2 id=&quot;add-disqus-comments-to-posts&quot;&gt;Add Disqus comments to posts&lt;/h2&gt;

&lt;p&gt;There is a lot of opinions on the Internet related to “what is the best way to add a comments section to posts”. I decided to use the Disqus approach, primarily because I did not want to have to spend time moderating comments to remove spam. Most people who weighed in on this topic agreed that Disqus had a very good track record in eliminating spam. As of this date, 2021-04-13, Disqus will provide the basic service (no ads) for free if I self-identify as a personal or OSS site. I registered on 2021-04-13, and received an email acknowledgement the next day. I will send a note to their support tomorrow. More on this later.&lt;/p&gt;

&lt;h3 id=&quot;register-for-an-account-at-disqus&quot;&gt;Register for an account at Disqus&lt;/h3&gt;

&lt;p&gt;Go through the &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; registration procedure for a site. Make a note of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname&lt;/code&gt; you enter, it will be a key part of enabling comments below.&lt;/p&gt;

&lt;h3 id=&quot;enable-support-for-disqus-in-the-mm-theme&quot;&gt;Enable support for Disqus in the MM theme&lt;/h3&gt;

&lt;p&gt;The MM theme has built-in support for Disqus comments.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments:&lt;/code&gt; key.&lt;/li&gt;
  &lt;li&gt;Modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider:&lt;/code&gt; subkey to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider: &quot;disqus&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname:&lt;/code&gt; subkey to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname: &amp;lt;Your Disqus Shortname&amp;gt;&lt;/code&gt;&amp;gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname&lt;/code&gt; you entered when registering for your Disqus account.&lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Comments are only visible if the environment specifies an environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV&lt;/code&gt; with a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt;. To enable comments, the command that is run to build and serve the site now becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; This will instruct PowerShell to create the Environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV&lt;/code&gt; with a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; whose scope is just for the building and serving of the site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve --drafts&lt;/code&gt; also works, and will produce draft posts with comment sections. Avoid entering any comments while the post is still in draft, as the final name of the post will probably differ (in &lt;em&gt;YYY-MM-DD&lt;/em&gt; part) from the published full name of the post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; and validate that the Disqus comments section now appears on the bottom of every post.&lt;/p&gt;

&lt;h2 id=&quot;making-the-third-release-of-the-site&quot;&gt;Making the third release of the site&lt;/h2&gt;

&lt;p&gt;I’m happy now with the enhancements I’ve made to the blogging site. It’s time to wrap up this release.&lt;/p&gt;

&lt;h3 id=&quot;site-minor-release-checklist&quot;&gt;Site Minor Release checklist&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch builds cleanly, without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drafts&lt;/code&gt; option.&lt;/li&gt;
  &lt;li&gt;Review any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warnings&lt;/code&gt; that appear in VSC’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problems&lt;/code&gt;. pane. Clean up the underlying issue, or decide they are OK to live with for this release. Commit any changes made during this step to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and push to the remote.&lt;/li&gt;
  &lt;li&gt;Update the ChangeLog.md. I simply cleanup the Milestone text and add it to ChangeLog. Commit the ChangeLog.md and push it.&lt;/li&gt;
  &lt;li&gt;Publish the draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;How I setup this GitHub Pages Blog, Part 3&lt;/code&gt; post into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_technical&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Publish the draft &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eulogy for Molly the Dog&lt;/code&gt; post into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; to ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; has been built with no drafts and with Disqus enabled&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull rebase -i main&lt;/code&gt; to pull any changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch. ToDo: add example git commands&lt;/li&gt;
  &lt;li&gt;Run through the &lt;em&gt;pre-release checklist - ToDo&lt;/em&gt; of things to test in the Release Candidate.&lt;/li&gt;
  &lt;li&gt;If any item is deficient, fix the problem, update code and commit again until the &lt;em&gt;pre-release checklist&lt;/em&gt; passes. Always ensure that  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; is run after the final Release Candidate code change is made, so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; is up-to-date.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull rebase -i main&lt;/code&gt; to pull any last-minute changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;If there were any changes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; that were pulled into the feature branch, run the &lt;em&gt;pre-release checklist&lt;/em&gt; again. Always ensure that  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; is run after the final Release Candidate code change is made, so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; is up-to-date.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final-soft-reset-and-commit-on-the-sprintforreleasexxx-branch&quot;&gt;Final soft reset and commit on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch&lt;/h3&gt;

&lt;p&gt;The purpose of the soft reset and commit is to clean up the commit messages and all the changes and make them ready for the ChangeLog. If the individual commit messages have been well written, the chore of making a good Feature Release commit message shouldn’t be too hard.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty=&quot;format:%b&quot; HEAD...$(git merge-base main $(git rev-parse --abbrev-ref HEAD)) &amp;gt; $env:TEMP/git_message_for_squash.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code $env:TEMP/git_message_for_squash.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Edit the file and create the final commit message for the Feature Release.&lt;/li&gt;
  &lt;li&gt;Copy the final commit message into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt; and validate the ChangeLog looks as expected. Stop the local Jekyll server.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --soft $(git merge-base main $(git rev-parse --abbrev-ref HEAD))&lt;/code&gt; to reset just the head of the feature branch to the head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; to add the current state of the Feature branch to the next commit.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;. Title should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEAT Milestone V0.03.000&lt;/code&gt; Paste the final commit message as the body. Close the editor.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;merge-the-sprintforreleasexxx-branch-with-the-main-branch&quot;&gt;Merge the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/h3&gt;

&lt;p&gt;Many organizations require a pull request to perform a merge. Thats a great idea as soon as your site has any collaborators, but its overkill for a solo developer.  I’ll add instructions and templates for a Pull Request process in a later post. For now just merge the two branches.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SprintForReleaseXXX&lt;/code&gt; branch is based at the head of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. ToDo: add examples git commands&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout main&lt;/code&gt; to change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge SprintForReleaseXXX&lt;/code&gt;  to perform the merge. If the pre-release checklist was followed, there should be no merge conflicts.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chore Release Work for V0.03.000&lt;/code&gt; as the commit title&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-a-release-tag&quot;&gt;Add a Release tag&lt;/h3&gt;

&lt;p&gt;Now that the merge has been made, add a Release tag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/0.03.000 -m &quot;Third release of Bill&apos;s Blog&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;final-build-of-production-site&quot;&gt;Final build of production site&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = &apos;production&apos;; bundle exec jekyll serve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the final production build, including the Release Version in the footer, is correct. Stop the local Jekyll server.&lt;/li&gt;
  &lt;li&gt;Commit all changes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; (these should only be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; changes). Note the commit ID.&lt;/li&gt;
  &lt;li&gt;Run ToDo: insert git commands to move the tag forward one commit.&lt;/li&gt;
  &lt;li&gt;View the tag locally ensure it is present and associated with the correct commit ID (should be the very latest commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --atomic origin main refs/tags/releases/0.03.000&lt;/code&gt; to push both the final commit on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; the associated release tag to GitHub.&lt;/li&gt;
  &lt;li&gt;Validate that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; Github Action was invoked and ran successfully.  ToDo: reference the instructions back in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... part 01&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the production site is up, with the new features, new published posts, and correct Release Version number&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This concludes the third post in this series. I’m sure that there will be revisions to this post for typos, grammar, and general improvements. Future site revisions will support multiple editions of a post, with revision date and ChangeLog for the post. You will (eventually) be able to subscribe to the site’s feed and get notifications when a revision is made.&lt;/p&gt;

&lt;p&gt;This is the first release that supports Comments for posts. I’ll provide feedback in the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;... Part 04&lt;/code&gt; post as to how well that works (spam, comment author’s ID, etc).&lt;/p&gt;

&lt;p&gt;Thanks for staying to the end! 😊&lt;/p&gt;

&lt;p&gt;Bill Hertzing, April 24, 2021&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Jekyll" /><category term="GitHubPages" /><summary type="html">Welcome to the third part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first two post in the series How I setup this GitHub Pages Blog Site Part 01 and How I setup this GitHub Pages Blog Site Part 02 you should probably give them a quick review, to become familiar with how the site has been built up to this point.</summary></entry><entry><title type="html">Eulogy for molly the dog</title><link href="https://billhertzing.github.io/personal/Eulogy-for-Molly-the-Dog/" rel="alternate" type="text/html" title="Eulogy for molly the dog" /><published>2021-04-24T00:00:00-06:00</published><updated>2021-04-24T00:00:00-06:00</updated><id>https://billhertzing.github.io/personal/Eulogy%20for%20Molly%20the%20Dog</id><content type="html" xml:base="https://billhertzing.github.io/personal/Eulogy-for-Molly-the-Dog/">&lt;p&gt;I didn’t think that the very first post I’d make under this personal section would be in memory of Molly. She went from healthy to deathly in just three weeks, between the birthday of this site and before the release of V0.03. So here I am writing the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; post, a tribute to a very good dog.&lt;/p&gt;

&lt;p&gt;We got Molly as a rescue in August of 2009. JoAnn and Alex picked her out; I was sandbagged the day after returning from a gig. After I reluctantly agreed to getting a dog, they had her home by the next day. The vet estimated her at 9 months old when we got her. Her papers had her name as Dolly, but JoAnn wanted a pet with &lt;em&gt;moxie&lt;/em&gt;, so Dolly became Roxy; but she was such a sweet and self-effacing thing, that by the next week, we all agreed that she didn’t have enough &lt;em&gt;moxie&lt;/em&gt; to be a &lt;em&gt;Roxy&lt;/em&gt;, so Molly she became and stayed for the next 13 years.&lt;/p&gt;

&lt;p&gt;Molly had a good dog life. She got to grow up with her boy becoming a man, swimming and tubing, hiking, camping, even snow sports. As a grand dame, she spent a year in urban Charlotte, and became comfortable with life in the big city, where she talked to everyone in the elevators and at the park.  She spent her retirement years in Park City and Deer Valley, Utah, hiking many afternoons in the mountains with her family. She was even a good sport about being costumed for Halloween! She lived to be an estimated almost fourteen, and departed  from us in April of 2021. I hope this gallery reminds us all of the good times we had together, and the memories she is taking along with her on the next stage of our journey.&lt;/p&gt;

&lt;h2 id=&quot;gallery&quot;&gt;Gallery&lt;/h2&gt;

&lt;figure class=&quot;third &quot;&gt;
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/8hiul3kqonwsukk/2009%2002%201st%20snow.JPG?raw=1&quot; title=&quot;2009 02 1st snow&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/8hiul3kqonwsukk/2009%2002%201st%20snow.JPG?raw=1&quot; alt=&quot;2009 02 1st snow&quot; /&gt;
        &lt;span&gt;2009 02 1st snow&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/xe16w5shtt8hftr/2009%2002%20Molly%20in%20her%20Panthers%20jacket.JPG?raw=1&quot; title=&quot;2009 02 Molly in her Panthers jacket&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/xe16w5shtt8hftr/2009%2002%20Molly%20in%20her%20Panthers%20jacket.JPG?raw=1&quot; alt=&quot;2009 02 Molly in her Panthers jacket&quot; /&gt;
        &lt;span&gt;2009 02 Molly in her Panthers jacket&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/7lmrgn3602lxzz6/2009%2004%20Molly%20waiting%20patiently%20for%20a%20walk.JPG?raw=1&quot; title=&quot;2009 04 Molly waiting patiently for a walk&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/7lmrgn3602lxzz6/2009%2004%20Molly%20waiting%20patiently%20for%20a%20walk.JPG?raw=1&quot; alt=&quot;2009 04 Molly waiting patiently for a walk&quot; /&gt;
        &lt;span&gt;2009 04 Molly waiting patiently for a walk&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/l9gz5m7tluytv85/2009%2004%20New%20lifejacket.JPG?raw=1&quot; title=&quot;2009 04 New lifejacket&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/l9gz5m7tluytv85/2009%2004%20New%20lifejacket.JPG?raw=1&quot; alt=&quot;2009 04 New lifejacket&quot; /&gt;
        &lt;span&gt;2009 04 New lifejacket&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/h0yh2bbx39ob09h/2010%2007%20Chillin%20on%20the%20boat.JPG?raw=1&quot; title=&quot;2010 07 Chillin on the boat&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/h0yh2bbx39ob09h/2010%2007%20Chillin%20on%20the%20boat.JPG?raw=1&quot; alt=&quot;2010 07 Chillin on the boat&quot; /&gt;
        &lt;span&gt;2010 07 Chillin on the boat&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/dp6c8ag83a9ffgj/2010%2007%20Laying%20around%20with%20Bill.jpg?raw=1&quot; title=&quot;2010 07 Laying around with Bill&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/dp6c8ag83a9ffgj/2010%2007%20Laying%20around%20with%20Bill.jpg?raw=1&quot; alt=&quot;2010 07 Laying around with Bill&quot; /&gt;
        &lt;span&gt;2010 07 Laying around with Bill&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/ll8tgk9jgutgo8a/2010%2007%20Molly%20with%20fish%20on%20dock.jpg?raw=1&quot; title=&quot;2010 07 Molly with fish on dock&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/ll8tgk9jgutgo8a/2010%2007%20Molly%20with%20fish%20on%20dock.jpg?raw=1&quot; alt=&quot;2010 07 Molly with fish on dock&quot; /&gt;
        &lt;span&gt;2010 07 Molly with fish on dock&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/8swcv9jiizclqen/2010%2007%20Molly%27s%20best%20colors.JPG?raw=1&quot; title=&quot;2010 07 Molly&apos;s best colors&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/8swcv9jiizclqen/2010%2007%20Molly%27s%20best%20colors.JPG?raw=1&quot; alt=&quot;2010 07 Molly&apos;s best colors&quot; /&gt;
        &lt;span&gt;2010 07 Molly&apos;s best colors&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/u9ppbff6zml4j44/2010%2007%20Tubing.jpg?raw=1&quot; title=&quot;2010 07 Tubing&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/u9ppbff6zml4j44/2010%2007%20Tubing.jpg?raw=1&quot; alt=&quot;2010 07 Tubing&quot; /&gt;
        &lt;span&gt;2010 07 Tubing&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/2sli0z8ce243ff1/2010%2008%20Ouch%21%20Don%27t%20bite%20bees%21.JPG?raw=1&quot; title=&quot;2010 08 Ouch! Don&apos;t bite bees!&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/2sli0z8ce243ff1/2010%2008%20Ouch%21%20Don%27t%20bite%20bees%21.JPG?raw=1&quot; alt=&quot;2010 08 Ouch! Don&apos;t bite bees!&quot; /&gt;
        &lt;span&gt;2010 08 Ouch! Don&apos;t bite bees!&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/oe92hoj8ka3grm0/2010%2012%20Molly%20with%20sweater%20in%20snow%20licking%20snowflake.JPG?raw=1&quot; title=&quot;2010 12 Molly with sweater in snow licking snowflake&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/oe92hoj8ka3grm0/2010%2012%20Molly%20with%20sweater%20in%20snow%20licking%20snowflake.JPG?raw=1&quot; alt=&quot;2010 12 Molly with sweater in snow licking snowflake&quot; /&gt;
        &lt;span&gt;2010 12 Molly with sweater in snow licking snowflake&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/007xw2geyzcrpuj/2011%2007%20Thrilled%20with%20her%20New%20Bikini.JPG?raw=1&quot; title=&quot;2011 07 Thrilled with her New Bikini&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/007xw2geyzcrpuj/2011%2007%20Thrilled%20with%20her%20New%20Bikini.JPG?raw=1&quot; alt=&quot;2011 07 Thrilled with her New Bikini&quot; /&gt;
        &lt;span&gt;2011 07 Thrilled with her New Bikini&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/4oabcb9irmgneek/2011%2008%2001%20Alex%20and%20Molly.JPG?raw=1&quot; title=&quot;2011 08 01 Alex and Molly&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/4oabcb9irmgneek/2011%2008%2001%20Alex%20and%20Molly.JPG?raw=1&quot; alt=&quot;2011 08 01 Alex and Molly&quot; /&gt;
        &lt;span&gt;2011 08 01 Alex and Molly&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/k5wn7gn97obv3eq/2011%2008%2004%201%20Molly%20hiking%20in%20Panthertown.JPG?raw=1&quot; title=&quot;2011 08 04 1 Molly hiking in Panthertown&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/k5wn7gn97obv3eq/2011%2008%2004%201%20Molly%20hiking%20in%20Panthertown.JPG?raw=1&quot; alt=&quot;2011 08 04 1 Molly hiking in Panthertown&quot; /&gt;
        &lt;span&gt;2011 08 04 1 Molly hiking in Panthertown&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/uqrt7fgtjfqmd2g/2011%2008%2004%202%20Molly%20camping%20in%20Panthertown.JPG?raw=1&quot; title=&quot;2011 08 04 2 Molly camping in Panthertown&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/uqrt7fgtjfqmd2g/2011%2008%2004%202%20Molly%20camping%20in%20Panthertown.JPG?raw=1&quot; alt=&quot;2011 08 04 2 Molly camping in Panthertown&quot; /&gt;
        &lt;span&gt;2011 08 04 2 Molly camping in Panthertown&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/vj8ksl2f0yhgoy1/2011%2008%2021%201%20JoAnn%20and%20Molly%20Mt.%20Rogers.JPG?raw=1&quot; title=&quot;2011 08 21 1 JoAnn and Molly Mt. Rogers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/vj8ksl2f0yhgoy1/2011%2008%2021%201%20JoAnn%20and%20Molly%20Mt.%20Rogers.JPG?raw=1&quot; alt=&quot;2011 08 21 1 JoAnn and Molly Mt. Rogers&quot; /&gt;
        &lt;span&gt;2011 08 21 1 JoAnn and Molly Mt. Rogers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/00jyx0msy41f58j/2011%2008%2021%202%20Molly%20and%20Bill%20at%20Mt.%20Rogers.JPG?raw=1&quot; title=&quot;2011 08 21 2 Molly and Bill at Mt. Rogers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/00jyx0msy41f58j/2011%2008%2021%202%20Molly%20and%20Bill%20at%20Mt.%20Rogers.JPG?raw=1&quot; alt=&quot;2011 08 21 2 Molly and Bill at Mt. Rogers&quot; /&gt;
        &lt;span&gt;2011 08 21 2 Molly and Bill at Mt. Rogers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/depaawvvnyroxtw/2011%2008%2021%203%20Molly%27s%20tongue.JPG?raw=1&quot; title=&quot;2011 08 21 3 Molly&apos;s tongue&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/depaawvvnyroxtw/2011%2008%2021%203%20Molly%27s%20tongue.JPG?raw=1&quot; alt=&quot;2011 08 21 3 Molly&apos;s tongue&quot; /&gt;
        &lt;span&gt;2011 08 21 3 Molly&apos;s tongue&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/fdjxpjkhff0z4xv/2011%2012%20Molly%20at%20Christmas%20with%20Alex.JPG?raw=1&quot; title=&quot;2011 12 Molly at Christmas with Alex&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/fdjxpjkhff0z4xv/2011%2012%20Molly%20at%20Christmas%20with%20Alex.JPG?raw=1&quot; alt=&quot;2011 12 Molly at Christmas with Alex&quot; /&gt;
        &lt;span&gt;2011 12 Molly at Christmas with Alex&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/ghbzrgr73m06fdy/2012%2005%20Molly%20and%20Shawn.JPG?raw=1&quot; title=&quot;2012 05 Molly and Shawn&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/ghbzrgr73m06fdy/2012%2005%20Molly%20and%20Shawn.JPG?raw=1&quot; alt=&quot;2012 05 Molly and Shawn&quot; /&gt;
        &lt;span&gt;2012 05 Molly and Shawn&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/7f3s0ovl86jjnnq/2013%2009%201%20Asher%20looking%20for%20nap%20spot.JPG?raw=1&quot; title=&quot;2013 09 1 Asher looking for nap spot&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/7f3s0ovl86jjnnq/2013%2009%201%20Asher%20looking%20for%20nap%20spot.JPG?raw=1&quot; alt=&quot;2013 09 1 Asher looking for nap spot&quot; /&gt;
        &lt;span&gt;2013 09 1 Asher looking for nap spot&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/cv7nae89a9h6hae/2013%2009%202%20Asher%20%20using%20Molly%20as%20pillow.JPG?raw=1&quot; title=&quot;2013 09 2 Asher  using Molly as pillow&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/cv7nae89a9h6hae/2013%2009%202%20Asher%20%20using%20Molly%20as%20pillow.JPG?raw=1&quot; alt=&quot;2013 09 2 Asher  using Molly as pillow&quot; /&gt;
        &lt;span&gt;2013 09 2 Asher  using Molly as pillow&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/0jk1s0czbty0am7/2013%2009%203%20Molly%20giving%20up.JPG?raw=1&quot; title=&quot;2013 09 3 Molly giving up&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/0jk1s0czbty0am7/2013%2009%203%20Molly%20giving%20up.JPG?raw=1&quot; alt=&quot;2013 09 3 Molly giving up&quot; /&gt;
        &lt;span&gt;2013 09 3 Molly giving up&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/m3jj2dtvz63luzr/2013%2009%204%20Success.jpg?raw=1&quot; title=&quot;2013 09 4 Success&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/m3jj2dtvz63luzr/2013%2009%204%20Success.jpg?raw=1&quot; alt=&quot;2013 09 4 Success&quot; /&gt;
        &lt;span&gt;2013 09 4 Success&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/qtu7xp8ig0us7qv/2014%2012%20%20Molly%20imitating%20Snoopy%20as%20vulture.JPG?raw=1&quot; title=&quot;2014 12  Molly imitating Snoopy as vulture&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/qtu7xp8ig0us7qv/2014%2012%20%20Molly%20imitating%20Snoopy%20as%20vulture.JPG?raw=1&quot; alt=&quot;2014 12  Molly imitating Snoopy as vulture&quot; /&gt;
        &lt;span&gt;2014 12  Molly imitating Snoopy as vulture&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/goovp9pf6mc6qii/2015%2010%20Hiking%20Linville%20Gorge.jpg?raw=1&quot; title=&quot;2015 10 Hiking Linville Gorge&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/goovp9pf6mc6qii/2015%2010%20Hiking%20Linville%20Gorge.jpg?raw=1&quot; alt=&quot;2015 10 Hiking Linville Gorge&quot; /&gt;
        &lt;span&gt;2015 10 Hiking Linville Gorge&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/p2cnaxxjdk8el3s/2017%2001%20Snow%20in%20Carolina.jpg?raw=1&quot; title=&quot;2017 01 Snow in Carolina&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/p2cnaxxjdk8el3s/2017%2001%20Snow%20in%20Carolina.jpg?raw=1&quot; alt=&quot;2017 01 Snow in Carolina&quot; /&gt;
        &lt;span&gt;2017 01 Snow in Carolina&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/7wa1vzi79bas2jw/2017%2006%20Taking%20Zach%27s%20cage.jpg?raw=1&quot; title=&quot;2017 06 Taking Zach&apos;s cage&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/7wa1vzi79bas2jw/2017%2006%20Taking%20Zach%27s%20cage.jpg?raw=1&quot; alt=&quot;2017 06 Taking Zach&apos;s cage&quot; /&gt;
        &lt;span&gt;2017 06 Taking Zach&apos;s cage&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/wx9zlqfa8tvuftw/2017%2006%20Zach%20is%20such%20a%20gentleman.jpg?raw=1&quot; title=&quot;2017 06 Zach is such a gentleman&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/wx9zlqfa8tvuftw/2017%2006%20Zach%20is%20such%20a%20gentleman.jpg?raw=1&quot; alt=&quot;2017 06 Zach is such a gentleman&quot; /&gt;
        &lt;span&gt;2017 06 Zach is such a gentleman&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/rg9uah191cuh9tu/2017%2007%20Going%20grey.jpg?raw=1&quot; title=&quot;2017 07 Going grey&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/rg9uah191cuh9tu/2017%2007%20Going%20grey.jpg?raw=1&quot; alt=&quot;2017 07 Going grey&quot; /&gt;
        &lt;span&gt;2017 07 Going grey&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/rnpxcjhmmyh5x27/2017%2012%20with%20a%20concerned%20Jack.jpg?raw=1&quot; title=&quot;2017 12 with a concerned Jack&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/rnpxcjhmmyh5x27/2017%2012%20with%20a%20concerned%20Jack.jpg?raw=1&quot; alt=&quot;2017 12 with a concerned Jack&quot; /&gt;
        &lt;span&gt;2017 12 with a concerned Jack&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/jtt2uy8sqao0f34/2018%2004%20Freedom%20Park%20Charlotte%20with%20Bill.jpg?raw=1&quot; title=&quot;2018 04 Freedom Park Charlotte with Bill&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/jtt2uy8sqao0f34/2018%2004%20Freedom%20Park%20Charlotte%20with%20Bill.jpg?raw=1&quot; alt=&quot;2018 04 Freedom Park Charlotte with Bill&quot; /&gt;
        &lt;span&gt;2018 04 Freedom Park Charlotte with Bill&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/6w8b1asb2ihpas5/2018%2008%20With%20Knight%27s%20mascot%20in%20Charlotte%20park.jpg?raw=1&quot; title=&quot;2018 08 With Knight&apos;s mascot in Charlotte park&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/6w8b1asb2ihpas5/2018%2008%20With%20Knight%27s%20mascot%20in%20Charlotte%20park.jpg?raw=1&quot; alt=&quot;2018 08 With Knight&apos;s mascot in Charlotte park&quot; /&gt;
        &lt;span&gt;2018 08 With Knight&apos;s mascot in Charlotte park&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/hn4tlxmlqf23wit/2018%2012%20Christmas%20sweater.jpg?raw=1&quot; title=&quot;2018 12 Christmas sweater&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/hn4tlxmlqf23wit/2018%2012%20Christmas%20sweater.jpg?raw=1&quot; alt=&quot;2018 12 Christmas sweater&quot; /&gt;
        &lt;span&gt;2018 12 Christmas sweater&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/oyl20fsfp8q9l5k/2018%20At%20Romare%20Bearden%20Park%20Charlotte.JPEG?raw=1&quot; title=&quot;2018 At Romare Bearden Park Charlotte&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/oyl20fsfp8q9l5k/2018%20At%20Romare%20Bearden%20Park%20Charlotte.JPEG?raw=1&quot; alt=&quot;2018 At Romare Bearden Park Charlotte&quot; /&gt;
        &lt;span&gt;2018 At Romare Bearden Park Charlotte&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/f8vaddjfglq6vd6/2018%20Molly%20at%20Museum%20Towers.JPEG?raw=1&quot; title=&quot;2018 Molly at Museum Towers&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/f8vaddjfglq6vd6/2018%20Molly%20at%20Museum%20Towers.JPEG?raw=1&quot; alt=&quot;2018 Molly at Museum Towers&quot; /&gt;
        &lt;span&gt;2018 Molly at Museum Towers&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/8it7tu2eefg2gdp/2019%2004%20Cash%20can%27t%20take%20no.jpg?raw=1&quot; title=&quot;2019 04 Cash can&apos;t take no&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/8it7tu2eefg2gdp/2019%2004%20Cash%20can%27t%20take%20no.jpg?raw=1&quot; alt=&quot;2019 04 Cash can&apos;t take no&quot; /&gt;
        &lt;span&gt;2019 04 Cash can&apos;t take no&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/974dx8llf4uigxo/2019%2004%20Cash%20is%20too%20pushy.jpg?raw=1&quot; title=&quot;2019 04 Cash is too pushy&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/974dx8llf4uigxo/2019%2004%20Cash%20is%20too%20pushy.jpg?raw=1&quot; alt=&quot;2019 04 Cash is too pushy&quot; /&gt;
        &lt;span&gt;2019 04 Cash is too pushy&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/f7sku31p0faenny/2019%2005%20First%20hike%20in%20retirement.JPEG?raw=1&quot; title=&quot;2019 05 First hike in retirement&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/f7sku31p0faenny/2019%2005%20First%20hike%20in%20retirement.JPEG?raw=1&quot; alt=&quot;2019 05 First hike in retirement&quot; /&gt;
        &lt;span&gt;2019 05 First hike in retirement&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/v9yae0fqthix50l/2019%2006%20Molly%20with%20Harper.JPEG?raw=1&quot; title=&quot;2019 06 Molly with Harper&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/v9yae0fqthix50l/2019%2006%20Molly%20with%20Harper.JPEG?raw=1&quot; alt=&quot;2019 06 Molly with Harper&quot; /&gt;
        &lt;span&gt;2019 06 Molly with Harper&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/h3afv0h5qw4c6xm/2019%2006%20Too%20Tired%20to%20Finish.JPEG?raw=1&quot; title=&quot;2019 06 Too Tired to Finish&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/h3afv0h5qw4c6xm/2019%2006%20Too%20Tired%20to%20Finish.JPEG?raw=1&quot; alt=&quot;2019 06 Too Tired to Finish&quot; /&gt;
        &lt;span&gt;2019 06 Too Tired to Finish&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/bzcw94mb6exv8om/2019%2010%201%20Molly%27s%20Costume%20Before%20Parade.JPEG?raw=1&quot; title=&quot;2019 10 1 Molly&apos;s Costume Before Parade&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/bzcw94mb6exv8om/2019%2010%201%20Molly%27s%20Costume%20Before%20Parade.JPEG?raw=1&quot; alt=&quot;2019 10 1 Molly&apos;s Costume Before Parade&quot; /&gt;
        &lt;span&gt;2019 10 1 Molly&apos;s Costume Before Parade&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/hnijxos9j3s8fe2/2019%2010%202%20Molly%27s%20Exhausted%20after%20parade.JPEG?raw=1&quot; title=&quot;2019 10 2 Molly&apos;s Exhausted after parade&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/hnijxos9j3s8fe2/2019%2010%202%20Molly%27s%20Exhausted%20after%20parade.JPEG?raw=1&quot; alt=&quot;2019 10 2 Molly&apos;s Exhausted after parade&quot; /&gt;
        &lt;span&gt;2019 10 2 Molly&apos;s Exhausted after parade&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/lbsg7lipspqr85d/2019%2012%20Hiking%20on%20Mirror%20Lake%20Hwy%20in%20the%20snow.jpg?raw=1&quot; title=&quot;2019 12 Hiking on Mirror Lake Hwy in the snow&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/lbsg7lipspqr85d/2019%2012%20Hiking%20on%20Mirror%20Lake%20Hwy%20in%20the%20snow.jpg?raw=1&quot; alt=&quot;2019 12 Hiking on Mirror Lake Hwy in the snow&quot; /&gt;
        &lt;span&gt;2019 12 Hiking on Mirror Lake Hwy in the snow&lt;/span&gt;
      &lt;/a&gt;
    
  
    
      &lt;a href=&quot;https://www.dropbox.com/s/qhk42k1g1pbfcw5/2020%2012%20Christmas.JPEG?raw=1&quot; title=&quot;2020 12 Christmas&quot;&gt;
          &lt;img src=&quot;https://www.dropbox.com/s/qhk42k1g1pbfcw5/2020%2012%20Christmas.JPEG?raw=1&quot; alt=&quot;2020 12 Christmas&quot; /&gt;
        &lt;span&gt;2020 12 Christmas&lt;/span&gt;
      &lt;/a&gt;
    
  
  
    &lt;figcaption&gt;Molly
&lt;/figcaption&gt;
  
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
&lt;/figure&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Molly" /><category term="Personal" /><summary type="html">I didn’t think that the very first post I’d make under this personal section would be in memory of Molly. She went from healthy to deathly in just three weeks, between the birthday of this site and before the release of V0.03. So here I am writing the first personal post, a tribute to a very good dog.</summary></entry><entry><title type="html">Welcome To The Personal Section Of My Site</title><link href="https://billhertzing.github.io/personal/Welcome-to-the-Personal-section-of-my-site/" rel="alternate" type="text/html" title="Welcome To The Personal Section Of My Site" /><published>2021-04-17T12:00:50-06:00</published><updated>2021-04-17T12:00:50-06:00</updated><id>https://billhertzing.github.io/personal/Welcome-to-the-Personal-section-of-my-site</id><content type="html" xml:base="https://billhertzing.github.io/personal/Welcome-to-the-Personal-section-of-my-site/">&lt;p&gt;I’ve long hoped to have a website that I can use to share information with my friends and family, without having to create content for each individual social media site. This is it!&lt;/p&gt;

&lt;p&gt;If you would like to have access to my posts and pictures about family and friends, direct message me via text message, e-mail or a phone call. I’ll add you to the list of people who have access.
In the future, I hope to have a simple login form that will make it very easy to authenticate using any of your social media apps, or using a userid / password.&lt;/p&gt;

&lt;h2 id=&quot;pictures-and-videos&quot;&gt;Pictures and Videos&lt;/h2&gt;

&lt;p&gt;I have our cameras and GoPro setup to automatically upload new media to my Dropbox storage. Since I’m already paying Dropbox for 2 TB of storage, I thought I’d simply utilize that space as the place to host media aas seen in my posts. DropBox lets me create a sharing link and it is easy to put that link into my posts. This way, the media is delivered to your browser from Dropbox (and eventually Cloudflare).&lt;/p&gt;

&lt;h3 id=&quot;example-picture&quot;&gt;Example picture&lt;/h3&gt;

&lt;p&gt;Here is an example of a picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/q38ofot7sik5h3p/firework%20art.jpg?raw=1&quot; alt=&quot;Fireworks!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure (above): Fireworks!&lt;/p&gt;

&lt;h3 id=&quot;example-video&quot;&gt;Example video&lt;/h3&gt;

&lt;p&gt;Here is an example of a video.&lt;/p&gt;

&lt;video width=&quot;1024&quot; height=&quot;768&quot; controls=&quot;controls&quot;&gt;
   &lt;source src=&quot;https://www.dropbox.com/s/3vjhbk1ewf8u327/2021%2004%2011%20Park%20City%20Closing%20Day%20Capers.mp4?raw=1&quot; type=&quot;video/mp4&quot; /&gt;
   Your browser does not support embedded videos, however, you can see the video in a new tab [[JoAnn skiing in costume on Closing Day at Park City Ski Resort  2021 04 11](https://www.dropbox.com/s/3vjhbk1ewf8u327/2021%2004%2011%20Park%20City%20Closing%20Day%20Capers.mp4?raw=1)
&lt;/video&gt;

&lt;p&gt;Figure (above): JoAnn in costume on closing day 2021 at Park City, UT&lt;/p&gt;

&lt;p&gt;This is just the first edition of this post. I expect to enhance and improve this post in the coming weeks. Thanks for stopping by!&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Introduction" /><category term="Personal" /><summary type="html">I’ve long hoped to have a website that I can use to share information with my friends and family, without having to create content for each individual social media site. This is it!</summary></entry><entry><title type="html">Why I Wanted A Blog</title><link href="https://billhertzing.github.io/political/Why-I-wanted-a-Blog/" rel="alternate" type="text/html" title="Why I Wanted A Blog" /><published>2021-04-17T12:00:50-06:00</published><updated>2021-04-17T12:00:50-06:00</updated><id>https://billhertzing.github.io/political/Why-I-wanted-a-Blog</id><content type="html" xml:base="https://billhertzing.github.io/political/Why-I-wanted-a-Blog/">&lt;ul&gt;
  &lt;li&gt;As a place to share knowledge, tips and how-tos, mostly regarding development, operations and monitoring of computer systems.&lt;/li&gt;
  &lt;li&gt;As a place to publish the reasoning that underlie my personal stance on sometimes controversial political issues.&lt;/li&gt;
  &lt;li&gt;As a place to share pictures and stories about myself and my family to other family members and our friends.
&lt;!--EndExcerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have always envied the developers who do a good job communicating with the world. They enjoy a connectivity to others that seems it must enrich their lives. I’ve always wanted my own blog site where I can write about whatever interests me, technically, politically, and personally. I have had three previous forays into blogging. Once using Blogger at Google, once trying to host my own site at 1And1 (now IONOS), and once with a site at wordpress.com. In each of these prior attempts, I’ve foundered on the technical implementation. Either the platform didn’t have the features I wanted, or the learning curve was too steep, or the cost was prohibitive. Now I’m about to try launching my fourth attempt, using the static site generator Jekyll, with the pages served by GitHub. Here’s hoping that this time I’ll be long-term successful!&lt;/p&gt;

&lt;h2 id=&quot;about-the-atap-name-used-in-the-app-and-library-branding&quot;&gt;About the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP&lt;/code&gt; name used in the app and library branding&lt;/h2&gt;

&lt;p&gt;The last 12 years of my career I owned and operated a &lt;em&gt;microISV&lt;/em&gt;, a company with a very small number of employees that focused on providing consulting services. The name of the company was ATAP Technology, Inc. All the code I wrote on my own during that time, (the portion of code which was not directly funded by my customers), used the namespace and branding of ATAP Technology. When I retired, I closed the company. That body of code I have continued to use and extend in my Open Source Software projects. As the author of the code, and the prior owner and CEO of ATAP Technology, I have placed it into the public domain under the MIT license. I’d love to hear from any lawyers on how best to ensure the code I’ve written and published stays in the public domain.&lt;/p&gt;

&lt;h2 id=&quot;technical-postings&quot;&gt;Technical postings&lt;/h2&gt;

&lt;p&gt;I’m here to show that a single individual, retired from a career in computer engineering, can put together a satisfying experience for contributing to the state of the art in software engineering. This means doing it as much as possible in free, open source software (OSS). But not completely free, as I’ve chosen to spend a bit of my retirement money on upgraded components. I spend maybe $500 USD a year in software licensing fees, which is not cheap but covers paid licenses for various tools. There are plenty other tools I would like to have / use, but I no longer have the luxury of a corporate employer to purchase them! Free tools usually are limited in what they can do, compared to the paid ones. Not saying free ones can’t get the job done, but you often have to string together multiple free tools, and that takes more time. The technical posts here will offer insights into how to use various free tools and how to combine them to make development and writing about development easier.&lt;/p&gt;

&lt;p&gt;The technical posts fall into two broad categories. The first category are posts that discuss the OSS application and libraries that I am creating. The second category deals with tips and how-to posts regarding specific tools, libraries, and techniques I use in my day-to-day development activities.&lt;/p&gt;

&lt;p&gt;I’m publishing my work now because it has reached a stage I need to invite comment and criticism, and to do that I have to announce it exists, and have a place where people can stop by and have a look. The other obvious (to me!) reason is that there is probably only about a decade of my life left to try and give back to the OSS community a meaningful contribution, and if I don’t start now, then, as Pink Floyd said “… no one told you when to run, you missed the starting gun…”. The whole application, library, and blog site pastiche is certainly still in it’s early stages, but I invite you to come along for the ride.&lt;/p&gt;

&lt;h3 id=&quot;the-oss-app-and-libraries-that-i-write&quot;&gt;The OSS app and libraries that I write&lt;/h3&gt;

&lt;p&gt;I have often espoused to my friends my dreams of building a wide-ranging multi-function application. That application resides in the repository named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ace&lt;/code&gt;. As much as possible, the code base for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ace&lt;/code&gt; is factored into multiple Nuget packages bundled under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP.Utilities&lt;/code&gt; repository. There are additional repositories that expand on, test, and document specific packages found under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP.Utilities&lt;/code&gt; repository. I use these as communication and teaching tools to provide deeper insights into the details of the packages, and to interact with other developers to extend and enhance the packages functionality.&lt;/p&gt;

&lt;p&gt;The relationships between the repositories I’ve created is explained in the post &lt;em&gt;&lt;a href=&quot;https://ToDo:&quot;&gt;Repository Inter-Relationships&lt;/a&gt;. Still in Draft&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;political-postings&quot;&gt;Political postings&lt;/h2&gt;

&lt;p&gt;All too often, friends and acquaintances repost stuff on social media with no critical thinking. It is easy to hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;share&lt;/code&gt; when something that resonates as ‘true’ or funny appears, without spending hardly any time to think about it and decide if it true or not, or if it causes anger to a faction of people. When a social issue that is a hot button with my friends appears, my preference is to dig into news and opinions, think about it, and sometimes take the time to write down my conclusions and reasoning. In the past, I’ve posted long comments on friends’ Facebook pages, &lt;em&gt;(haha, you know who you are)&lt;/em&gt;. I’d rather post those screeds here for general access, instead of on a single social media platform.  I’m hoping to figure out a way to reach my friends and acquaintances through their preferred platform, and notify them when I write a &lt;em&gt;political&lt;/em&gt; post here, in order to ask them for their opinions and feedback.&lt;/p&gt;

&lt;h2 id=&quot;pictures-and-stories&quot;&gt;Pictures and Stories&lt;/h2&gt;

&lt;p&gt;Such fun it is, to work on a mashup of text, images, and video of your latest family event for hours, so you can share it with world. Then you post it to your preferred platform, only to learn that many of your friends didn’t see it. Why? Because “oh, I don’t spend much time online on blah anymore, I’m mostly online on bleh.”. Frustrating, isn’t it? So I’ll try doing that same mashup of text and images memorializing our next fun outing or family get-together on this blog site, using the Jekyll toolchain to stich it all together, and a cloud service like Dropbox to host the media, and a CDN like Cloudflare to make access quicker. Some posts and media I’ll make available to the world, and others will be only accessible if granted access. Then all I need is a notification to friends and family to “take a look”. For that, I can educate them on RSS Feeds, IFTTT, how to subscribe to the Bill’s Blog RSS feed, and how to stitch it all together so they get an e-mail if I make a new or updated post. Voilà, no more being tied to a single platform. I’ll be posting those instructions here too, at &lt;em&gt;&lt;a href=&quot;https://ToDo&quot;&gt;How to get an e-mail from Bill’s Blog when a new post is made&lt;/a&gt; Still in Draft&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Humans have an innate desire to communicate. I built this blog to communicate. I hope that what I have to say is considered interesting by a large number of folks, and that I’m able to establish a rapport and correspondence with many. I also hope that I can model behavior that encourages others to follow my blog’s philosophy and actions.&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;

&lt;p&gt;This content is all mine, no attributions for this post :-)&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="political" /><category term="political" /><summary type="html">As a place to share knowledge, tips and how-tos, mostly regarding development, operations and monitoring of computer systems. As a place to publish the reasoning that underlie my personal stance on sometimes controversial political issues. As a place to share pictures and stories about myself and my family to other family members and our friends.</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 02</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-02/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 02" /><published>2021-04-17T12:00:50-06:00</published><updated>2021-04-17T12:00:50-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-02</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-02/">&lt;p&gt;Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Part 01&lt;/a&gt;, you should probably give it a quick review, to become familiar with how it all started.&lt;/p&gt;
=======
&lt;/figure&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Personal" /><category term="Molly" /><summary type="html">I didn’t think that the very first post I’d make under this personal section would be in memory of Molly. She went from healthy to deathly in just three weeks, between the birthday of this site and before the release of V0.03. So here I am writing the first personal post, a tribute to a very good dog.</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 02</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-02/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 02" /><published>2021-04-17T12:00:50-06:00</published><updated>2021-04-17T12:00:50-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-02</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-02/">&lt;p&gt;Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHub Pages Blog Part 01&lt;/a&gt;, you should probably give it a quick review, to become familiar with how it all started.&lt;/p&gt;
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)

&lt;p&gt;The next steps will be to implement the features specified in &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/2&quot;&gt;Milestone 0.02.0&lt;/a&gt;.  I like to plan my development efforts using GitHub Milestones. They are quick and easy to create and maintain, especially for tiny sites like mine that have no collaborators. Of course I don’t &lt;strong&gt;&lt;em&gt;have&lt;/em&gt;&lt;/strong&gt; to create Milestones, but I’ve found that there is always “feature creep” in releases if I don’t take the time to write down what is going into the next release, and what’s on tap for some future release. This helps me keep to the release cadence I want, and ensures these posts corresponding to each release don’t get too big!&lt;/p&gt;

&lt;p&gt;This release is mostly adding files that are common to a good repository, and then adding the ability to add comments to a post.&lt;/p&gt;

&lt;p&gt;Lets move on!&lt;/p&gt;

&lt;h2 id=&quot;create-_drafts-folder&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; folder&lt;/h2&gt;

&lt;p&gt;Being able to work on a draft of a post, and not have that draft appear on the production site, is important during development. Jekyll has built in support for drafts, using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; folder. Simply create the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; under the root of your repository.&lt;/p&gt;

&lt;h2 id=&quot;create-a-draft-post&quot;&gt;Create a draft post&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how-i-setup-this-github-pages-blog-site-part-02.md&lt;/code&gt; under the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory. Do not add the &lt;em&gt;YYYY-MM-DD&lt;/em&gt; prefix to this file.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter text to the file. Modify it as appropriate for your site. &lt;em&gt;Note&lt;/em&gt; There is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date:&lt;/code&gt; key in a draft post. Jekyll will insert that key when you promote the post out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; and publish it for the first time.&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: How I setup this GitHub Pages Blog, Part 2
 tags: Jekyll &quot;GitHubPages&quot;
 layout: post
 description: Second steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;
 Add text you want to see in your second post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and commit.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;. Jekyll will build the drafts with the current date so they will be easy to find at the top of your (chronologically sorted) post listings.&lt;/li&gt;
  &lt;li&gt;Validate your new post exists locally.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;community-health-files&quot;&gt;Community Health files&lt;/h2&gt;

&lt;p&gt;GitHub encourages authors to ensure their repositories are setup for building communities for healthy and effective collaboration. Details are at &lt;a href=&quot;https://docs.github.com/en/communities&quot;&gt;Building communities&lt;/a&gt;. The first guideline is &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions&quot;&gt;Setting up your project for healthy contributions&lt;/a&gt;. Among other things, it recommends &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project&quot;&gt;Adding a code of conduct to your project&lt;/a&gt; and &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors&quot;&gt;Setting guidelines for repository contributors&lt;/a&gt;. But what if you have more than one repository? Do you have to duplicate these files in every one? No, you can setup defaults for these files, and have every repository inherit from your default. Details are in &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&quot;&gt;Creating a default community health file&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-github-repo&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repo&lt;/h3&gt;

&lt;p&gt;I’m not going to repeat here the instructions you can find on the GitHub doc above. But at this point in the development of this site, I created the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; public repository under my username, and added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODE_OF_CONDUCT.md&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; files to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repo. ToDo: insert jpg&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; I changed my GitHub theme to Dark, so the screen shots of GitHub are going to look different from Part 1 of this series!&lt;/p&gt;

&lt;p&gt;Now go look at your site’s repository in GitHub, drill down into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insights&lt;/code&gt;, and then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Community&lt;/code&gt; tab, and you can see that both of these files are now present in this repository’s Community Profile! ToDo: insert jpg&lt;/p&gt;

&lt;h3 id=&quot;how-to-link-to-these-default-files&quot;&gt;How to link to these default files&lt;/h3&gt;

&lt;p&gt;Lets add links to both of these files, both here, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt; template. From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insights-&amp;gt;Community&lt;/code&gt; page, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code of conduct&lt;/code&gt; link, the in the browser’s address bar, copy the URL showing. Mine looks like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&lt;/code&gt;. Create a markdown link to this as follows:&lt;/p&gt;

&lt;notextile&gt;[Code of Conduct](https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md)&lt;/notextile&gt;
&lt;p&gt;produces &lt;a href=&quot;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt;.&lt;/p&gt;

&lt;notextile&gt;[CONTRIBUTING](https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md)&lt;/notextile&gt;
&lt;p&gt;produces
&lt;a href=&quot;https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt;, add the following code just below the copyright:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Code of Conduct&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;CONTRIBUTING&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-readmemd&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt; file at the root of a repo will get displayed to visitors on the repo’s landing page. Here are some posts with great ideas&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://meakaakka.medium.com/a-beginners-guide-to-writing-a-kickass-readme-7ac01da88ab3#:~:text=A%20great%20README%20file%20helps,basic%20introduction%20to%20the%20software.&quot;&gt;A Beginners Guide to writing a Kickass README&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/PurpleBooth/109311bb0361f32d87a2&quot;&gt;A template to make good README.md · GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matiassingers/awesome-readme&quot;&gt;A curated list of awesome READMEs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;chetanraj/awesome-github-badges&quot;&gt;awesome-github-badges&lt;/a&gt; - add some badges to the readme&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aleen42/badges&quot;&gt;badges&lt;/a&gt; - To make badges more standard and acceptable.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;lukas-h/license-badges.md&quot;&gt;Markdown License badges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; If you want to use a badge that refers to any of the repo’s Community Health files (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODE OF CONDUCT&lt;/code&gt; AND if you want to use &lt;strong&gt;&lt;em&gt;default&lt;/em&gt;&lt;/strong&gt; Community Health files, then specify the repo &lt;em&gt;GitHubUserName&lt;/em&gt;/.github in the badge’s repo field.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Edit the file, and add whatever content you think appropriate&lt;/li&gt;
  &lt;li&gt;Commit and push to the GitHub repo.&lt;/li&gt;
  &lt;li&gt;Validate your ReadMe file now displays on the GitHub repo’s landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-changelogmd&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Having a ChangeLog for your blog site will help user’s understand changes you  have applied&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://keepachangelog.com/en/1.0.0/&quot;&gt;keep a changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to automate the ChangeLog to a degree, it is important that the commits in the repo have meaningful commit messages that are machine readable. Here are some examples of commit messages and tools that can read them.
&lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt; also has a large bibliography of tooling around Conventional Commits
&lt;a href=&quot;https://github.com/marketplace/actions/universal-changelog-generator&quot;&gt;Universal Changelog Generator action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you want to automate the generation of the ChangeLog, you need to write your commits in a standard format&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have a feature identified in the Far Future Milestone for automation in this area, so I’ll start using commits in the style specified by &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt;. According to that document, commits I’ve already made will just be ignored by the automated tooling, and the ChangeLog can be manually edited as I have done for the initial ChangeLog I create below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Edit the file, and add content appropriate for the site’s “Birthday”, and Release V1.01.1&lt;/li&gt;
  &lt;li&gt;Commit and push to the GitHub repo.&lt;/li&gt;
  &lt;li&gt;Validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; file is listed on the GitHub repo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;Code&lt;/code&gt; landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-commit-message-template&quot;&gt;Add Commit Message Template&lt;/h2&gt;

&lt;p&gt;To make it easier to create commit messages that follow a standard template, add a git commit message template to the repository and configure git to use that file. The standardized commit message template I chose for my initial version of the template can be found at &lt;a href=&quot;https://dev.to/timmybytes/keeping-git-commit-messages-consistent-with-a-custom-template-1jkm&quot;&gt;Keeping Git Commit Messages Consistent with a Custom Template&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git.commit.template.txt&lt;/code&gt; in the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file, and save it.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt; # ----------------------------------------------------------60
 WIP 
 # Header - type(scope): Brief description [ FEAT BUGFIX BREAKINGCHANGE DOC STYLE REFAC PERF TEST DATA BUILD CI CHORE SPEC WIP ]
 # ----------------------------------------------------------60
 #   Commit Key is Case insensitive, 2-letter minimum
 #    * FEAT             A new feature - SemVar PATCH
 #    * BUGFIX           A bug fix - SemVar MINOR
 #    * BREAKINGCHANGE   Breaking API change - SemVar MAJOR
 #    * DOC              Change to documentation only
 #    * STYLE            Change to style (whitespace, etc.)
 #    * REFAC            Change not related to a bug or feat
 #    * PERF             Change that affects performance
 #    * TEST             Change that adds/modifies tests
 #    * BUILD            Change to build system
 #    * CI               Change to CI pipeline/workflow
 #    * SPEC             Changes to a project Specification
 #    * CHORE            General tooling/config/min refactor
 #    * WIP              General ongoing design work on a FEAT or BUGFIX
 # ----------------------------------------------------------
    
 # ------------------------------------------------------------------------------80
 # Body - More description, if necessary
 # ------------------------------------------------------------------------------80
    
 # ------------------------------------------------------------------------------80
 # Footer - Associated issues, PRs, etc.
 See Milestone Release 0.02.00
 #    * Ex: Resolves Issue #207, see PR #15, etc.
 # ------------------------------------------------------------------------------80
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global commit.template .github/git.commit.template.txt&lt;/code&gt; to add the template to your global git config.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global core.editor &quot;code --wait&quot;&lt;/code&gt; to add VSC as git’s editor of choice. See also &lt;a href=&quot;https://stackoverflow.com/questions/30149132/multiline-git-commit-message-in-vscode/54139152#54139152&quot;&gt;MarredCheese’s answer to StackOverflow question&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that VSC is the editor for the commit message which comes up pre-populated with the template’s text.&lt;/li&gt;
  &lt;li&gt;Click on the SCM icon in the sidebar. Validate that what was the single line commit message text box at the top has expanded to contain the non-comment template lines, and blank lines wherever there was a comment. Hmmm… Wonder how we can have only non-comment lines from the template in the SCM editor’s commit text box, yet have the full template text at just a keystroke away if needed for reference  ToDo: Figure that out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When doing design work on a feature, it saves some time if you edit the template to add a reference to the feature specification or the release milestone that calls out the feature under development. Likewise if you are working on a post, and doing the edit/build/view dance, editing the template may save you some time and keystrokes.&lt;/p&gt;

&lt;h2 id=&quot;add-bug-report-and-feature-request-issue-templates&quot;&gt;Add Bug Report and Feature Request Issue Templates&lt;/h2&gt;

&lt;p&gt;Bug Report and Feature Request Issue Templates will make it easier for contributors to create issues for bug reports and feature requests. Standardizing on formats for these items early in the site’s development will make it easier for automation in the future. These files can also be part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Community Health Files&lt;/code&gt;, and default versions of these can be placed in the user’s or organization’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repository and shared amongst all of a GitHub user’s or organization’s repositories.&lt;/p&gt;

&lt;p&gt;Details on how to use the issue templates from the Community Health repo are at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository&quot;&gt;Configuring issue templates for your repository&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;[Configuring the template chooser]- [https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser]&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&quot;&gt;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates&quot;&gt;About issue and pull request templates&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Use the tool of your choice to navigate to the root of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repository that was created above in [#Create&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;repo].&lt;/li&gt;
  &lt;li&gt;Create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; in the root of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; (yes, it &lt;strong&gt;&lt;em&gt;is&lt;/em&gt;&lt;/strong&gt; confusing).&lt;/li&gt;
  &lt;li&gt;Create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt; in the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; in root of the `.github1 repository.&lt;/li&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bug_Report_Template.md&lt;/code&gt; in the new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and save it.&lt;/p&gt;

    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 name: Bug Reporting issue
 about: Use this template for reporting a bug.
 title: &quot;[DATE]: [Bug Name]&quot;
 labels: Bug issue, needs triage
 assignees: *DefaultAssigneeGithubUserName*
 ---
    
 **Do you want to request a *feature* or report a *bug*?**
 &amp;lt;!-- Please ask questions on StackOverflow or the *YourProjectName* Gitter (https://gitter.im/*TBD**). Questions will be closed. --&amp;gt;
    
 **What is the current behavior?**
    
 **If the current behavior is a bug, please provide the steps to reproduce.**
 &amp;lt;!-- A great way to do this is to provide your configuration via a GitHub gist. --&amp;gt;
    
 **What is the expected behavior?**
    
 **If this is a feature request, what is motivation or use case for changing the behavior?**
    
 **Please mention other relevant information such as your hardware, OS and version, Browser and version, and if the problem is repeatable on other hardware/OS/Browser **
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Feature_Request_Template.md&lt;/code&gt; in the new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and save it.&lt;/p&gt;

    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 name: Feature Request issue
 about: Use this template for requesting a new feature.
 title: &quot;[DATE]: [Feature Name]&quot;
 labels: Feature Request, needs triage
 assignees: *DefaultAssigneeGithubUserName*
 ---
    
 **New Behavior**
 &amp;lt;!-- Please ask questions on StackOverflow or the *YourProjectName** Gitter (https://gitter.im/*TBD*). Questions will be closed. --&amp;gt;
    
 **Suggested New feature Name**
    
 **what is motivation or use case for changing the behavior?**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Commit the change made to .github repository and sync the changes with the remote.&lt;/li&gt;
  &lt;li&gt;Validate the new templates are available in the static site repository. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-the-jekyll-timeago-plugin&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin&lt;/h2&gt;

&lt;p&gt;One of the main reasons that I am not using GitHub Pages built-in Jekyll site generator is so that I can use the entire ecosystem of Jekyll plugins. Github limits you to a white-list of approved plugins. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; is a nice simple non-approved plugin that adds simple functionality to calculate how long ago a date is. To ensure we can use non-approved plugins, lets start with this one.&lt;/p&gt;

&lt;h3 id=&quot;install-the-jekyll-timeago-plugin-locally&quot;&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin locally&lt;/h3&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-timeago&lt;/code&gt; in the Powershell window (at the base of the repo).  &lt;strong&gt;Make a note of the version installed&lt;/strong&gt;, it will be used in the next step, to the right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem ...&lt;/code&gt; line.&lt;/p&gt;

&lt;h3 id=&quot;add-the-jekyll-timeago-plugin-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt;. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-the-jekyll-timeago-plugin-to-the-_configyml-file&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jekyll-timeago&lt;/code&gt; to the plugins key. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-timeago&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;The next line looks like this in the post’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;page publication date was {{ page.date }}, which was {{ page.date | timeago }}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which renders as:&lt;/li&gt;
&lt;/ul&gt;

<<<<<<< HEAD
&lt;p&gt;page publication date was 2021-04-17 12:00:50 -0600, which was 2 weeks and 1 day ago&lt;/p&gt;
=======
&lt;p&gt;page publication date was 2021-04-17 12:00:50 -0600, which was 1 week and 6 days ago&lt;/p&gt;
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)

&lt;h2 id=&quot;put-the-most-recent-releases-tag-semantic-version-in-the-footer-template&quot;&gt;Put the most recent releases tag Semantic Version in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer&lt;/code&gt; template&lt;/h2&gt;

&lt;p&gt;The plugin &lt;a href=&quot;https://github.com/rob-murray/jekyll-version-plugin&quot;&gt;jekyll-version-plugin&lt;/a&gt; will get the latest releases tag from the local git repository.&lt;/p&gt;

&lt;h3 id=&quot;install-the-jekyll-version-plugin-plugin-locally&quot;&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-version-plugin&lt;/code&gt; plugin locally&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-version-plugin&lt;/code&gt; in the Powershell window (at the base of the repo). &lt;strong&gt;Make a note of the version installed&lt;/strong&gt;, it will be used in the next step, to the right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem ...&lt;/code&gt; line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-the-jekyll-version-plugin-plugin-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-version-plugin&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-version-plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt;. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll_version_plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-the-jekyll-version-plugin-plugin-to-the-_configyml-file&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-version-plugin&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jekyll-version-plugin&lt;/code&gt; to the plugins key. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-timeago&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll_version_plugin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;The next line looks like this in this post’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;project_version returns: {% project_version %}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which renders as:&lt;/li&gt;
&lt;/ul&gt;

<<<<<<< HEAD
&lt;p&gt;project_version returns: releases/0.03.001&lt;/p&gt;
=======
&lt;p&gt;project_version returns: releases/0.03.000-4-g452a2ab&lt;/p&gt;
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)

&lt;h3 id=&quot;parse-the-full-tag-into-a-string-suitable-for-display&quot;&gt;Parse the full tag into a string suitable for display&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The next line looks like this in this post’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;latest release tag: {% capture long_tag_name %}{% project_version %}{% endcapture %}{{ long_tag_name | remove: ‘releases/’ | split: ‘-‘ | first | prepend: ‘V’ }}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which renders as:&lt;/li&gt;
&lt;/ul&gt;

<<<<<<< HEAD
&lt;p&gt;latest release tag: V0.03.001&lt;/p&gt;
=======
&lt;p&gt;latest release tag: V0.03.000&lt;/p&gt;
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)

&lt;h3 id=&quot;place-the-results-in-the-footerhtml-file&quot;&gt;Place the results in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add the following just after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-MarkDown&quot;&gt;   &amp;lt;div class=&quot;footer-col&quot;&amp;gt;
     &amp;lt;p&amp;gt;Site Release {% capture long_tag_name %}{% project_version %}{% endcapture %}{{ long_tag_name | remove: &apos;releases/&apos; | split: &apos;-&apos; | first | prepend: &quot;V&quot; }}&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Save the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate the site’s release version information appears at the bottom of each page and each post, including the landing page.&lt;/li&gt;
  &lt;li&gt;Commit the changes with an appropriate commit message.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-jekyll-include-cache-plugin&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin&lt;/h2&gt;

&lt;p&gt;Build times for the static site locally can be significantly improved over the out-of-the-box experience. Details of one such approach can be found at &lt;a href=&quot;https://forestry.io/blog/how-i-reduced-my-jekyll-build-time-by-61/&quot;&gt;How I reduced my Jekyll build time by 61%&lt;/a&gt;. This early in the creation of this site, I don’t expect to see a whopping improvement, but getting the speedup steps done now should keep me from writing incompatible code in future releases.&lt;/p&gt;

&lt;h3 id=&quot;benchmark-the-current-build-time&quot;&gt;Benchmark the current build time&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build --profile&lt;/code&gt; to use Jekyll’s built in profiler. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-`Text&quot;&gt;  | PHASE      |   TIME |
  +------------+--------+
  | RESET      | 0.0001 |
  | READ       | 0.0900 |
  | GENERATE   | 0.0043 |
  | RENDER     | 1.1278 |
  | CLEANUP    | 0.0105 |
  | WRITE      | 0.0184 |
  +------------+--------+
  | TOTAL TIME | 1.2511 |
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure-command { bundle exec jekyll build  | out-host }&lt;/code&gt; to use Powershell’s Measure-Command applet. THis only works when building on Windows. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    TotalSeconds      : 4.1939049
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Powershell’s measurement includes all the overhead time to invoke Ruby and to clean up after the generation. This number is much closer to the “clock-time” I experience when generating the site.&lt;/p&gt;

&lt;h3 id=&quot;install-the-jekyll-include-cache-plugin-locally&quot;&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin locally&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-include-cache&lt;/code&gt; in the Powershell window (at the base of the repo). &lt;strong&gt;Make a note of the version installed&lt;/strong&gt;, it will be used in the next step, to the right of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem ...&lt;/code&gt; line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;add-the-jekyll-include-cache-plugin-to-the-gemfile&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;jekyll-include-cache&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; in the block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :jekyll_plugins do&lt;/code&gt;. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s&quot;&gt;group :jekyll_plugins do&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-feed&quot;, &quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-timeago&quot;, &quot;~&amp;gt; 0.14.0&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll_version_plugin&quot;, &quot;~&amp;gt; 2.0.0&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;gem &quot;jekyll-include-cache&quot;, &quot;~&amp;gt; 0.2.1&quot;&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;add-the-jekyll-include-cache-plugin-to-the-_configyml-file&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-include-cache&lt;/code&gt; plugin to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; in the base of the repo.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-jekyll-include-cache&lt;/code&gt; to the plugins key. The block should look like this at this point in the development of the site.&lt;/p&gt;

    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-timeago&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll_version_plugin&lt;/span&gt;
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-include-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;benchmark-the-improved-build-time&quot;&gt;Benchmark the improved build time&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build --profile&lt;/code&gt; to use Jekyll’s built in profiler. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-`Text&quot;&gt;  | PHASE      |   TIME |
  +------------+--------+
  | RESET      | 0.0001 |
  | READ       | 0.0943 |
  | GENERATE   | 0.0044 |
  | RENDER     | 1.1449 |
  | CLEANUP    | 0.0109 |
  | WRITE      | 0.0181 |
  +------------+--------+
  | TOTAL TIME | 1.2727 |
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure-command { bundle exec jekyll build  | out-host }&lt;/code&gt; to use Powershell’s Measure-Command applet. This only works when building on Windows. Here are the results:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    TotalSeconds      : 4.2954848
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HaHaHaHa - adding the cache increased the build time infinitesimally! But as any performance tester will tell you, it is important to run timing tests like these hundreds of times, throw out outliers, and take the average of the results. I’m not going to do that yet in the development of this site, but I’ll add a task to do this into the later Milestones of the project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commit the changes with an appropriate commit message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;add-draft-post-why-i-wanted-a-blog-to-political-category&quot;&gt;Add draft post &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Why I Wanted A Blog&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;political&lt;/code&gt; category&lt;/h2&gt;

&lt;p&gt;If you are not planning to implement post categories, you can ignore the following two sections. If you want catagories, follow along with these instructions, and modify them to fit your specific needs.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a subdirectory below the repo root named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;political&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a new file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory (under the repo root) called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Why I Wanted A Blog.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to the draft post:&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: Why I wanted a Blog
 tags: 
 layout: post
 description: The motives that led me to start this site
 category: political
&lt;span class=&quot;p&quot;&gt; ---
    &lt;/span&gt;
 ## TL DR
&lt;span class=&quot;p&quot;&gt;    
 -&lt;/span&gt; Replace this line with all the text you want to put into this document.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save the file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that the post appears on the home (landing) page, and the contents of the post appear as expected.&lt;/li&gt;
  &lt;li&gt;Commit the changes with an appropriate commit message.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-draft-post-welcome-to-the-personal-section-of-my-site-to-personal-category&quot;&gt;Add draft post &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to the Personal section of my site&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt; category&lt;/h2&gt;

&lt;p&gt;This part creates the second category, if you want them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a subdirectory below the repo root named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;personal&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a new file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory (under the repo root) called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome to the Personal section of my site.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following to the draft post:&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: Welcome to the Personal section of my site
 tags: Introduction Personal
 layout: post
 description: Explanation of how to register for and use the personal section of this site.
 category: personal
&lt;span class=&quot;p&quot;&gt; ---
    &lt;/span&gt;
 ## TL DR
    
 Replace this line with all the text you want to put into this document.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and commit the file&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that the post appears on the home (landing) page, and the contents of the post appear as expected.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;making-the-third-release-of-the-site&quot;&gt;Making the third release of the site&lt;/h2&gt;

&lt;p&gt;I’m happy now with the enhancements I’ve made to the blogging site. It’s time to wrap up this release. I’m going to update the checklist for “release” chores, and eventually will automate as much as I feel is worth putting in the time to do.&lt;/p&gt;

&lt;h3 id=&quot;site-minor-release-checklist&quot;&gt;Site Minor Release checklist&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Ensure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch builds cleanly, without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--drafts&lt;/code&gt; option.&lt;/li&gt;
  &lt;li&gt;Review any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;warnings&lt;/code&gt; that appear in VSC’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;problems&lt;/code&gt;. pane. Clean up the underlying issue, or decide they are OK to live with for this release. Commit any changes made during this step to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and push to the remote.&lt;/li&gt;
  &lt;li&gt;Update the ChangeLog.md. I simply cleanup the Milestone text and add it to ChangeLog. I’ll get around to automating this from the Git commit messages in a future release. Commit the ChangeLog.md and push it.&lt;/li&gt;
  &lt;li&gt;Publish the draft ` How I setup this GitHub Pages Blog, Part 3` post into _technical&lt;/li&gt;
  &lt;li&gt;Build the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch again.&lt;/li&gt;
  &lt;li&gt;Commit and sync with remote&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have committed all the changes you want for Release 0.02.0,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/0.02.000 -m &quot;Bill&apos;s Blog, second wave of features&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --tags&lt;/code&gt; to push the release tag to GitHub&lt;/li&gt;
  &lt;li&gt;Validate that the Deploy github Action ran.&lt;/li&gt;
  &lt;li&gt;Validate that the new features appear on the public site&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This concludes the second post in this series. I’ve already had to make changes to this post after publishing the first edition when Release 0.02.000 went live. I’ve still not built a post revision tracking system into the blog site, but eventually I’ll be able to come back and revise any post, and the post will show an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edition&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publication date&lt;/code&gt; for the original edition and all revisions, along with change bars or a “what’s changed” document for each post.&lt;/p&gt;

&lt;p&gt;Comments for posts should be enabled soon, until then, please use the Issues on this repository to communicate with me, if you find errors or have questions.&lt;/p&gt;

&lt;p&gt;Thanks for staying to the end. 😊&lt;/p&gt;

<<<<<<< HEAD
&lt;p&gt;Bill Hertzing, April 17, 2021&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Jekyll" /><category term="GitHubPages" /><summary type="html">Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series How I setup this GitHub Pages Blog Part 01, you should probably give it a quick review, to become familiar with how it all started.</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 01</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-01/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 01" /><published>2021-04-06T12:31:43-06:00</published><updated>2021-04-06T12:31:43-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-01</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-01/">&lt;p&gt;I have been trying for a few years to setup a web site I can use for blogging. But since there are a lot of neat features I’d like to include, every prior attempt has foundered on getting it all to hang together, along with the problems of version control for everything. And of course cost is always a consideration. Now, I’m giving it another try, this time using the GitHub Pages to host my site, and building it with Jekyll, the static site generator. Here are the steps I’ve taken to implement the features I’d like to have.&lt;/p&gt;
=======
&lt;p&gt;Bill Hertzing, April 17, 2021&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Jekyll" /><category term="GitHubPages" /><summary type="html">Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series How I setup this GitHub Pages Blog Part 01, you should probably give it a quick review, to become familiar with how it all started.</summary></entry><entry><title type="html">Welcome To The Personal Section Of My Site</title><link href="https://billhertzing.github.io/personal/Welcome-to-the-Personal-section-of-my-site/" rel="alternate" type="text/html" title="Welcome To The Personal Section Of My Site" /><published>2021-04-17T12:00:50-06:00</published><updated>2021-04-17T12:00:50-06:00</updated><id>https://billhertzing.github.io/personal/Welcome-to-the-Personal-section-of-my-site</id><content type="html" xml:base="https://billhertzing.github.io/personal/Welcome-to-the-Personal-section-of-my-site/">&lt;p&gt;I’ve long hoped to have a website that I can use to share information with my friends and family, without having to create content for each individual social media site. This is it!&lt;/p&gt;

&lt;p&gt;If you would like to have access to my posts and pictures about family and friends, direct message me via text message, e-mail or a phone call. I’ll add you to the list of people who have access.
In the future, I hope to have a simple login form that will make it very easy to authenticate using any of your social media apps, or using a userid / password.&lt;/p&gt;

&lt;h2 id=&quot;pictures-and-videos&quot;&gt;Pictures and Videos&lt;/h2&gt;

&lt;p&gt;I have our cameras and GoPro setup to automatically upload new media to my Dropbox storage. Since I’m already paying Dropbox for 2 TB of storage, I thought I’d simply utilize that space as the place to host media aas seen in my posts. DropBox lets me create a sharing link and it is easy to put that link into my posts. This way, the media is delivered to your browser from Dropbox (and eventually Cloudflare).&lt;/p&gt;

&lt;h3 id=&quot;example-picture&quot;&gt;Example picture&lt;/h3&gt;

&lt;p&gt;Here is an example of a picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/q38ofot7sik5h3p/firework%20art.jpg?raw=1&quot; alt=&quot;Fireworks!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure (above): Fireworks!&lt;/p&gt;

&lt;h3 id=&quot;example-video&quot;&gt;Example video&lt;/h3&gt;

&lt;p&gt;Here is an example of a video.&lt;/p&gt;

&lt;video width=&quot;1024&quot; height=&quot;768&quot; controls=&quot;controls&quot;&gt;
   &lt;source src=&quot;https://www.dropbox.com/s/3vjhbk1ewf8u327/2021%2004%2011%20Park%20City%20Closing%20Day%20Capers.mp4?raw=1&quot; type=&quot;video/mp4&quot; /&gt;
   Your browser does not support embedded videos, however, you can see the video in a new tab [[JoAnn skiing in costume on Closing Day at Park City Ski Resort  2021 04 11](https://www.dropbox.com/s/3vjhbk1ewf8u327/2021%2004%2011%20Park%20City%20Closing%20Day%20Capers.mp4?raw=1)
&lt;/video&gt;

&lt;p&gt;Figure (above): JoAnn in costume on closing day 2021 at Park City, UT&lt;/p&gt;

&lt;p&gt;This is just the first edition of this post. I expect to enhance and improve this post in the coming weeks. Thanks for stopping by!&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Personal" /><summary type="html">I’ve long hoped to have a website that I can use to share information with my friends and family, without having to create content for each individual social media site. This is it!</summary></entry><entry><title type="html">Why I Wanted A Blog</title><link href="https://billhertzing.github.io/political/Why-I-wanted-a-Blog/" rel="alternate" type="text/html" title="Why I Wanted A Blog" /><published>2021-04-17T12:00:50-06:00</published><updated>2021-04-17T12:00:50-06:00</updated><id>https://billhertzing.github.io/political/Why-I-wanted-a-Blog</id><content type="html" xml:base="https://billhertzing.github.io/political/Why-I-wanted-a-Blog/">&lt;ul&gt;
  &lt;li&gt;As a place to share knowledge, tips and how-tos, mostly regarding development, operations and monitoring of computer systems.&lt;/li&gt;
  &lt;li&gt;As a place to publish the reasoning that underlie my personal stance on sometimes controversial political issues.&lt;/li&gt;
  &lt;li&gt;As a place to share pictures and stories about myself and my family to other family members and our friends.
&lt;!--EndExcerpt--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have always envied the developers who do a good job communicating with the world. They enjoy a connectivity to others that seems it must enrich their lives. I’ve always wanted my own blog site where I can write about whatever interests me, technically, politically, and personally. I have had three previous forays into blogging. Once using Blogger at Google, once trying to host my own site at 1And1 (now IONOS), and once with a site at wordpress.com. In each of these prior attempts, I’ve foundered on the technical implementation. Either the platform didn’t have the features I wanted, or the learning curve was too steep, or the cost was prohibitive. Now I’m about to try launching my fourth attempt, using the static site generator Jekyll, with the pages served by GitHub. Here’s hoping that this time I’ll be long-term successful!&lt;/p&gt;

&lt;h2 id=&quot;about-the-atap-name-used-in-the-app-and-library-branding&quot;&gt;About the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP&lt;/code&gt; name used in the app and library branding&lt;/h2&gt;

&lt;p&gt;The last 12 years of my career I owned and operated a &lt;em&gt;microISV&lt;/em&gt;, a company with a very small number of employees that focused on providing consulting services. The name of the company was ATAP Technology, Inc. All the code I wrote on my own during that time, (the portion of code which was not directly funded by my customers), used the namespace and branding of ATAP Technology. When I retired, I closed the company. That body of code I have continued to use and extend in my Open Source Software projects. As the author of the code, and the prior owner and CEO of ATAP Technology, I have placed it into the public domain under the MIT license. I’d love to hear from any lawyers on how best to ensure the code I’ve written and published stays in the public domain.&lt;/p&gt;

&lt;h2 id=&quot;technical-postings&quot;&gt;Technical postings&lt;/h2&gt;

&lt;p&gt;I’m here to show that a single individual, retired from a career in computer engineering, can put together a satisfying experience for contributing to the state of the art in software engineering. This means doing it as much as possible in free, open source software (OSS). But not completely free, as I’ve chosen to spend a bit of my retirement money on upgraded components. I spend maybe $500 USD a year in software licensing fees, which is not cheap but covers paid licenses for various tools. There are plenty other tools I would like to have / use, but I no longer have the luxury of a corporate employer to purchase them! Free tools usually are limited in what they can do, compared to the paid ones. Not saying free ones can’t get the job done, but you often have to string together multiple free tools, and that takes more time. The technical posts here will offer insights into how to use various free tools and how to combine them to make development and writing about development easier.&lt;/p&gt;

&lt;p&gt;The technical posts fall into two broad categories. The first category are posts that discuss the OSS application and libraries that I am creating. The second category deals with tips and how-to posts regarding specific tools, libraries, and techniques I use in my day-to-day development activities.&lt;/p&gt;

&lt;p&gt;I’m publishing my work now because it has reached a stage I need to invite comment and criticism, and to do that I have to announce it exists, and have a place where people can stop by and have a look. The other obvious (to me!) reason is that there is probably only about a decade of my life left to try and give back to the OSS community a meaningful contribution, and if I don’t start now, then, as Pink Floyd said “… no one told you when to run, you missed the starting gun…”. The whole application, library, and blog site pastiche is certainly still in it’s early stages, but I invite you to come along for the ride.&lt;/p&gt;

&lt;h3 id=&quot;the-oss-app-and-libraries-that-i-write&quot;&gt;The OSS app and libraries that I write&lt;/h3&gt;

&lt;p&gt;I have often espoused to my friends my dreams of building a wide-ranging multi-function application. That application resides in the repository named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ace&lt;/code&gt;. As much as possible, the code base for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ace&lt;/code&gt; is factored into multiple Nuget packages bundled under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP.Utilities&lt;/code&gt; repository. There are additional repositories that expand on, test, and document specific packages found under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATAP.Utilities&lt;/code&gt; repository. I use these as communication and teaching tools to provide deeper insights into the details of the packages, and to interact with other developers to extend and enhance the packages functionality.&lt;/p&gt;

&lt;p&gt;The relationships between the repositories I’ve created is explained in the post &lt;em&gt;&lt;a href=&quot;https://ToDo:&quot;&gt;Repository Inter-Relationships&lt;/a&gt;. Still in Draft&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;political-postings&quot;&gt;Political postings&lt;/h2&gt;

&lt;p&gt;All too often, friends and acquaintances repost stuff on social media with no critical thinking. It is easy to hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;share&lt;/code&gt; when something that resonates as ‘true’ or funny appears, without spending hardly any time to think about it and decide if it true or not, or if it causes anger to a faction of people. When a social issue that is a hot button with my friends appears, my preference is to dig into news and opinions, think about it, and sometimes take the time to write down my conclusions and reasoning. In the past, I’ve posted long comments on friends’ Facebook pages, &lt;em&gt;(haha, you know who you are)&lt;/em&gt;. I’d rather post those screeds here for general access, instead of on a single social media platform.  I’m hoping to figure out a way to reach my friends and acquaintances through their preferred platform, and notify them when I write a &lt;em&gt;political&lt;/em&gt; post here, in order to ask them for their opinions and feedback.&lt;/p&gt;

&lt;h2 id=&quot;pictures-and-stories&quot;&gt;Pictures and Stories&lt;/h2&gt;

&lt;p&gt;Such fun it is, to work on a mashup of text, images, and video of your latest family event for hours, so you can share it with world. Then you post it to your preferred platform, only to learn that many of your friends didn’t see it. Why? Because “oh, I don’t spend much time online on blah anymore, I’m mostly online on bleh.”. Frustrating, isn’t it? So I’ll try doing that same mashup of text and images memorializing our next fun outing or family get-together on this blog site, using the Jekyll toolchain to stich it all together, and a cloud service like Dropbox to host the media, and a CDN like Cloudflare to make access quicker. Some posts and media I’ll make available to the world, and others will be only accessible if granted access. Then all I need is a notification to friends and family to “take a look”. For that, I can educate them on RSS Feeds, IFTTT, how to subscribe to the Bill’s Blog RSS feed, and how to stitch it all together so they get an e-mail if I make a new or updated post. Voilà, no more being tied to a single platform. I’ll be posting those instructions here too, at &lt;em&gt;&lt;a href=&quot;https://ToDo&quot;&gt;How to get an e-mail from Bill’s Blog when a new post is made&lt;/a&gt; Still in Draft&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Humans have an innate desire to communicate. I built this blog to communicate. I hope that what I have to say is considered interesting by a large number of folks, and that I’m able to establish a rapport and correspondence with many. I also hope that I can model behavior that encourages others to follow my blog’s philosophy and actions.&lt;/p&gt;

&lt;h2 id=&quot;attributions&quot;&gt;Attributions&lt;/h2&gt;

&lt;p&gt;This content is all mine, no attributions for this post :-)&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="political" /><category term="Political" /><summary type="html">As a place to share knowledge, tips and how-tos, mostly regarding development, operations and monitoring of computer systems. As a place to publish the reasoning that underlie my personal stance on sometimes controversial political issues. As a place to share pictures and stories about myself and my family to other family members and our friends.</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 01</title><link href="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-01/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 01" /><published>2021-04-06T12:31:43-06:00</published><updated>2021-04-06T12:31:43-06:00</updated><id>https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-01</id><content type="html" xml:base="https://billhertzing.github.io/technical/how-i-setup-this-github-pages-blog-site-part-01/">&lt;p&gt;I have been trying for a few years to setup a web site I can use for blogging. But since there are a lot of neat features I’d like to include, every prior attempt has foundered on getting it all to hang together, along with the problems of version control for everything. And of course cost is always a consideration. Now, I’m giving it another try, this time using the GitHub Pages to host my site, and building it with Jekyll, the static site generator. Here are the steps I’ve taken to implement the features I’d like to have.&lt;/p&gt;
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)

&lt;p&gt;If you would like to see a list of the articles online that have helped me create this site, please see the  &lt;a href=&quot;#Attributions&quot;&gt;Attributions&lt;/a&gt; section below. (ToDo: coming in release V0.02.0 and explained in Part 02 of this post)&lt;/p&gt;

&lt;p&gt;You will see the phrase ToDo: insert jpg a lot in this edition of the post.  Getting a screenshot into a responsive blog post takes a lot of steps. Along about V 0.04.0, I plan to write and blog about a Powershell script to automate parts of the process.&lt;/p&gt;

&lt;p&gt;There are two images in this edition, to show it works and provide the example href details.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;A Windows 10 PC (Laptop or desktop)&lt;/li&gt;
  &lt;li&gt;a GitHub account. make a note of your username, and throughout this document, replace &lt;em&gt;GitHubUserName&lt;/em&gt; and also BillHertzing with YOUR GitHub username&lt;/li&gt;
  &lt;li&gt;Powershell installed and updated on Windows 10&lt;/li&gt;
  &lt;li&gt;Git for Windows (or alternative Git client) installed on Windows 10&lt;/li&gt;
  &lt;li&gt;Visual Studio Code (VSC) (or similar editor) installed on Windows 10&lt;/li&gt;
  &lt;li&gt;VSC GitHub integration, at &lt;a href=&quot;https://code.visualstudio.com/docs/editor/github&quot;&gt;Working with GitHub in VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-ruby-and-jekyll-on-your-windows-pc&quot;&gt;Install Ruby and Jekyll on your Windows PC&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; if you need to clean up a botched prior attempt (me!), and you would like to remove all gems you may have installed, run this command in a Powershell terminal window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem uninstall -aIx&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;ToDo: Investigate using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;chocolatey&lt;/a&gt; to install both Ruby and MSYS2, as this will greatly simply keeping the toolchain up-to-date.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;RubyInstaller for Windows&lt;/a&gt;. Select a recent Ruby+DevKit version (I picked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyInstaller 3.0.0-1 released&lt;/code&gt;) and use the default options in the installation wizard. On the last step, you’ll want to keep the option “Run ‘ridk install’ to setup MSYS2 and development toolchain.” checked. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Close the Powershell prompt window, and open a new one (this one will have the updated environment PATH information)&lt;/li&gt;
  &lt;li&gt;At the Powershell prompt, Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll bundle&lt;/code&gt;. This installed Jekyll V4.2.0 (on 2021-04-05), and a total of 28 gems. ToDo: embed screenshot&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll -v&lt;/code&gt; and confirm Jekyll returns its current version number. &lt;img src=&quot;https://www.dropbox.com/s/mvcm5kio1b3ocim/001%20Validate%20Jekyll%20Version.png?raw=1&quot; alt=&quot;Jekyll version 4.2.0&quot; style=&quot;vertical-align:bottom&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This is one example of an image hosted on Dropbox in this initial edition of this post.&lt;/em&gt;
ToDo: Add responsive sizes attribute to the image tag and create multiple sizes of the image.&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-git-repository&quot;&gt;Create a new git repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal, navigate to the location (directory) you want to be the parent of your repository. My parent directory is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Dropbox\whertzing\GitHub\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create a subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*GitHubUserName*.github.io&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. &lt;img src=&quot;https://www.dropbox.com/s/mvcm5kio1b3ocim/001%20Validate%20Jekyll%20Version.png?raw=1&quot; alt=&quot;git init results&quot; style=&quot;vertical-align:bottom&quot; /&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This is one example of an image hosted on Dropbox in this initial edition of this post.&lt;/em&gt;
ToDo: Add responsive sizes attribute to the image tag and create multiple sizes of the image.&lt;/p&gt;

&lt;h2 id=&quot;create-minimal-jekyll-compliant-site-source-code&quot;&gt;Create minimal Jekyll-compliant site source code&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new PATH&lt;/code&gt; (Use the FULL Path to the repository on your windows PC i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Dropbox\whertzing\GitHub\BillHertzing.github.io&lt;/code&gt;) which will create the bare bones of the new Jekyll-compliant site source code. ToDo: add jpg&lt;/li&gt;
  &lt;li&gt;(optional) I prefer to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.markdown&lt;/code&gt; for the suffix of Markdown files, so I now run the two commands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv about.markdown about.md&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv index.markdown index.md&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So at this point, I’ll diverge from the many other posts about setting up Jekyll for GitHub Pages. I may want to eventually develop a Jekyll Plugin and I know I’ll want to eventually publish my own Jekyll theme, so might as well start with an approach that will support that. Because I want to use the latest Ruby and MSYS2 components, non-approved Jekyll Plugins and a non-approved Jekyll theme, I will keep the site source code under the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch of my repository, build/debug the site locally on my Windows PC, commit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; along with the source when I do commits, and use the GitHub Action to deploy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.\_site&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh_pages&lt;/code&gt; branch on GitHub only when a release happens.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file, and remove a lot of the boiler plate. At this point, mine looks like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Jekyll initial configuration file for BillHertzing.github.io V0.01.0&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Bill&apos;s Blog&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this means to ignore newlines until the next key, which is &quot;baseurl:&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;Technical articles for my code repositories. Position papers on political issues. Cute pictures of the kids. I&apos;ve got it all!&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the subpath of your site, e.g. /blog&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://BillHertzing.github.io&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a User GitHub Pages site, not a Project GitHub Pages  site&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;twitter_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;BillHertzing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;github_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;BillHertzing&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Build settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pretty&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;minima&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;download-the-minima-theme&quot;&gt;Download the minima theme&lt;/h2&gt;

&lt;p&gt;Any Jekyll theme you want to use must first be downloaded to your Windows PC so run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-theme-minima&lt;/code&gt;. Today (2021-04-06) it loaded jekyll-theme-minima-0.1.1.gem and 18 other gems (dependencies) as well.&lt;/p&gt;

&lt;h2 id=&quot;verify-the-local-site-will-build-and-serve-locally-on-your-windows-pc&quot;&gt;Verify the local site will build and serve locally on your Windows PC&lt;/h2&gt;

&lt;p&gt;It is a good idea to be able to see what your site will look like, before committing the changes to GitHub. By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; will read the site’s source from the current directory, then process it and publish it to a subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;. The command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; will start a local web server and serve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; will also build the site if any source file has been changed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal and navigate to your repository.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fixing-issues&quot;&gt;Fixing issues&lt;/h3&gt;

&lt;p&gt;Did you really think that everything would ‘just work’?  Hahaha! When I first try this today, I get an error message “Could not find gem tzinfo-data”. Typically, new versions of one tool might break a dependency used somewhere else. In this particular case, the latest version of Ruby (3.0.0 today) no longer includes that gem by default. So, I needed to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install tzinfo-data&lt;/code&gt;. Then when I tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, I got an error message ““Could not find gem wdm”. So I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install wdm&lt;/code&gt;. And then again for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webrick&lt;/code&gt;, which required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle add webrick&lt;/code&gt;. Then I learned to change the command to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;.  Depending on how much things have changed between the time I write this and the time you try to follow it, there may be other dependency changes, so just keep on trying to build and fixing the issues, until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; completes and starts serving up pages.  I also ran into problems with the Bundler version, getting the error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cannot load such file -- C:/Ruby30-x64/lib/ruby/gems/3.0.0/gems/bundler-2.2.3/libexec/bundle (LoadError)&lt;/code&gt;. After updating the Bundler with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; I needed to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; and change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundled with&lt;/code&gt; line at the bottom to match the version just installed/updated.&lt;/p&gt;

&lt;p&gt;Finally, when you’ve wrung out the bugs, Jekyll will serve the site locally. Use the browser of your choice and navigate to http://localhost:4000. With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme it should look like this:
ToDo: Insert .jpg&lt;/p&gt;

&lt;h2 id=&quot;replace-the-original-welcome-to-jekyllmarkdown-page&quot;&gt;Replace the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;welcome-to-jekyll.markdown&lt;/code&gt; page&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; subdirectory, add a new file with the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*YYYY-MM-dd-welcome-to-*whatever*&lt;/code&gt;. use your current year-month-day numerals, and change &lt;em&gt;whatever&lt;/em&gt; to whatever you want to call your first welcome post.  I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021-04-06-Welcome-To-Bills-Blog.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;look at the original file in the _posts directory, which was created by the initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new PATH&lt;/code&gt; command earlier, and copy the Front Matter to your new post, update the Front Matter to change the title, update the date to match that of your filename, add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; tag and optionally remove the categories.&lt;/li&gt;
  &lt;li&gt;In the new post, enter your initial draft of whatever you want to see on your first post, and save the file.&lt;/li&gt;
  &lt;li&gt;Delete the original file in the _posts directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;why-description-in-the-front-matter-is-important&quot;&gt;Why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; in the Front Matter is important&lt;/h3&gt;

&lt;p&gt;Putting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; in the Front Matter of your pages and posts is important. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme (and most others) will generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta&lt;/code&gt; tag in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of your published page or post. The contents of the tag will be the first paragraph of your page or post, unless you use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; key in the Front Matter. I prefer to separate my pages’ and posts’ SEO description from its first paragraph, so I always use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; key in the Front Matter.&lt;/p&gt;

&lt;h2 id=&quot;push-the-source-code-to-github&quot;&gt;Push the source code to GitHub&lt;/h2&gt;

&lt;p&gt;Now that we have things working locally, lets get our site stored up on GitHub. GitHub offers detailed instruction on how to do this here &lt;a href=&quot;https://docs.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line&quot;&gt;Adding an existing project to GitHub using the command line&lt;/a&gt;. What follows here are the summarized steps I took.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal and navigate to your repository.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;  This will add all the local files to your local repository and stage them for a commit&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;First commit&quot;&lt;/code&gt;  This Commits the tracked changes and prepares them to be pushed to a remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;create-a-new-repository-on-github&quot;&gt;Create a new repository on GitHub&lt;/h3&gt;

&lt;p&gt;Detailed instructions here &lt;a href=&quot;https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-new-repository&quot;&gt;Create a new repository on GitHub&lt;/a&gt; To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to your GitHub account  ToDo: Add .jpg&lt;/li&gt;
  &lt;li&gt;Click the New Repository button.&lt;/li&gt;
  &lt;li&gt;Enter a name and description, select Public, and don’t check anything under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize this repository with:&lt;/code&gt; section. ToDo: Add .jpg&lt;/li&gt;
  &lt;li&gt;Click the big &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create repository&lt;/code&gt; button at the bottom.&lt;/li&gt;
  &lt;li&gt;ToDo: insert jpg of the result, and highlight the link to copy&lt;/li&gt;
  &lt;li&gt;Copy the HTTPS link showing at the top of the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;push-the-local-repository-to-the-remote-repository&quot;&gt;Push the local repository to the remote repository&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal and navigate to your repository. Or just reuse an already open Powershell terminal.&lt;/li&gt;
  &lt;li&gt;Details are available at &lt;a href=&quot;https://docs.github.com/en/github/getting-started-with-github/managing-remote-repositories&quot;&gt;Managing remote repositories&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add origin  &amp;lt;REMOTE_URL&amp;gt;&lt;/code&gt;  Of course, replace &lt;REMOTE_URL&gt; with the URL you just copied from GitHub. Mine looked like this: `git remote add origin https://github.com/BillHertzing/Bill.Hertzing.github.io.git`&lt;/REMOTE_URL&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt; to confirm that the origin is indeed set to the URL for the remote repository you just created on GitHub.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -M main&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -u origin main&lt;/code&gt;  This will push the changes in your local repository up to the remote repository.&lt;/li&gt;
  &lt;li&gt;Verify the source code for your site is now in GitHub. ToDo: add jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setup-visual-studio-code-vsc&quot;&gt;Setup Visual Studio Code (VSC)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Visual Studio Code application.&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open folder&lt;/code&gt; and navigate to the new repository you just created. To Do: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;modify-the-aboutmd-page&quot;&gt;Modify the About.md page&lt;/h2&gt;

&lt;p&gt;Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file for editing, select everything and delete it. Then add the following text, modifying it as appropriate for yourself.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: About
permalink: /about/
description: Information about me personally and about this blog site
---

## About Me

I started messing with electronics in High School in the early 70&apos;s, and went on to a BScEE degree and a long career in the computer field. I&apos;m currently retired, and working on OSS projects.

## About this blog

I started this blog to document the OSS repositories I&apos;m building.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;confirm-that-vsc-can-push-changes-to-github&quot;&gt;Confirm that VSC can push changes to GitHub&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Save the file. Note that the Source Control button on the link now has a badge with the number (1) and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file indicates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; for Modified. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click the VSC Source Control button inside the left sidebar.&lt;/li&gt;
  &lt;li&gt;In the message box, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update about.md&lt;/code&gt;, then click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check&lt;/code&gt; above the message box (alt text is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Note that the bottom status bar now shows there is one local commit that has not been pushed to the remote. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click on that area of the status bar, and the change should be pushed to GitHub&lt;/li&gt;
  &lt;li&gt;On GitHub, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file, and confirm that the change you just made has been pushed to the GitHub remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-a-categorized-post&quot;&gt;Add a categorized post&lt;/h2&gt;

&lt;p&gt;This site is focused on blogging, and it uses Jekyll Categories to organize them. The post you are reading now is the first post in the Category &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt;. Lets make sure our initial version of the site properly supports Categorized posts.  One way to categorize posts is to use subdirectories at the repository’s root. Posts should be  put into various subdirectories following the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*categoryname*/_posts&lt;/code&gt;. I’m going to start with this approach, rather than using a category tag in the post’s Front Matter, which is an alternative method of categorization.&lt;/p&gt;

&lt;p&gt;I know I will be putting links in one post that refer to another posts. To do so will require a link that correctly resolves to the published path of a post.  Jekyll accomplishes this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; takes a path to the post’s source &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and returns the “slug”. If a post’s source lives in e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/technical/2021-04-06-how-i-setup-this-github-pages-blog-site-part-01.md&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; returns the published path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/technical/2021/04/06/how-i-setup-this-github-pages-blog-site-part-01/&lt;/code&gt;. &lt;em&gt;Note&lt;/em&gt; there is a trailing slash in this path! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; returns the elements of the path in all lowercase letters. To make the source of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; match the destination “slug” when using Categories, &lt;strong&gt;it is important to use all lower-case in the subdirectory name and the post filename&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;ToDo: I’m still trying to eliminate a warning that happens when Jekyll builds the site. It says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deprecation: A call to &apos;{% post_url /technical/_posts/2021-04-06-how-i-setup-this-github-pages-blog-site-part-01 %}&apos; did not match a post using the new matching method of checking name (path-date-slug) equality. Please make sure that you change this tag to match the post&apos;s name exactly.&lt;/code&gt; While I thought the warning was due to casing, it seems that is not the case. I may not need to make everything lowercase. Stay tuned, I will make a future revision to this subject.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;At the root of the repository, create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt; (or whatever you want your first Category to be).&lt;/li&gt;
  &lt;li&gt;Create the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; under the new subdirectory you just created.&lt;/li&gt;
  &lt;li&gt;Create an initial post file here. Give it a name following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-*titlestring*.md&lt;/code&gt; convention.&lt;/li&gt;
  &lt;li&gt;Open the file for editing, put in the Front Matter, put in some initial text, save. My front matter at this point looks like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;How I setup this GitHub Pages Blog Part &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;01&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2021-04-06 12:31:43 -0600&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyll &quot;GitHubPages&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;First steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enable-github-pages-on-the-github-repository&quot;&gt;Enable GitHub pages on the GitHub repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; view of the repository&lt;/li&gt;
  &lt;li&gt;Create the branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Open Setting on the GitHub repository. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Scroll down to the GitHub Pages section.&lt;/li&gt;
  &lt;li&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; for the branch name. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-a-workflow-file-deploy-site-to-github-pagesyml&quot;&gt;Add a workflow file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This workflow and the actions it contains are the key to an easy blogging workflow. A great piece of OSS for GitHub Actions, combined with a workflow trigger that detects a release tag, make it all work.&lt;/p&gt;

&lt;p&gt;See the details of the Action here: &lt;a href=&quot;https://github.com/marketplace/actions/deploy-to-github-pages&quot;&gt;Deploy to GitHub Pages&lt;/a&gt; by James Ives and other contributors, also &lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;github-pages-deploy-action&lt;/a&gt;.
See the details of the trigger here: &lt;a href=&quot;https://www.codingwithcalvin.net/git-tag-based-released-process-using-github-actions/&quot;&gt;Git Tag Based Released Process Using GitHub Actions&lt;/a&gt; by Calvin A. Allen.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the directory and subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github\workflows&lt;/code&gt; in the repository.&lt;/li&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages.yml&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github\workflows&lt;/code&gt; subdirectory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ToDo: figure out how, at site generation time (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;) to read the contents of the actual file and update the text below with the actual contents, and run those contents through a regexp replacement to escape the %{ and {{ so the publish process doesn’t do any logic.
ToDo: decide on a strategy for updating a historical post if the file changes. Perhaps a revision tag for posts?
ToDo: Figure out how notify subscribers to the RSS feed if a existing post gets a new revision.
ToDo: Figure out how to e-mail an administrator if a code change triggers the need to create a post revision
ToDo: When a new site gets published, is that a good time to note any post revisions into the ChangeLog?&lt;/p&gt;

&lt;p&gt;Put the following yml code into the file, and then save it.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy generated site to GitHub Pages on gh-branch&lt;/span&gt; 

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Triggers the workflow on push requests to the main branch if the commit includes a tag that matches the Semantic Version release tag&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tags: [ releases/\d+\.\d+\.\d+ ] # yep, the first element of the tags array is a regular expression. Modify the RegExp if you use a different format for your release tags&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This line allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This workflow contains a single job called &quot;deploy-site-to-github-pages&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy-site-to-github-pages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# ToDo: investigate if a specific ubuntu is better&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout code&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Both of these fine OSS actions will do the deployment job. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# I keep both in here, but one commented out, in case I find in the future that only one or the other has a feature I might need&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# - name: Deploy 🚀&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   uses: JamesIves/github-pages-deploy-action@4.1.1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   with:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     branch: gh-pages # The branch the action should deploy to.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     folder: ./_site # The folder the action should deploy.&lt;/span&gt;
      
    &lt;span class=&quot;c1&quot;&gt;# Deploys a source to a destination.&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./_site&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the action will deploy the &amp;lt;repository root&amp;gt;/_site contents to the (default) gh-pages branch, root directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the new file and commit the changes.&lt;/p&gt;

&lt;h2 id=&quot;create-an-environment-for-the-deployment-action&quot;&gt;Create an Environment for the deployment action&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;On GitHub, in the repository, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; tab, and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Environment&lt;/code&gt;. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Name the Environment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages&lt;/code&gt;, and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configure Environment&lt;/code&gt;. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; on the following page to acknowledge the environment was created, and go back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings-&amp;gt;Environment&lt;/code&gt; page. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click on the name of the environment just created.&lt;/li&gt;
  &lt;li&gt;At the bottom of the page, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Secret&lt;/code&gt; button. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Add a Secret with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONS_STEP_DEBUG&lt;/code&gt; and value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. You can remove this Secret after the action has been debugged. There is an additional Secret &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONS_RUNNER_DEBUG&lt;/code&gt; which if set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; will provide more details in the logs. I like to set this, as well. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final Environment should look like this: ToDo: insert jpg&lt;/p&gt;

&lt;h2 id=&quot;remove-_site-from-the-gitignore-file&quot;&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the .gitignore file in the root of the repository, and remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; line. Save.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; to validate the site builds and displays as expected locally on your Windows PC.&lt;/li&gt;
  &lt;li&gt;Note in the VSC sidebar that the VSC Source Control menu-item icon has a number, and the Source Control Changes editor window now shows multiple new files under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sites&lt;/code&gt; to be committed.&lt;/li&gt;
  &lt;li&gt;Commit all the changes. I used the message “Start tracking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;”  &lt;em&gt;NOTE&lt;/em&gt; I made the changes to the original post, as specified above at (ToDo: insert link to previous place ) at this point in the development, so the jpg file also shows me removing the original post file and adding my own first post file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Sync with the remote GitHub repository.&lt;/li&gt;
  &lt;li&gt;Validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; and its files are now present on the GitHub repository. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;review-the-workflow-run&quot;&gt;Review the workflow run&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt; tab in your GitHub repository. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Drill down into the latest workflow run. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Drill down into the job log. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Expand the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; step. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;troubleshooting-the-workflow-run&quot;&gt;Troubleshooting the workflow run&lt;/h2&gt;

&lt;p&gt;I had problems with the first of the two deployment actions I tried. I left an issue for the author, then searched a bit more and came up with the second deployment action, which worked for me. I kept moving forward. The next day I got a timely response from the author, and re-tried their deployment Action. It worked, so the problem must have been a user error on my part. So I decided to leave both actions in the file, in case either becomes abandoned or out-of-date. Kudos and thanks to the authors of both of these OSS GitHub Actions!&lt;/p&gt;

&lt;h2 id=&quot;invoke-deploy-site-to-github-pages-manually&quot;&gt;Invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages&lt;/code&gt; manually&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In the repository on GitHub, drill down on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt;, look down the left column of the page, find the workflow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy generated site to GitHub Pages on gh-branch&lt;/code&gt;, and click on it. In the center, there will be a sequence of entries for each workflow run, but above that should be a section with the text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This workflow has a workflow_dispatch event trigger.&lt;/code&gt;, and a button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run workflow&lt;/code&gt;. Press that and the workflow will run, and leave a new log at the top of the workflow log entries. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-the-mit-license-file&quot;&gt;Add the MIT LICENSE file&lt;/h2&gt;

&lt;p&gt;This site uses the MIT licenses. Of course, feel free to chose a different license if such is more appropriate for your site. You can find the text of many popular licenses at the Open Source Initiative page &lt;a href=&quot;https://opensource.org/licenses&quot;&gt;Licenses &amp;amp; Standards&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Under the root of the repository, add a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE.md&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add front matter, for example&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 layout: page
 title: LICENSE
 permalink: /LICENSE/
 description: Text of the MIT License for this site
 exclude: true
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy the appropriate text from one of the OSI-approved licenses into the file and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;modify-the-footer-template&quot;&gt;Modify the footer template&lt;/h2&gt;

&lt;p&gt;It is a good idea to put a link to the license somewhere on each page, and the page footer is an unobtrusive place for this. I also like to put the copyright notice there. I followed the detailed instructions here &lt;a href=&quot;https://cyberloginit.com/2018/05/05/github-pages-jekyll-minima-customize-footer.html#:~:text=To%20customize%20the%20footer%2C%20you,Then%20customize%20footer.&quot;&gt;GitHub Pages Jekyll Minima Customize Footer&lt;/a&gt; by “Cyber Log in IT”.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; to the root of the repository.&lt;/li&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; from the &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima GitHub repository&lt;/a&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;Customize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; to your own needs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The footer.html file from the minima theme looks like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-footer h-card&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;feed-subscribe&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;feed.xml&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svg-icon orange&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;assets/minima-social-icons.svg#rss&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/use&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      {%- if site.author %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contact-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          {% if site.author.name -%}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.author.name | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          {% endif -%}
          {% if site.author.email -%}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mailto:{{ site.author.email }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          {%- endif %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      {%- endif %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ site.description | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;social-links&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {%- include social.html -%}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I modified mine to remove the author email block and add the copyright and License link. For now, I’ll use my own name for the copyright, maybe in the future the work will be taken on by a foundation (I wish!).&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-footer h-card&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;feed-subscribe&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;feed.xml&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svg-icon orange&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;assets/minima-social-icons.svg#rss&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/use&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ site.description | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;copy;&lt;/span&gt; William Hertzing 2020 - 2021 The contents of this website are under the terms of the MIT &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/LICENSE&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;License.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;social-links&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {%- include social.html -%}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, so visually its not a very appealing footer. But then, neither is the Minima theme overall. In fact, I plan to replace the minima theme with another around version 0.03.0 of this site. It’s in the Milestones (ToDo: Insert emoji for laughing uproariously).&lt;/p&gt;

&lt;h2 id=&quot;making-the-first-release-of-the-site&quot;&gt;Making the first release of the site&lt;/h2&gt;

&lt;p&gt;I’m happy now with the initial look and feel to my blogging site. I’ll make a final commit of my outstanding work, then I’ll make another commit and add a Release tag. For now, the release tags will follow the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releases/\d+\.\d+\.\d+&lt;/code&gt;. I prefer to use a full Git Annotated Tag. Details on Git Tagging can be found in &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging.&quot;&gt;Git Basics - Tagging&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have committed all the changes you want for Release 0.01.0,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/0.01.000 -m &quot;Initial release of Bill&apos;s Blog&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --tags&lt;/code&gt; to push the release tag to GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This concludes the first edition of this post. In all my career, I’ve never encountered a significant document that didn’t require revisions, and I expect this will, as well. During the course of developing this site, I plan to incorporate a revision tracking system, so (eventually), you should be able to see all the revisions I’ve done to the post, and a change log. However, my idea is that I’ll only publish post revisions when I do a site release. I may increment the third part of the site version when I publish a revision to a post. I think that is in keeping with the spirit of Semantic Versioning, since ‘fixing’ a published post would be somewhat equivalent to fixing a bug in a released software package.&lt;/p&gt;

&lt;p&gt;There are some Milestones defined in this repository’s Issues tab, which detail what I hope to accomplish in the next four revisions. Feel free to look them over if you want to know what’s coming in the next three parts to this series.&lt;/p&gt;

&lt;p&gt;Comments for posts should be enabled soon, until then, please use the Issues on this repository to communicate with me, if you find errors or have questions.&lt;/p&gt;

&lt;p&gt;Thanks for staying to the end :-).&lt;/p&gt;

&lt;p&gt;Bill Hertzing, April 8, 2021&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="technical" /><category term="Jekyll" /><category term="GitHubPages" /><summary type="html">I have been trying for a few years to setup a web site I can use for blogging. But since there are a lot of neat features I’d like to include, every prior attempt has foundered on getting it all to hang together, along with the problems of version control for everything. And of course cost is always a consideration. Now, I’m giving it another try, this time using the GitHub Pages to host my site, and building it with Jekyll, the static site generator. Here are the steps I’ve taken to implement the features I’d like to have.</summary></entry><entry><title type="html">Welcome to Bill’s Blog!</title><link href="https://billhertzing.github.io/Welcome-To-Bills-Blog/" rel="alternate" type="text/html" title="Welcome to Bill’s Blog!" /><published>2021-04-06T10:22:50-06:00</published><updated>2021-04-06T10:22:50-06:00</updated><id>https://billhertzing.github.io/Welcome-To-Bills-Blog</id><content type="html" xml:base="https://billhertzing.github.io/Welcome-To-Bills-Blog/">&lt;p&gt;This is my new Blog site, hosted by GitHub Pages.  I’ve never been satisfied with all the effort needed to setup a Blog on other hosting sites; GitHub Pages combined with the Jekyll static site generator seems like it will meet my needs with very simple administration overhead. We will see!&lt;/p&gt;

&lt;p&gt;My first post, appropriately, is on &lt;a href=&quot;/technical/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHubPages Blog site Part 01&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog site will be organized into three sections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Technical posts of interests to programmers and IT folks&lt;/li&gt;
  &lt;li&gt;Blogs about political issues that I care about (Hey, a person’s gotta vent occasionally!)&lt;/li&gt;
  &lt;li&gt;The goings-on of me, my family, and friends.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Be aware that, as planned for Version 0.02.0 of this site, the comments on these posts will be handled by &lt;a href=&quot;https://disqus.com&quot;&gt;Disqus&lt;/a&gt; and comments are stored in their servers.&lt;/p&gt;

<<<<<<< HEAD
&lt;p&gt;Please bear with me as I learn the intricacies of Jekyll, static sites, and GitHub Pages!&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><summary type="html">This is my new Blog site, hosted by GitHub Pages. I’ve never been satisfied with all the effort needed to setup a Blog on other hosting sites; GitHub Pages combined with the Jekyll static site generator seems like it will meet my needs with very simple administration overhead. We will see!</summary></entry></feed>
=======
&lt;/figure&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Molly" /><category term="Personal" /><summary type="html">I didn’t think that the very first post I’d make under this personal section would be in memory of Molly. She went from healthy to deathly in just three weeks, between the birthday of this site and before the release of V0.03. So here I am writing the first personal post, a tribute to a very good dog.</summary></entry></feed>
>>>>>>> e89d6c1 (WIP Added `jekyll-minifier`)
=======
&lt;/figure&gt;</content><author><name>William (Bill) Hertzing</name></author><category term="personal" /><category term="Personal" /><category term="Molly" /><summary type="html">I didn’t think that the very first post I’d make under this personal section would be in memory of Molly. She went from healthy to deathly in just three weeks, between the birthday of this site and before the release of V0.03. So here I am writing the first personal post, a tribute to a very good dog.</summary></entry></feed>
>>>>>>> 452a2ab (WIP Add Archives and Masthead navigation)
=======
&lt;p&gt;Please bear with me as I learn the intricacies of Jekyll, static sites, and GitHub Pages!&lt;/p&gt;</content><author><name>William (Bill) Hertzing</name></author><summary type="html">This is my new Blog site, hosted by GitHub Pages. I’ve never been satisfied with all the effort needed to setup a Blog on other hosting sites; GitHub Pages combined with the Jekyll static site generator seems like it will meet my needs with very simple administration overhead. We will see!</summary></entry></feed>
>>>>>>> ff21095 (WIP Added navbar and custom sidebar nav)
