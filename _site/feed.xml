<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://billhertzing.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://billhertzing.github.io/" rel="alternate" type="text/html" /><updated>2021-04-12T00:24:36-06:00</updated><id>https://billhertzing.github.io/feed.xml</id><title type="html">Bill’s Blog</title><subtitle>Technical articles for my code repositories. Position papers on political issues. Cute pictures of the kids. I&apos;ve got it all!</subtitle><entry><title type="html">How I Setup This Github Pages Blog Site Part 02</title><link href="https://billhertzing.github.io/2021/04/12/how-i-setup-this-github-pages-blog-site-part-02/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 02" /><published>2021-04-12T00:24:36-06:00</published><updated>2021-04-12T00:24:36-06:00</updated><id>https://billhertzing.github.io/2021/04/12/how-i-setup-this-github-pages-blog-site-part-02</id><content type="html" xml:base="https://billhertzing.github.io/2021/04/12/how-i-setup-this-github-pages-blog-site-part-02/">&lt;p&gt;Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series &lt;a href=&quot;TBD&quot;&gt;How I setup this GitHub Pages Blog&lt;/a&gt;, you should probably give it a quick review, to become familiar with how it all started.&lt;/p&gt;

&lt;p&gt;The next steps will be to implement the features specified in &lt;a href=&quot;https://github.com/BillHertzing/BillHertzing.github.io/milestone/2&quot;&gt;Milestone 0.02.0&lt;/a&gt;.  I like to plan my development efforts using GitHub Milestones. They are quick and easy to create and maintain, especially for tiny sites like mine that have no collaborators. Of course I don’t &lt;strong&gt;&lt;em&gt;have&lt;/em&gt;&lt;/strong&gt; to create Milestones, but I’ve found that there is always “feature creep” in releases if I don’t take the time to write down what is going into the next release, and what’s on tap for some future release. This helps me keep to the release cadence I want, and ensures these posts corresponding to each release don’t get too big!&lt;/p&gt;

&lt;p&gt;This release is mostly adding files that are common to a good repository, and then adding the ability to add comments to a post.&lt;/p&gt;

&lt;p&gt;Lets move on!&lt;/p&gt;

&lt;h2 id=&quot;create-_drafts-folder&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; folder&lt;/h2&gt;

&lt;p&gt;Being able to work on a draft of a post, and not have that draft appear on the production site, is important during development. Jekyll has built in support for drafts, using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; folder. Simply create the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; under the root of your repository.&lt;/p&gt;

&lt;h2 id=&quot;create-a-draft-post&quot;&gt;Create a draft post&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;how-i-setup-this-github-pages-blog-site-part-02.md&lt;/code&gt; under the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; subdirectory. Do not add the &lt;em&gt;YYYY-MM-DD&lt;/em&gt; prefix to this file.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the following Front Matter text to the file. Modify it as appropriate for your site. &lt;em&gt;Note&lt;/em&gt; There is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date:&lt;/code&gt; key in a draft post. Jekyll will insert that key when you promote the post out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; and publish it for the first time.&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 Title: How I setup this GitHub Pages Blog, Part 2
 tags: Jekyll &quot;GitHubPages&quot;
 layout: post
 description: Second steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;
 Add text you want to see in your second post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and commit.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --drafts&lt;/code&gt;. Jekyll will build the drafts with the current date so they will be easy to find at the top of your (chronologically sorted) post listings.&lt;/li&gt;
  &lt;li&gt;Validate your new post exists locally.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;community-health-files&quot;&gt;Community Health files&lt;/h2&gt;

&lt;p&gt;GitHub encourages authors to ensure their repositories are setup for building communities for healthy and effective collaboration. Details are at &lt;a href=&quot;https://docs.github.com/en/communities&quot;&gt;Building communities&lt;/a&gt;. The first guideline is &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions&quot;&gt;Setting up your project for healthy contributions&lt;/a&gt;. Among other things, it recommends &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project&quot;&gt;Adding a code of conduct to your project&lt;/a&gt; and &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors&quot;&gt;Setting guidelines for repository contributors&lt;/a&gt;. But what if you have more than one repository? Do you have to duplicate these files in every one? No, you can setup defaults for these files, and have every repository inherit from your default. Details are in &lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&quot;&gt;Creating a default community health file&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-github-repo&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repo&lt;/h3&gt;

&lt;p&gt;I’m not going to repeat here the instructions you can find on the GitHub doc above. But at this point in the development of this site, I created the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; public repository under my username, and added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODE_OF_CONDUCT.md&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt; files to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repo. ToDo: insert jpg&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; I changed my GitHub theme to Dark, so the screen shots of GitHub are going to look different from Part 1 of this series!&lt;/p&gt;

&lt;p&gt;Now go look at your site’s repository in GitHub, drill down into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insights&lt;/code&gt;, and then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Community&lt;/code&gt; tab, and you can see that both of these files are now present in this repository’s Community Profile! ToDo: insert jpg&lt;/p&gt;

&lt;h3 id=&quot;how-to-link-to-these-default-files&quot;&gt;How to link to these default files&lt;/h3&gt;

&lt;p&gt;Lets add links to both of these files, both here, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt; template. From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insights-&amp;gt;Community&lt;/code&gt; page, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code of conduct&lt;/code&gt; link, the in the browser’s address bar, copy the URL showing. Mine looks like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&lt;/code&gt;. Create a markdown link to this as follows:&lt;/p&gt;

&lt;notextile&gt;[Code of Conduct](https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md)&lt;/notextile&gt;
&lt;p&gt;produces &lt;a href=&quot;https://github.com/BillHertzing/.github/blob/main/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING.md&lt;/code&gt;.&lt;/p&gt;

&lt;notextile&gt;[CONTRIBUTING](https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md)&lt;/notextile&gt;
&lt;p&gt;produces
&lt;a href=&quot;https://github.com/BillHertzing/.github/blob/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-readmemd&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt; file at the root of a repo will get displayed to visitors on the repo’s landing page. Here are some posts with great ideas&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://meakaakka.medium.com/a-beginners-guide-to-writing-a-kickass-readme-7ac01da88ab3#:~:text=A%20great%20README%20file%20helps,basic%20introduction%20to%20the%20software.&quot;&gt;A Beginners Guide to writing a Kickass README&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/PurpleBooth/109311bb0361f32d87a2&quot;&gt;A template to make good README.md · GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matiassingers/awesome-readme&quot;&gt;A curated list of awesome READMEs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;chetanraj/awesome-github-badges&quot;&gt;awesome-github-badges&lt;/a&gt; - add some badges to the readme&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aleen42/badges&quot;&gt;badges&lt;/a&gt; - To make badges more standard and acceptable.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;lukas-h/license-badges.md&quot;&gt;Markdown License badges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; If you want to use a badge that refers to any of the repo’s Community Health files (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTRIBUTING&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CODE OF CONDUCT&lt;/code&gt; AND if you want to use &lt;strong&gt;&lt;em&gt;default&lt;/em&gt;&lt;/strong&gt; Community Health files, then specify the repo &lt;em&gt;GitHubUserName&lt;/em&gt;/.github in the badge’s repo field.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadMe.md&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Edit the file, and add whatever content you think appropriate&lt;/li&gt;
  &lt;li&gt;Commit and push to the GitHub repo.&lt;/li&gt;
  &lt;li&gt;Validate your ReadMe file now displays on the GitHub repo’s landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-changelogmd&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Having a ChangeLog for your blog site will help user’s understand changes you  have applied&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://keepachangelog.com/en/1.0.0/&quot;&gt;keep a changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to automate the ChangeLog to a degree, it is important that the commits in the repo have meaningful commit messages that are machine readable. Here are some examples of commit messages and tools that can read them.
&lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt; also has a large bibliography of tooling around Conventional Commits
&lt;a href=&quot;https://github.com/marketplace/actions/universal-changelog-generator&quot;&gt;Universal Changelog Generator action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you want to automate the generation of the ChangeLog, you need to write your commits in a standard format&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hve a feature identified in the Far Future Milestone for automation in this area, so I’ll start using commits in the style specified by &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt;. According to that document, commits I’ve already made will just be ignored by the automated tooling, and the ChangeLog can be manually edited as I have done for the initial ChangeLog I create below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChangeLog.md&lt;/code&gt; in the root of the repo.&lt;/li&gt;
  &lt;li&gt;Edit the file, and add content appropriate for the site’s “Birthday”, and Release V1.01.1&lt;/li&gt;
  &lt;li&gt;Commit and push to the GitHub repo.&lt;/li&gt;
  &lt;li&gt;Validate your ChangeLog file now displays on the GitHub repo’s landing page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-commit-message-template&quot;&gt;Add Commit Message Template&lt;/h2&gt;

&lt;p&gt;To make it easier to create commit messages that follow a standard template, add a git commit message template to the repository and configure git to use that file. The standardized commit message template I chose for my initial version of the template can be found at &lt;a href=&quot;https://dev.to/timmybytes/keeping-git-commit-messages-consistent-with-a-custom-template-1jkm&quot;&gt;Keeping Git Commit Messages Consistent with a Custom Template&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git.commit.template.txt&lt;/code&gt; in the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file, and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;    ToDo: Add final text just before release
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global commit.template .github/git.commit.template.txt&lt;/code&gt; to add the template to your global git config.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global core.editor &quot;code --wait&quot;&lt;/code&gt; to add VSC as git’s editor of choice. See also &lt;a href=&quot;https://stackoverflow.com/questions/30149132/multiline-git-commit-message-in-vscode/54139152#54139152&quot;&gt;MarredCheese’s answer to StackOverflow question &lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Validate that VSC is the editor for the commit message which comes up pre-populated with the template’s text.&lt;/li&gt;
  &lt;li&gt;Click on the SCM icon in the sidebar. Validate that what was the single line commit message text box at the top has expanded to contain the non-comment template lines, and blank lines wherever there was a comment. Hmmm… Wonder how we can have only non-comment lines from the template in the SCM editor’s commit text box, yet have the full template text at just a keystroke away if needed for reference  ToDo: Figure that out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When doing design work on a feature, it saves some time if you edit the template to add a reference to the feature specification or the release milestone that calls out the feature under development. Likewise if you are working on a post, and doing the edit/build/view dance, editing the template may save you some time and keystrokes.&lt;/p&gt;

&lt;h2 id=&quot;add-bug-report-and-feature-request-issue-templates&quot;&gt;Add Bug Report and Feature Request Issue Templates&lt;/h2&gt;

&lt;p&gt;Bug Report and Feature Request Issue Templates will make it easier for contributors to create issues for bug reports and feature requests. Standardizing on formats for these items early in the site’s development will make it easier for automation in the future. These files can also be part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Community Health Files&lt;/code&gt;, and default versions of these can be placed in the user’s or organization’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repository and shared amongst all of a GitHub user’s or organization’s repositories.&lt;/p&gt;

&lt;p&gt;Details on how to use the issue templates from the Community Health repo are at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository&quot;&gt;Configuring issue templates for your repository&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;[Configuring the template chooser]- [https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#configuring-the-template-chooser]&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&quot;&gt;https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates&quot;&gt;About issue and pull request templates&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Use the tool of your choice to navigate to the root of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; repository that was created above in [#Create&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;repo].&lt;/li&gt;
  &lt;li&gt;Create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; in the root of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; (yes, it &lt;strong&gt;&lt;em&gt;is&lt;/em&gt;&lt;/strong&gt; confusing).&lt;/li&gt;
  &lt;li&gt;Create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt; in the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt; in root of the `.github1 repository.&lt;/li&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bug_Report_Template.md&lt;/code&gt; in the new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ToDo: Add final text just before release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Feature_Request_Template.md&lt;/code&gt; in the new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_TEMPLATE&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add text similar to the following to the template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and save it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ToDo: Add final text just before release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Commit the change made to .github repository and sync the changes with the remote.&lt;/li&gt;
  &lt;li&gt;Validate the new templates are available in the static site repository. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-the-jekyll-timeago-plugin&quot;&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-timeago&lt;/code&gt; PlugIn&lt;/h2&gt;

&lt;p&gt;_configure&lt;/p&gt;

&lt;p&gt;gem install&lt;/p&gt;

&lt;p&gt;add to Gemfile&lt;/p&gt;

&lt;p&gt;page publication date was 2021-04-12 00:24:36 -0600, which was today&lt;/p&gt;</content><author><name></name></author><category term="Jekyll" /><category term="&quot;GitHubPages&quot;" /><summary type="html">Welcome to the second part of this series detailing how I setup this blog site hosted on GitHub Pages. If you have not yet seen the first post in the series How I setup this GitHub Pages Blog, you should probably give it a quick review, to become familiar with how it all started.</summary></entry><entry><title type="html">How I Setup This Github Pages Blog Site Part 01</title><link href="https://billhertzing.github.io/technical/2021/04/06/how-i-setup-this-github-pages-blog-site-part-01/" rel="alternate" type="text/html" title="How I Setup This Github Pages Blog Site Part 01" /><published>2021-04-06T12:31:43-06:00</published><updated>2021-04-06T12:31:43-06:00</updated><id>https://billhertzing.github.io/technical/2021/04/06/how-i-setup-this-github-pages-blog-site-part-01</id><content type="html" xml:base="https://billhertzing.github.io/technical/2021/04/06/how-i-setup-this-github-pages-blog-site-part-01/">&lt;p&gt;I have been trying for a few years to setup a web site I can use for blogging. But since there are a lot of neat features I’d like to include, every prior attempt has foundered on getting it all to hang together, along with the problems of version control for everything. And of course cost is always a consideration. Now, I’m giving it another try, this time using the GitHub Pages to host my site, and building it with Jekyll, the static site generator. Here are the steps I’ve taken to implement the features I’d like to have.&lt;/p&gt;

&lt;p&gt;If you would like to see a list of the articles online that have helped me create this site, please see the  &lt;a href=&quot;#Attributions&quot;&gt;Attributions&lt;/a&gt; section below. (ToDo: coming in release V0.02.0 and explained in Part 02 of this post)&lt;/p&gt;

&lt;p&gt;You will see the phrase ToDo: insert jpg a lot in this edition of the post.  Getting a screenshot into a responsive blog post takes a lot of steps. Along about V 0.04.0, I plan to write and blog about a Powershell script to automate parts of the process.&lt;/p&gt;

&lt;p&gt;There are two images in this edition, to show it works and provide the example href details.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;A Windows 10 PC (Laptop or desktop)&lt;/li&gt;
  &lt;li&gt;a GitHub account. make a note of your username, and throughout this document, replace &lt;em&gt;GitHubUserName&lt;/em&gt; and also BillHertzing with YOUR GitHub username&lt;/li&gt;
  &lt;li&gt;Powershell installed and updated on Windows 10&lt;/li&gt;
  &lt;li&gt;Git for Windows (or alternative Git client) installed on Windows 10&lt;/li&gt;
  &lt;li&gt;Visual Studio Code (VSC) (or similar editor) installed on Windows 10&lt;/li&gt;
  &lt;li&gt;VSC GitHub integration, at &lt;a href=&quot;https://code.visualstudio.com/docs/editor/github&quot;&gt;Working with GitHub in VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-ruby-and-jekyll-on-your-windows-pc&quot;&gt;Install Ruby and Jekyll on your Windows PC&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; if you need to clean up a botched prior attempt (me!), and you would like to remove all gems you may have installed, run this command in a Powershell terminal window &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem uninstall -aIx&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;ToDo: Investigate using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;chocolatey&lt;/a&gt; to install both Ruby and MSYS2, as this will greatly simply keeping the toolchain up-to-date.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;RubyInstaller for Windows&lt;/a&gt;. Select a recent Ruby+DevKit version (I picked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyInstaller 3.0.0-1 released&lt;/code&gt;) and use the default options in the installation wizard. On the last step, you’ll want to keep the option “Run ‘ridk install’ to setup MSYS2 and development toolchain.” checked. ToDo: insert jpgs&lt;/li&gt;
  &lt;li&gt;Close the Powershell prompt window, and open a new one (this one will have the updated environment PATH information)&lt;/li&gt;
  &lt;li&gt;At the Powershell prompt, Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll bundle&lt;/code&gt;. This installed Jekyll V4.2.0 (on 2021-04-05), and a total of 28 gems. ToDo: embed screenshot&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll -v&lt;/code&gt; and confirm Jekyll returns its current version number. &lt;img src=&quot;https://www.dropbox.com/s/mvcm5kio1b3ocim/001%20Validate%20Jekyll%20Version.png?raw=1&quot; alt=&quot;Jekyll version 4.2.0&quot; style=&quot;vertical-align:bottom&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This is one example of an image hosted on Dropbox in this initial edition of this post.&lt;/em&gt;
ToDo: Add responsive sizes attribute to the image tag and create multiple sizes of the image.&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-git-repository&quot;&gt;Create a new git repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal, navigate to the location (directory) you want to be the parent of your repository. My parent directory is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Dropbox\whertzing\GitHub\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create a subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*GitHubUserName*.github.io&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. &lt;img src=&quot;https://www.dropbox.com/s/mvcm5kio1b3ocim/001%20Validate%20Jekyll%20Version.png?raw=1&quot; alt=&quot;git init results&quot; style=&quot;vertical-align:bottom&quot; /&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This is one example of an image hosted on Dropbox in this initial edition of this post.&lt;/em&gt;
ToDo: Add responsive sizes attribute to the image tag and create multiple sizes of the image.&lt;/p&gt;

&lt;h2 id=&quot;create-minimal-jekyll-compliant-site-source-code&quot;&gt;Create minimal Jekyll-compliant site source code&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new PATH&lt;/code&gt; (Use the FULL Path to the repository on your windows PC i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Dropbox\whertzing\GitHub\BillHertzing.github.io&lt;/code&gt;) which will create the bare bones of the new Jekyll-compliant site source code. ToDo: add jpg&lt;/li&gt;
  &lt;li&gt;(optional) I prefer to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.markdown&lt;/code&gt; for the suffix of Markdown files, so I now run the two commands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv about.markdown about.md&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv index.markdown index.md&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So at this point, I’ll diverge from the many other posts about setting up Jekyll for GitHub Pages. I may want to eventually develop a Jekyll Plugin and I know I’ll want to eventually publish my own Jekyll theme, so might as well start with an approach that will support that. Because I want to use the latest Ruby and MSYS2 components, non-approved Jekyll Plugins and a non-approved Jekyll theme, I will keep the site source code under the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch of my repository, build/debug the site locally on my Windows PC, commit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; along with the source when I do commits, and use the GitHub Action to deploy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.\_site&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh_pages&lt;/code&gt; branch on GitHub only when a release happens.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file, and remove a lot of the boiler plate. At this point, mine looks like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Jekyll initial configuration file for BillHertzing.github.io V0.01.0&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Bill&apos;s Blog&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this means to ignore newlines until the next key, which is &quot;baseurl:&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;Technical articles for my code repositories. Position papers on political issues. Cute pictures of the kids. I&apos;ve got it all!&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the subpath of your site, e.g. /blog&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://BillHertzing.github.io&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a User GitHub Pages site, not a Project GitHub Pages  site&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;twitter_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;BillHertzing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;github_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;BillHertzing&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Build settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pretty&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;minima&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;download-the-minima-theme&quot;&gt;Download the minima theme&lt;/h2&gt;

&lt;p&gt;Any Jekyll theme you want to use must first be downloaded to your Windows PC so run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install jekyll-theme-minima&lt;/code&gt;. Today (2021-04-06) it loaded jekyll-theme-minima-0.1.1.gem and 18 other gems (dependencies) as well.&lt;/p&gt;

&lt;h2 id=&quot;verify-the-local-site-will-build-and-serve-locally-on-your-windows-pc&quot;&gt;Verify the local site will build and serve locally on your Windows PC&lt;/h2&gt;

&lt;p&gt;It is a good idea to be able to see what your site will look like, before committing the changes to GitHub. By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; will read the site’s source from the current directory, then process it and publish it to a subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;. The command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; will start a local web server and serve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; will also build the site if any source file has been changed.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal and navigate to your repository.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fixing-issues&quot;&gt;Fixing issues&lt;/h3&gt;

&lt;p&gt;Did you really think that everything would ‘just work’?  Hahaha! When I first try this today, I get an error message “Could not find gem tzinfo-data”. Typically, new versions of one tool might break a dependency used somewhere else. In this particular case, the latest version of Ruby (3.0.0 today) no longer includes that gem by default. So, I needed to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install tzinfo-data&lt;/code&gt;. Then when I tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, I got an error message ““Could not find gem wdm”. So I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install wdm&lt;/code&gt;. And then again for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webrick&lt;/code&gt;, which required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle add webrick&lt;/code&gt;. Then I learned to change the command to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;.  Depending on how much things have changed between the time I write this and the time you try to follow it, there may be other dependency changes, so just keep on trying to build and fixing the issues, until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; completes and starts serving up pages.  I also ran into problems with the Bundler version, getting the error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cannot load such file -- C:/Ruby30-x64/lib/ruby/gems/3.0.0/gems/bundler-2.2.3/libexec/bundle (LoadError)&lt;/code&gt;. After updating the Bundler with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; I needed to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; and change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundled with&lt;/code&gt; line at the bottom to match the version just installed/updated.&lt;/p&gt;

&lt;p&gt;Finally, when you’ve wrung out the bugs, Jekyll will serve the site locally. Use the browser of your choice and navigate to http://localhost:4000. With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme it should look like this:
ToDo: Insert .jpg&lt;/p&gt;

&lt;h2 id=&quot;replace-the-original-welcome-to-jekyllmarkdown-page&quot;&gt;Replace the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;welcome-to-jekyll.markdown&lt;/code&gt; page&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; subdirectory, add a new file with the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*YYYY-MM-dd-welcome-to-*whatever*&lt;/code&gt;. use your current year-month-day numerals, and change &lt;em&gt;whatever&lt;/em&gt; to whatever you want to call your first welcome post.  I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021-04-06-Welcome-To-Bills-Blog.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;look at the original file in the _posts directory, which was created by the initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll new PATH&lt;/code&gt; command earlier, and copy the Front Matter to your new post, update the Front Matter to change the title, update the date to match that of your filename, add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; tag and optionally remove the categories.&lt;/li&gt;
  &lt;li&gt;In the new post, enter your initial draft of whatever you want to see on your first post, and save the file.&lt;/li&gt;
  &lt;li&gt;Delete the original file in the _posts directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;why-description-in-the-front-matter-is-important&quot;&gt;Why &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; in the Front Matter is important&lt;/h3&gt;

&lt;p&gt;Putting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; in the Front Matter of your pages and posts is important. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minima&lt;/code&gt; theme (and most others) will generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta&lt;/code&gt; tag in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of your published page or post. The contents of the tag will be the first paragraph of your page or post, unless you use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; key in the Front Matter. I prefer to separate my pages’ and posts’ SEO description from its first paragraph, so I always use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description:&lt;/code&gt; key in the Front Matter.&lt;/p&gt;

&lt;h2 id=&quot;push-the-source-code-to-github&quot;&gt;Push the source code to GitHub&lt;/h2&gt;

&lt;p&gt;Now that we have things working locally, lets get our site stored up on GitHub. GitHub offers detailed instruction on how to do this here &lt;a href=&quot;https://docs.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line&quot;&gt;Adding an existing project to GitHub using the command line&lt;/a&gt;. What follows here are the summarized steps I took.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal and navigate to your repository.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;  This will add all the local files to your local repository and stage them for a commit&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;First commit&quot;&lt;/code&gt;  This Commits the tracked changes and prepares them to be pushed to a remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;create-a-new-repository-on-github&quot;&gt;Create a new repository on GitHub&lt;/h3&gt;

&lt;p&gt;Detailed instructions here &lt;a href=&quot;https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-new-repository&quot;&gt;Create a new repository on GitHub&lt;/a&gt; To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to your GitHub account  ToDo: Add .jpg&lt;/li&gt;
  &lt;li&gt;Click the New Repository button.&lt;/li&gt;
  &lt;li&gt;Enter a name and description, select Public, and don’t check anything under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize this repository with:&lt;/code&gt; section. ToDo: Add .jpg&lt;/li&gt;
  &lt;li&gt;Click the big &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create repository&lt;/code&gt; button at the bottom.&lt;/li&gt;
  &lt;li&gt;ToDo: insert jpg of the result, and highlight the link to copy&lt;/li&gt;
  &lt;li&gt;Copy the HTTPS link showing at the top of the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;push-the-local-repository-to-the-remote-repository&quot;&gt;Push the local repository to the remote repository&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open a Powershell terminal and navigate to your repository. Or just reuse an already open Powershell terminal.&lt;/li&gt;
  &lt;li&gt;Details are available at &lt;a href=&quot;https://docs.github.com/en/github/getting-started-with-github/managing-remote-repositories&quot;&gt;Managing remote repositories&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add origin  &amp;lt;REMOTE_URL&amp;gt;&lt;/code&gt;  Of course, replace &lt;REMOTE_URL&gt; with the URL you just copied from GitHub. Mine looked like this: `git remote add origin https://github.com/BillHertzing/Bill.Hertzing.github.io.git`&lt;/REMOTE_URL&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt; to confirm that the origin is indeed set to the URL for the remote repository you just created on GitHub.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -M main&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -u origin main&lt;/code&gt;  This will push the changes in your local repository up to the remote repository.&lt;/li&gt;
  &lt;li&gt;Verify the source code for your site is now in GitHub. ToDo: add jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setup-visual-studio-code-vsc&quot;&gt;Setup Visual Studio Code (VSC)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Visual Studio Code application.&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open folder&lt;/code&gt; and navigate to the new repository you just created. To Do: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;modify-the-aboutmd-page&quot;&gt;Modify the About.md page&lt;/h2&gt;

&lt;p&gt;Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file for editing, select everything and delete it. Then add the following text, modifying it as appropriate for yourself.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: page
title: About
permalink: /about/
description: Information about me personally and about this blog site
---

## About Me

I started messing with electronics in High School in the early 70&apos;s, and went on to a BScEE degree and a long career in the computer field. I&apos;m currently retired, and working on OSS projects.

## About this blog

I started this blog to document the OSS repositories I&apos;m building.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;confirm-that-vsc-can-push-changes-to-github&quot;&gt;Confirm that VSC can push changes to GitHub&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Save the file. Note that the Source Control button on the link now has a badge with the number (1) and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file indicates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; for Modified. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click the VSC Source Control button inside the left sidebar.&lt;/li&gt;
  &lt;li&gt;In the message box, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update about.md&lt;/code&gt;, then click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check&lt;/code&gt; above the message box (alt text is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Note that the bottom status bar now shows there is one local commit that has not been pushed to the remote. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click on that area of the status bar, and the change should be pushed to GitHub&lt;/li&gt;
  &lt;li&gt;On GitHub, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.md&lt;/code&gt; file, and confirm that the change you just made has been pushed to the GitHub remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-a-categorized-post&quot;&gt;Add a categorized post&lt;/h2&gt;

&lt;p&gt;This site is focused on blogging, and it uses Jekyll Categories to organize them. The post you are reading now is the first post in the Category &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt;. Lets make sure our initial version of the site properly supports Categorized posts.  One way to categorize posts is to use subdirectories at the repository’s root. Posts should be  put into various subdirectories following the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*categoryname*/_posts&lt;/code&gt;. I’m going to start with this approach, rather than using a category tag in the post’s Front Matter, which is an alternative method of categorization.&lt;/p&gt;

&lt;p&gt;I know I will be putting links in one post that refer to another posts. To do so will require a link that correctly resolves to the published path of a post.  Jekyll accomplishes this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; takes a path to the post’s source &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; file, and returns the “slug”. If a post’s source lives in e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/technical/2021-04-06-how-i-setup-this-github-pages-blog-site-part-01.md&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; returns the published path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/technical/2021/04/06/how-i-setup-this-github-pages-blog-site-part-01/&lt;/code&gt;. &lt;em&gt;Note&lt;/em&gt; there is a trailing slash in this path! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; returns the elements of the path in all lowercase letters. To make the source of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post_url&lt;/code&gt; match the destination “slug” when using Categories, &lt;strong&gt;it is important to use all lower-case in the subdirectory name and the post filename&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;ToDo: I’m still trying to eliminate a warning that happens when Jekyll builds the site. It says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deprecation: A call to &apos;{% post_url /technical/_posts/2021-04-06-how-i-setup-this-github-pages-blog-site-part-01 %}&apos; did not match a post using the new matching method of checking name (path-date-slug) equality. Please make sure that you change this tag to match the post&apos;s name exactly.&lt;/code&gt; While I thought the warning was due to casing, it seems that is not the case. I may not need to make everything lowercase. Stay tuned, I will make a future revision to this subject.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;At the root of the repository, create a new subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;technical&lt;/code&gt; (or whatever you want your first Category to be).&lt;/li&gt;
  &lt;li&gt;Create the subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; under the new subdirectory you just created.&lt;/li&gt;
  &lt;li&gt;Create an initial post file here. Give it a name following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-*titlestring*.md&lt;/code&gt; convention.&lt;/li&gt;
  &lt;li&gt;Open the file for editing, put in the Front Matter, put in some initial text, save. My front matter at this point looks like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;How I setup this GitHub Pages Blog Part &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;01&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2021-04-06 12:31:43 -0600&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyll &quot;GitHubPages&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;First steps in setting up a Jekyll generated blogging site hosted on GitHub Pages which uses any plugin, theme, Jekyll version or Ruby version.&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enable-github-pages-on-the-github-repository&quot;&gt;Enable GitHub pages on the GitHub repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; view of the repository&lt;/li&gt;
  &lt;li&gt;Create the branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Open Setting on the GitHub repository. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Scroll down to the GitHub Pages section.&lt;/li&gt;
  &lt;li&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; for the branch name. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-a-workflow-file-deploy-site-to-github-pagesyml&quot;&gt;Add a workflow file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This workflow and the actions it contains are the key to an easy blogging workflow. A great piece of OSS for GitHub Actions, combined with a workflow trigger that detects a release tag, make it all work.&lt;/p&gt;

&lt;p&gt;See the details of the Action here: &lt;a href=&quot;https://github.com/marketplace/actions/deploy-to-github-pages&quot;&gt;Deploy to GitHub Pages&lt;/a&gt; by James Ives and other contributors, also &lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;github-pages-deploy-action&lt;/a&gt;.
See the details of the trigger here: &lt;a href=&quot;https://www.codingwithcalvin.net/git-tag-based-released-process-using-github-actions/&quot;&gt;Git Tag Based Released Process Using GitHub Actions&lt;/a&gt; by Calvin A. Allen.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the directory and subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github\workflows&lt;/code&gt; in the repository.&lt;/li&gt;
  &lt;li&gt;Create the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages.yml&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github\workflows&lt;/code&gt; subdirectory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ToDo: figure out how, at site generation time (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;) to read the contents of the actual file and update the text below with the actual contents, and run those contents through a regexp replacement to escape the %{ and {{ so the publish process doesn’t do any logic.
ToDo: decide on a strategy for updating a historical post if the file changes. Perhaps a revision tag for posts?
ToDo: Figure out how notify subscribers to the RSS feed if a existing post gets a new revision.
ToDo: Figure out how to e-mail an administrator if a code change triggers the need to create a post revision
ToDo: When a new site gets published, is that a good time to note any post revisions into the ChangeLog?&lt;/p&gt;

&lt;p&gt;Put the following yml code into the file, and then save it.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy generated site to GitHub Pages on gh-branch&lt;/span&gt; 

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Triggers the workflow on push requests to the main branch if the commit includes a tag that matches the Semantic Version release tag&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tags: [ releases/\d+\.\d+\.\d+ ] # yep, the first element of the tags array is a regular expression. Modify the RegExp if you use a different format for your release tags&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This line allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This workflow contains a single job called &quot;deploy-site-to-github-pages&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy-site-to-github-pages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# ToDo: investigate if a specific ubuntu is better&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout code&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Both of these fine OSS actions will do the deployment job. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# I keep both in here, but one commented out, in case I find in the future that only one or the other has a feature I might need&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# - name: Deploy 🚀&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   uses: JamesIves/github-pages-deploy-action@4.1.1&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#   with:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     branch: gh-pages # The branch the action should deploy to.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#     folder: ./_site # The folder the action should deploy.&lt;/span&gt;
      
    &lt;span class=&quot;c1&quot;&gt;# Deploys a source to a destination.&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./_site&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the action will deploy the &amp;lt;repository root&amp;gt;/_site contents to the (default) gh-pages branch, root directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the new file and commit the changes.&lt;/p&gt;

&lt;h2 id=&quot;create-an-environment-for-the-deployment-action&quot;&gt;Create an Environment for the deployment action&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;On GitHub, in the repository, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; tab, and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Environment&lt;/code&gt;. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Name the Environment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages&lt;/code&gt;, and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configure Environment&lt;/code&gt;. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; on the following page to acknowledge the environment was created, and go back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings-&amp;gt;Environment&lt;/code&gt; page. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Click on the name of the environment just created.&lt;/li&gt;
  &lt;li&gt;At the bottom of the page, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Secret&lt;/code&gt; button. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Add a Secret with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONS_STEP_DEBUG&lt;/code&gt; and value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. You can remove this Secret after the action has been debugged. There is an additional Secret &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACTIONS_RUNNER_DEBUG&lt;/code&gt; which if set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; will provide more details in the logs. I like to set this, as well. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final Environment should look like this: ToDo: insert jpg&lt;/p&gt;

&lt;h2 id=&quot;remove-_site-from-the-gitignore-file&quot;&gt;Remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the .gitignore file in the root of the repository, and remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; line. Save.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; to validate the site builds and displays as expected locally on your Windows PC.&lt;/li&gt;
  &lt;li&gt;Note in the VSC sidebar that the VSC Source Control menu-item icon has a number, and the Source Control Changes editor window now shows multiple new files under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sites&lt;/code&gt; to be committed.&lt;/li&gt;
  &lt;li&gt;Commit all the changes. I used the message “Start tracking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;”  &lt;em&gt;NOTE&lt;/em&gt; I made the changes to the original post, as specified above at (ToDo: insert link to previous place ) at this point in the development, so the jpg file also shows me removing the original post file and adding my own first post file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Sync with the remote GitHub repository.&lt;/li&gt;
  &lt;li&gt;Validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; and its files are now present on the GitHub repository. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;review-the-workflow-run&quot;&gt;Review the workflow run&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt; tab in your GitHub repository. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Drill down into the latest workflow run. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Drill down into the job log. ToDo: insert jpg&lt;/li&gt;
  &lt;li&gt;Expand the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; step. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;troubleshooting-the-workflow-run&quot;&gt;Troubleshooting the workflow run&lt;/h2&gt;

&lt;p&gt;I had problems with the first of the two deployment actions I tried. I left an issue for the author, then searched a bit more and came up with the second deployment action, which worked for me. I kept moving forward. The next day I got a timely response from the author, and re-tried their deployment Action. It worked, so the problem must have been a user error on my part. So I decided to leave both actions in the file, in case either becomes abandoned or out-of-date. Kudos and thanks to the authors of both of these OSS GitHub Actions!&lt;/p&gt;

&lt;h2 id=&quot;invoke-deploy-site-to-github-pages-manually&quot;&gt;Invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-site-to-github-pages&lt;/code&gt; manually&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;In the repository on GitHub, drill down on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt;, look down the left column of the page, find the workflow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy generated site to GitHub Pages on gh-branch&lt;/code&gt;, and click on it. In the center, there will be a sequence of entries for each workflow run, but above that should be a section with the text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This workflow has a workflow_dispatch event trigger.&lt;/code&gt;, and a button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run workflow&lt;/code&gt;. Press that and the workflow will run, and leave a new log at the top of the workflow log entries. ToDo: insert jpg&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;add-the-mit-license-file&quot;&gt;Add the MIT LICENSE file&lt;/h2&gt;

&lt;p&gt;This site uses the MIT licenses. Of course, feel free to chose a different license if such is more appropriate for your site. You can find the text of many popular licenses at the Open Source Initiative page &lt;a href=&quot;https://opensource.org/licenses&quot;&gt;Licenses &amp;amp; Standards&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Under the root of the repository, add a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LICENSE&lt;/code&gt;, and copy the appropriate text from one of the OSI-approved licenses into the file, save and close it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;modify-the-footer-template&quot;&gt;Modify the footer template&lt;/h2&gt;

&lt;p&gt;It is a good idea to put a link to the license somewhere on each page, and the page footer is an unobtrusive place for this. I also like to put the copyright notice there. I followed the detailed instructions here &lt;a href=&quot;https://cyberloginit.com/2018/05/05/github-pages-jekyll-minima-customize-footer.html#:~:text=To%20customize%20the%20footer%2C%20you,Then%20customize%20footer.&quot;&gt;GitHub Pages Jekyll Minima Customize Footer&lt;/a&gt; by “Cyber Log in IT”.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; to the root of the repository.&lt;/li&gt;
  &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; from the &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima GitHub repository&lt;/a&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; subdirectory.&lt;/li&gt;
  &lt;li&gt;Customize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; to your own needs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The footer.html file from the minima theme looks like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-footer h-card&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;feed-subscribe&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;feed.xml&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svg-icon orange&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;assets/minima-social-icons.svg#rss&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/use&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      {%- if site.author %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contact-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          {% if site.author.name -%}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ site.author.name | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          {% endif -%}
          {% if site.author.email -%}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-email&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mailto:{{ site.author.email }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          {%- endif %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      {%- endif %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ site.description | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;social-links&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {%- include social.html -%}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I modified mine to remove the author email block and add the copyright and License link. For now, I’ll use my own name for the copyright, maybe in the future the work will be taken on by a foundation (I wish!).&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-footer h-card&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relative_url&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;feed-subscribe&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;feed.xml&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svg-icon orange&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;use&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xlink:href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ &apos;assets/minima-social-icons.svg#rss&apos; | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/use&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/svg&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ site.description | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-col&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;copy;&lt;/span&gt; William Hertzing 2020 - 2021 The contents of this website are under the terms of the MIT &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/LICENSE&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;License.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;social-links&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {%- include social.html -%}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, so visually its not a very appealing footer. But then, neither is the Minima theme overall. In fact, I plan to replace the minima theme with another around version 0.03.0 of this site. It’s in the Milestones (ToDo: Insert emoji for laughing uproariously).&lt;/p&gt;

&lt;h2 id=&quot;making-the-first-release-of-the-site&quot;&gt;Making the first release of the site&lt;/h2&gt;

&lt;p&gt;I’m happy now with the initial look and feel to my blogging site. I’ll make a final commit of my outstanding work, then I’ll make another commit and add a Release tag. For now, the release tags will follow the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releases/\d+\.\d+\.\d+&lt;/code&gt;. I prefer to use a full Git Annotated Tag. Details on Git Tagging can be found in &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging.&quot;&gt;Git Basics - Tagging&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have committed all the changes you want for Release 0.01.0,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a releases/0.01.000 -m &quot;Initial release of Bill&apos;s Blog&quot;&lt;/code&gt; (modify the command as appropriate for your site)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag&lt;/code&gt; which will list all existing tags and verify the tag is there.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --tags&lt;/code&gt; to push the release tag to GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This concludes the first edition of this post. In all my career, I’ve never encountered a significant document that didn’t require revisions, and I expect this will, as well. During the course of developing this site, I plan to incorporate a revision tracking system, so (eventually), you should be able to see all the revisions I’ve done to the post, and a change log. However, my idea is that I’ll only publish post revisions when I do a site release. I may increment the third part of the site version when I publish a revision to a post. I think that is in keeping with the spirit of Semantic Versioning, since ‘fixing’ a published post would be somewhat equivalent to fixing a bug in a released software package.&lt;/p&gt;

&lt;p&gt;There are some Milestones defined in this repository’s Issues tab, which detail what I hope to accomplish in the next four revisions. Feel free to look them over if you want to know what’s coming in the next three parts to this series.&lt;/p&gt;

&lt;p&gt;Comments for posts should be enabled soon, until then, please use the Issues on this repository to communicate with me, if you find errors or have questions.&lt;/p&gt;

&lt;p&gt;Thanks for staying to the end :-).&lt;/p&gt;

&lt;p&gt;Bill Hertzing, April 8, 2021&lt;/p&gt;</content><author><name></name></author><category term="technical" /><category term="Jekyll" /><category term="&quot;GitHubPages&quot;" /><summary type="html">I have been trying for a few years to setup a web site I can use for blogging. But since there are a lot of neat features I’d like to include, every prior attempt has foundered on getting it all to hang together, along with the problems of version control for everything. And of course cost is always a consideration. Now, I’m giving it another try, this time using the GitHub Pages to host my site, and building it with Jekyll, the static site generator. Here are the steps I’ve taken to implement the features I’d like to have.</summary></entry><entry><title type="html">Welcome to Bill’s Blog!</title><link href="https://billhertzing.github.io/2021/04/06/Welcome-To-Bills-Blog/" rel="alternate" type="text/html" title="Welcome to Bill’s Blog!" /><published>2021-04-06T10:22:50-06:00</published><updated>2021-04-06T10:22:50-06:00</updated><id>https://billhertzing.github.io/2021/04/06/Welcome-To-Bills-Blog</id><content type="html" xml:base="https://billhertzing.github.io/2021/04/06/Welcome-To-Bills-Blog/">&lt;p&gt;This is my new Blog site, hosted by GitHub Pages.  I’ve never been satisfied with all the effort needed to setup a Blog on other hosting sites; GitHub Pages combined with the Jekyll static site generator seems like it will meet my needs with very simple administration overhead. We will see!&lt;/p&gt;

&lt;p&gt;My first post, appropriately, is on &lt;a href=&quot;/technical/2021/04/06/how-i-setup-this-github-pages-blog-site-part-01/&quot;&gt;How I setup this GitHubPages Blog site Part 01&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog site will be organized into three sections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Technical posts of interests to programmers and IT folks&lt;/li&gt;
  &lt;li&gt;Blogs about political issues that I care about (Hey, a person’s gotta vent occasionally!)&lt;/li&gt;
  &lt;li&gt;The goings-on of me, my family, and friends.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Be aware that, as planned for Version 0.02.0 of this site, the comments on these posts will be handled by &lt;a href=&quot;https://disqus.com&quot;&gt;Disqus&lt;/a&gt; and comments are stored in their servers.&lt;/p&gt;

&lt;p&gt;Please bear with me as I learn the intricacies of Jekyll, static sites, and GitHub Pages!&lt;/p&gt;</content><author><name></name></author><summary type="html">This is my new Blog site, hosted by GitHub Pages. I’ve never been satisfied with all the effort needed to setup a Blog on other hosting sites; GitHub Pages combined with the Jekyll static site generator seems like it will meet my needs with very simple administration overhead. We will see!</summary></entry></feed>